/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// RDCActivation
    /// </summary>
    [DataContract(Name = "RDCActivation")]
    public partial class RDCActivation : IEquatable<RDCActivation>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RDCActivation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RDCActivation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RDCActivation" /> class.
        /// </summary>
        /// <param name="requestedBy">requestedBy (required).</param>
        /// <param name="clientWorkstation">clientWorkstation (required).</param>
        /// <param name="hostWorkstation">hostWorkstation (required).</param>
        /// <param name="peerId">peerId (required).</param>
        /// <param name="sessionId">sessionId (required).</param>
        /// <param name="user">user (required).</param>
        public RDCActivation(string requestedBy = default(string), Workstation clientWorkstation = default(Workstation), Workstation hostWorkstation = default(Workstation), string peerId = default(string), string sessionId = default(string), ElementsUserMini user = default(ElementsUserMini))
        {
            // to ensure "requestedBy" is required (not null)
            this.RequestedBy = requestedBy ?? throw new ArgumentNullException("requestedBy is a required property for RDCActivation and cannot be null");
            // to ensure "clientWorkstation" is required (not null)
            this.ClientWorkstation = clientWorkstation ?? throw new ArgumentNullException("clientWorkstation is a required property for RDCActivation and cannot be null");
            // to ensure "hostWorkstation" is required (not null)
            this.HostWorkstation = hostWorkstation ?? throw new ArgumentNullException("hostWorkstation is a required property for RDCActivation and cannot be null");
            // to ensure "peerId" is required (not null)
            this.PeerId = peerId ?? throw new ArgumentNullException("peerId is a required property for RDCActivation and cannot be null");
            // to ensure "sessionId" is required (not null)
            this.SessionId = sessionId ?? throw new ArgumentNullException("sessionId is a required property for RDCActivation and cannot be null");
            // to ensure "user" is required (not null)
            this.User = user ?? throw new ArgumentNullException("user is a required property for RDCActivation and cannot be null");
        }

        /// <summary>
        /// Gets or Sets RequestedBy
        /// </summary>
        [DataMember(Name = "requested_by", IsRequired = true, EmitDefaultValue = false)]
        public string RequestedBy { get; set; }

        /// <summary>
        /// Gets or Sets ClientWorkstation
        /// </summary>
        [DataMember(Name = "client_workstation", IsRequired = true, EmitDefaultValue = false)]
        public Workstation ClientWorkstation { get; set; }

        /// <summary>
        /// Gets or Sets HostWorkstation
        /// </summary>
        [DataMember(Name = "host_workstation", IsRequired = true, EmitDefaultValue = false)]
        public Workstation HostWorkstation { get; set; }

        /// <summary>
        /// Gets or Sets PeerId
        /// </summary>
        [DataMember(Name = "peer_id", IsRequired = true, EmitDefaultValue = false)]
        public string PeerId { get; set; }

        /// <summary>
        /// Gets or Sets SessionId
        /// </summary>
        [DataMember(Name = "session_id", IsRequired = true, EmitDefaultValue = false)]
        public string SessionId { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "user", IsRequired = true, EmitDefaultValue = false)]
        public ElementsUserMini User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RDCActivation {\n");
            sb.Append("  RequestedBy: ").Append(RequestedBy).Append("\n");
            sb.Append("  ClientWorkstation: ").Append(ClientWorkstation).Append("\n");
            sb.Append("  HostWorkstation: ").Append(HostWorkstation).Append("\n");
            sb.Append("  PeerId: ").Append(PeerId).Append("\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RDCActivation);
        }

        /// <summary>
        /// Returns true if RDCActivation instances are equal
        /// </summary>
        /// <param name="input">Instance of RDCActivation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RDCActivation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RequestedBy == input.RequestedBy ||
                    (this.RequestedBy != null &&
                    this.RequestedBy.Equals(input.RequestedBy))
                ) && 
                (
                    this.ClientWorkstation == input.ClientWorkstation ||
                    (this.ClientWorkstation != null &&
                    this.ClientWorkstation.Equals(input.ClientWorkstation))
                ) && 
                (
                    this.HostWorkstation == input.HostWorkstation ||
                    (this.HostWorkstation != null &&
                    this.HostWorkstation.Equals(input.HostWorkstation))
                ) && 
                (
                    this.PeerId == input.PeerId ||
                    (this.PeerId != null &&
                    this.PeerId.Equals(input.PeerId))
                ) && 
                (
                    this.SessionId == input.SessionId ||
                    (this.SessionId != null &&
                    this.SessionId.Equals(input.SessionId))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestedBy != null)
                    hashCode = hashCode * 59 + this.RequestedBy.GetHashCode();
                if (this.ClientWorkstation != null)
                    hashCode = hashCode * 59 + this.ClientWorkstation.GetHashCode();
                if (this.HostWorkstation != null)
                    hashCode = hashCode * 59 + this.HostWorkstation.GetHashCode();
                if (this.PeerId != null)
                    hashCode = hashCode * 59 + this.PeerId.GetHashCode();
                if (this.SessionId != null)
                    hashCode = hashCode * 59 + this.SessionId.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                return hashCode;
            }
        }

    }

}
