/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// ElementsVersion
    /// </summary>
    [DataContract(Name = "ElementsVersion")]
    public partial class ElementsVersion : IEquatable<ElementsVersion>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ElementsVersion" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ElementsVersion() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ElementsVersion" /> class.
        /// </summary>
        /// <param name="release">release (required).</param>
        /// <param name="branch">branch (required).</param>
        /// <param name="patchCount">patchCount (required).</param>
        /// <param name="patchCommitCount">patchCommitCount (required).</param>
        public ElementsVersion(string release = default(string), string branch = default(string), int patchCount = default(int), int patchCommitCount = default(int))
        {
            // to ensure "release" is required (not null)
            this.Release = release ?? throw new ArgumentNullException("release is a required property for ElementsVersion and cannot be null");
            // to ensure "branch" is required (not null)
            this.Branch = branch ?? throw new ArgumentNullException("branch is a required property for ElementsVersion and cannot be null");
            this.PatchCount = patchCount;
            this.PatchCommitCount = patchCommitCount;
        }

        /// <summary>
        /// Gets or Sets Release
        /// </summary>
        [DataMember(Name = "release", IsRequired = true, EmitDefaultValue = false)]
        public string Release { get; set; }

        /// <summary>
        /// Gets or Sets Branch
        /// </summary>
        [DataMember(Name = "branch", IsRequired = true, EmitDefaultValue = true)]
        public string Branch { get; set; }

        /// <summary>
        /// Gets or Sets PatchCount
        /// </summary>
        [DataMember(Name = "patch_count", IsRequired = true, EmitDefaultValue = false)]
        public int PatchCount { get; set; }

        /// <summary>
        /// Gets or Sets PatchCommitCount
        /// </summary>
        [DataMember(Name = "patch_commit_count", IsRequired = true, EmitDefaultValue = false)]
        public int PatchCommitCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ElementsVersion {\n");
            sb.Append("  Release: ").Append(Release).Append("\n");
            sb.Append("  Branch: ").Append(Branch).Append("\n");
            sb.Append("  PatchCount: ").Append(PatchCount).Append("\n");
            sb.Append("  PatchCommitCount: ").Append(PatchCommitCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ElementsVersion);
        }

        /// <summary>
        /// Returns true if ElementsVersion instances are equal
        /// </summary>
        /// <param name="input">Instance of ElementsVersion to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ElementsVersion input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Release == input.Release ||
                    (this.Release != null &&
                    this.Release.Equals(input.Release))
                ) && 
                (
                    this.Branch == input.Branch ||
                    (this.Branch != null &&
                    this.Branch.Equals(input.Branch))
                ) && 
                (
                    this.PatchCount == input.PatchCount ||
                    this.PatchCount.Equals(input.PatchCount)
                ) && 
                (
                    this.PatchCommitCount == input.PatchCommitCount ||
                    this.PatchCommitCount.Equals(input.PatchCommitCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Release != null)
                    hashCode = hashCode * 59 + this.Release.GetHashCode();
                if (this.Branch != null)
                    hashCode = hashCode * 59 + this.Branch.GetHashCode();
                hashCode = hashCode * 59 + this.PatchCount.GetHashCode();
                hashCode = hashCode * 59 + this.PatchCommitCount.GetHashCode();
                return hashCode;
            }
        }

    }

}
