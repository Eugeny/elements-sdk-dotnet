/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// VolumeLizardFSStatus
    /// </summary>
    [DataContract(Name = "VolumeLizardFSStatus")]
    public partial class VolumeLizardFSStatus : IEquatable<VolumeLizardFSStatus>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VolumeLizardFSStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VolumeLizardFSStatus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VolumeLizardFSStatus" /> class.
        /// </summary>
        /// <param name="master">master (required).</param>
        /// <param name="nodes">nodes (required).</param>
        /// <param name="disks">disks (required).</param>
        public VolumeLizardFSStatus(StorageNodeMini master = default(StorageNodeMini), List<LizardFSNode> nodes = default(List<LizardFSNode>), List<LizardFSDisk> disks = default(List<LizardFSDisk>))
        {
            // to ensure "master" is required (not null)
            this.Master = master ?? throw new ArgumentNullException("master is a required property for VolumeLizardFSStatus and cannot be null");
            // to ensure "nodes" is required (not null)
            this.Nodes = nodes ?? throw new ArgumentNullException("nodes is a required property for VolumeLizardFSStatus and cannot be null");
            // to ensure "disks" is required (not null)
            this.Disks = disks ?? throw new ArgumentNullException("disks is a required property for VolumeLizardFSStatus and cannot be null");
        }

        /// <summary>
        /// Gets or Sets Master
        /// </summary>
        [DataMember(Name = "master", IsRequired = true, EmitDefaultValue = false)]
        public StorageNodeMini Master { get; set; }

        /// <summary>
        /// Gets or Sets Nodes
        /// </summary>
        [DataMember(Name = "nodes", IsRequired = true, EmitDefaultValue = false)]
        public List<LizardFSNode> Nodes { get; set; }

        /// <summary>
        /// Gets or Sets Disks
        /// </summary>
        [DataMember(Name = "disks", IsRequired = true, EmitDefaultValue = false)]
        public List<LizardFSDisk> Disks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VolumeLizardFSStatus {\n");
            sb.Append("  Master: ").Append(Master).Append("\n");
            sb.Append("  Nodes: ").Append(Nodes).Append("\n");
            sb.Append("  Disks: ").Append(Disks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VolumeLizardFSStatus);
        }

        /// <summary>
        /// Returns true if VolumeLizardFSStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of VolumeLizardFSStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VolumeLizardFSStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Master == input.Master ||
                    (this.Master != null &&
                    this.Master.Equals(input.Master))
                ) && 
                (
                    this.Nodes == input.Nodes ||
                    this.Nodes != null &&
                    input.Nodes != null &&
                    this.Nodes.SequenceEqual(input.Nodes)
                ) && 
                (
                    this.Disks == input.Disks ||
                    this.Disks != null &&
                    input.Disks != null &&
                    this.Disks.SequenceEqual(input.Disks)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Master != null)
                    hashCode = hashCode * 59 + this.Master.GetHashCode();
                if (this.Nodes != null)
                    hashCode = hashCode * 59 + this.Nodes.GetHashCode();
                if (this.Disks != null)
                    hashCode = hashCode * 59 + this.Disks.GetHashCode();
                return hashCode;
            }
        }

    }

}
