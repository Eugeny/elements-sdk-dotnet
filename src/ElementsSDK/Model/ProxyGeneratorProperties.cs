/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// ProxyGeneratorProperties
    /// </summary>
    [DataContract(Name = "ProxyGeneratorProperties")]
    public partial class ProxyGeneratorProperties : IEquatable<ProxyGeneratorProperties>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProxyGeneratorProperties" /> class.
        /// </summary>
        /// <param name="supportsVideoBitrate">supportsVideoBitrate.</param>
        /// <param name="supportsVideoCrf">supportsVideoCrf.</param>
        /// <param name="supportsVideoVbr">supportsVideoVbr.</param>
        /// <param name="supportsAudioBitrate">supportsAudioBitrate.</param>
        /// <param name="supportsLut">supportsLut.</param>
        /// <param name="supportsResolution">supportsResolution.</param>
        /// <param name="supportsWatermark">supportsWatermark.</param>
        /// <param name="supportsTimecodeBurnIn">supportsTimecodeBurnIn.</param>
        /// <param name="supportsAudioChannels">supportsAudioChannels.</param>
        /// <param name="supportsRealtimeRead">supportsRealtimeRead.</param>
        /// <param name="supportsStagingPath">supportsStagingPath.</param>
        public ProxyGeneratorProperties(bool supportsVideoBitrate = default(bool), bool supportsVideoCrf = default(bool), bool supportsVideoVbr = default(bool), bool supportsAudioBitrate = default(bool), bool supportsLut = default(bool), bool supportsResolution = default(bool), bool supportsWatermark = default(bool), bool supportsTimecodeBurnIn = default(bool), bool supportsAudioChannels = default(bool), bool supportsRealtimeRead = default(bool), bool supportsStagingPath = default(bool))
        {
            this.SupportsVideoBitrate = supportsVideoBitrate;
            this.SupportsVideoCrf = supportsVideoCrf;
            this.SupportsVideoVbr = supportsVideoVbr;
            this.SupportsAudioBitrate = supportsAudioBitrate;
            this.SupportsLut = supportsLut;
            this.SupportsResolution = supportsResolution;
            this.SupportsWatermark = supportsWatermark;
            this.SupportsTimecodeBurnIn = supportsTimecodeBurnIn;
            this.SupportsAudioChannels = supportsAudioChannels;
            this.SupportsRealtimeRead = supportsRealtimeRead;
            this.SupportsStagingPath = supportsStagingPath;
        }

        /// <summary>
        /// Gets or Sets SupportsVideoBitrate
        /// </summary>
        [DataMember(Name = "supports_video_bitrate", EmitDefaultValue = true)]
        public bool SupportsVideoBitrate { get; set; }

        /// <summary>
        /// Gets or Sets SupportsVideoCrf
        /// </summary>
        [DataMember(Name = "supports_video_crf", EmitDefaultValue = true)]
        public bool SupportsVideoCrf { get; set; }

        /// <summary>
        /// Gets or Sets SupportsVideoVbr
        /// </summary>
        [DataMember(Name = "supports_video_vbr", EmitDefaultValue = true)]
        public bool SupportsVideoVbr { get; set; }

        /// <summary>
        /// Gets or Sets SupportsAudioBitrate
        /// </summary>
        [DataMember(Name = "supports_audio_bitrate", EmitDefaultValue = true)]
        public bool SupportsAudioBitrate { get; set; }

        /// <summary>
        /// Gets or Sets SupportsLut
        /// </summary>
        [DataMember(Name = "supports_lut", EmitDefaultValue = true)]
        public bool SupportsLut { get; set; }

        /// <summary>
        /// Gets or Sets SupportsResolution
        /// </summary>
        [DataMember(Name = "supports_resolution", EmitDefaultValue = true)]
        public bool SupportsResolution { get; set; }

        /// <summary>
        /// Gets or Sets SupportsWatermark
        /// </summary>
        [DataMember(Name = "supports_watermark", EmitDefaultValue = true)]
        public bool SupportsWatermark { get; set; }

        /// <summary>
        /// Gets or Sets SupportsTimecodeBurnIn
        /// </summary>
        [DataMember(Name = "supports_timecode_burn_in", EmitDefaultValue = true)]
        public bool SupportsTimecodeBurnIn { get; set; }

        /// <summary>
        /// Gets or Sets SupportsAudioChannels
        /// </summary>
        [DataMember(Name = "supports_audio_channels", EmitDefaultValue = true)]
        public bool SupportsAudioChannels { get; set; }

        /// <summary>
        /// Gets or Sets SupportsRealtimeRead
        /// </summary>
        [DataMember(Name = "supports_realtime_read", EmitDefaultValue = true)]
        public bool SupportsRealtimeRead { get; set; }

        /// <summary>
        /// Gets or Sets SupportsStagingPath
        /// </summary>
        [DataMember(Name = "supports_staging_path", EmitDefaultValue = true)]
        public bool SupportsStagingPath { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProxyGeneratorProperties {\n");
            sb.Append("  SupportsVideoBitrate: ").Append(SupportsVideoBitrate).Append("\n");
            sb.Append("  SupportsVideoCrf: ").Append(SupportsVideoCrf).Append("\n");
            sb.Append("  SupportsVideoVbr: ").Append(SupportsVideoVbr).Append("\n");
            sb.Append("  SupportsAudioBitrate: ").Append(SupportsAudioBitrate).Append("\n");
            sb.Append("  SupportsLut: ").Append(SupportsLut).Append("\n");
            sb.Append("  SupportsResolution: ").Append(SupportsResolution).Append("\n");
            sb.Append("  SupportsWatermark: ").Append(SupportsWatermark).Append("\n");
            sb.Append("  SupportsTimecodeBurnIn: ").Append(SupportsTimecodeBurnIn).Append("\n");
            sb.Append("  SupportsAudioChannels: ").Append(SupportsAudioChannels).Append("\n");
            sb.Append("  SupportsRealtimeRead: ").Append(SupportsRealtimeRead).Append("\n");
            sb.Append("  SupportsStagingPath: ").Append(SupportsStagingPath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProxyGeneratorProperties);
        }

        /// <summary>
        /// Returns true if ProxyGeneratorProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ProxyGeneratorProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProxyGeneratorProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SupportsVideoBitrate == input.SupportsVideoBitrate ||
                    this.SupportsVideoBitrate.Equals(input.SupportsVideoBitrate)
                ) && 
                (
                    this.SupportsVideoCrf == input.SupportsVideoCrf ||
                    this.SupportsVideoCrf.Equals(input.SupportsVideoCrf)
                ) && 
                (
                    this.SupportsVideoVbr == input.SupportsVideoVbr ||
                    this.SupportsVideoVbr.Equals(input.SupportsVideoVbr)
                ) && 
                (
                    this.SupportsAudioBitrate == input.SupportsAudioBitrate ||
                    this.SupportsAudioBitrate.Equals(input.SupportsAudioBitrate)
                ) && 
                (
                    this.SupportsLut == input.SupportsLut ||
                    this.SupportsLut.Equals(input.SupportsLut)
                ) && 
                (
                    this.SupportsResolution == input.SupportsResolution ||
                    this.SupportsResolution.Equals(input.SupportsResolution)
                ) && 
                (
                    this.SupportsWatermark == input.SupportsWatermark ||
                    this.SupportsWatermark.Equals(input.SupportsWatermark)
                ) && 
                (
                    this.SupportsTimecodeBurnIn == input.SupportsTimecodeBurnIn ||
                    this.SupportsTimecodeBurnIn.Equals(input.SupportsTimecodeBurnIn)
                ) && 
                (
                    this.SupportsAudioChannels == input.SupportsAudioChannels ||
                    this.SupportsAudioChannels.Equals(input.SupportsAudioChannels)
                ) && 
                (
                    this.SupportsRealtimeRead == input.SupportsRealtimeRead ||
                    this.SupportsRealtimeRead.Equals(input.SupportsRealtimeRead)
                ) && 
                (
                    this.SupportsStagingPath == input.SupportsStagingPath ||
                    this.SupportsStagingPath.Equals(input.SupportsStagingPath)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.SupportsVideoBitrate.GetHashCode();
                hashCode = hashCode * 59 + this.SupportsVideoCrf.GetHashCode();
                hashCode = hashCode * 59 + this.SupportsVideoVbr.GetHashCode();
                hashCode = hashCode * 59 + this.SupportsAudioBitrate.GetHashCode();
                hashCode = hashCode * 59 + this.SupportsLut.GetHashCode();
                hashCode = hashCode * 59 + this.SupportsResolution.GetHashCode();
                hashCode = hashCode * 59 + this.SupportsWatermark.GetHashCode();
                hashCode = hashCode * 59 + this.SupportsTimecodeBurnIn.GetHashCode();
                hashCode = hashCode * 59 + this.SupportsAudioChannels.GetHashCode();
                hashCode = hashCode * 59 + this.SupportsRealtimeRead.GetHashCode();
                hashCode = hashCode * 59 + this.SupportsStagingPath.GetHashCode();
                return hashCode;
            }
        }

    }

}
