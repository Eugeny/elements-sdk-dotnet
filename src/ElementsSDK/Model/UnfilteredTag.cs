/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// UnfilteredTag
    /// </summary>
    [DataContract(Name = "UnfilteredTag")]
    public partial class UnfilteredTag : IEquatable<UnfilteredTag>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UnfilteredTag" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UnfilteredTag() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UnfilteredTag" /> class.
        /// </summary>
        /// <param name="roots">roots (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="shared">shared.</param>
        /// <param name="color">color.</param>
        public UnfilteredTag(List<int> roots = default(List<int>), string name = default(string), bool shared = default(bool), string color = default(string))
        {
            // to ensure "roots" is required (not null)
            this.Roots = roots ?? throw new ArgumentNullException("roots is a required property for UnfilteredTag and cannot be null");
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for UnfilteredTag and cannot be null");
            this.Shared = shared;
            this.Color = color;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Roots
        /// </summary>
        [DataMember(Name = "roots", IsRequired = true, EmitDefaultValue = false)]
        public List<int> Roots { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Shared
        /// </summary>
        [DataMember(Name = "shared", EmitDefaultValue = true)]
        public bool Shared { get; set; }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [DataMember(Name = "color", EmitDefaultValue = false)]
        public string Color { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UnfilteredTag {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Roots: ").Append(Roots).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Shared: ").Append(Shared).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UnfilteredTag);
        }

        /// <summary>
        /// Returns true if UnfilteredTag instances are equal
        /// </summary>
        /// <param name="input">Instance of UnfilteredTag to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UnfilteredTag input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Roots == input.Roots ||
                    this.Roots != null &&
                    input.Roots != null &&
                    this.Roots.SequenceEqual(input.Roots)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Shared == input.Shared ||
                    this.Shared.Equals(input.Shared)
                ) && 
                (
                    this.Color == input.Color ||
                    (this.Color != null &&
                    this.Color.Equals(input.Color))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Roots != null)
                    hashCode = hashCode * 59 + this.Roots.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                hashCode = hashCode * 59 + this.Shared.GetHashCode();
                if (this.Color != null)
                    hashCode = hashCode * 59 + this.Color.GetHashCode();
                return hashCode;
            }
        }

    }

}
