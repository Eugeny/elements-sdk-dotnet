/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// VolumeStatus
    /// </summary>
    [DataContract(Name = "VolumeStatus")]
    public partial class VolumeStatus : IEquatable<VolumeStatus>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VolumeStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VolumeStatus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VolumeStatus" /> class.
        /// </summary>
        /// <param name="online">online (required).</param>
        /// <param name="sizeTotal">sizeTotal (required).</param>
        /// <param name="sizeUsed">sizeUsed (required).</param>
        /// <param name="sizeFree">sizeFree (required).</param>
        /// <param name="snfs">snfs.</param>
        /// <param name="lizardfs">lizardfs.</param>
        /// <param name="beegfs">beegfs.</param>
        public VolumeStatus(bool online = default(bool), int? sizeTotal = default(int?), int? sizeUsed = default(int?), int? sizeFree = default(int?), VolumeSNFSStatus snfs = default(VolumeSNFSStatus), VolumeLizardFSStatus lizardfs = default(VolumeLizardFSStatus), VolumeBeeGFSStatus beegfs = default(VolumeBeeGFSStatus))
        {
            this.Online = online;
            // to ensure "sizeTotal" is required (not null)
            this.SizeTotal = sizeTotal ?? throw new ArgumentNullException("sizeTotal is a required property for VolumeStatus and cannot be null");
            // to ensure "sizeUsed" is required (not null)
            this.SizeUsed = sizeUsed ?? throw new ArgumentNullException("sizeUsed is a required property for VolumeStatus and cannot be null");
            // to ensure "sizeFree" is required (not null)
            this.SizeFree = sizeFree ?? throw new ArgumentNullException("sizeFree is a required property for VolumeStatus and cannot be null");
            this.Snfs = snfs;
            this.Lizardfs = lizardfs;
            this.Beegfs = beegfs;
        }

        /// <summary>
        /// Gets or Sets Online
        /// </summary>
        [DataMember(Name = "online", IsRequired = true, EmitDefaultValue = true)]
        public bool Online { get; set; }

        /// <summary>
        /// Gets or Sets SizeTotal
        /// </summary>
        [DataMember(Name = "size_total", IsRequired = true, EmitDefaultValue = true)]
        public int? SizeTotal { get; set; }

        /// <summary>
        /// Gets or Sets SizeUsed
        /// </summary>
        [DataMember(Name = "size_used", IsRequired = true, EmitDefaultValue = true)]
        public int? SizeUsed { get; set; }

        /// <summary>
        /// Gets or Sets SizeFree
        /// </summary>
        [DataMember(Name = "size_free", IsRequired = true, EmitDefaultValue = true)]
        public int? SizeFree { get; set; }

        /// <summary>
        /// Gets or Sets Snfs
        /// </summary>
        [DataMember(Name = "snfs", EmitDefaultValue = false)]
        public VolumeSNFSStatus Snfs { get; set; }

        /// <summary>
        /// Gets or Sets Lizardfs
        /// </summary>
        [DataMember(Name = "lizardfs", EmitDefaultValue = false)]
        public VolumeLizardFSStatus Lizardfs { get; set; }

        /// <summary>
        /// Gets or Sets Beegfs
        /// </summary>
        [DataMember(Name = "beegfs", EmitDefaultValue = false)]
        public VolumeBeeGFSStatus Beegfs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VolumeStatus {\n");
            sb.Append("  Online: ").Append(Online).Append("\n");
            sb.Append("  SizeTotal: ").Append(SizeTotal).Append("\n");
            sb.Append("  SizeUsed: ").Append(SizeUsed).Append("\n");
            sb.Append("  SizeFree: ").Append(SizeFree).Append("\n");
            sb.Append("  Snfs: ").Append(Snfs).Append("\n");
            sb.Append("  Lizardfs: ").Append(Lizardfs).Append("\n");
            sb.Append("  Beegfs: ").Append(Beegfs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VolumeStatus);
        }

        /// <summary>
        /// Returns true if VolumeStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of VolumeStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VolumeStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Online == input.Online ||
                    this.Online.Equals(input.Online)
                ) && 
                (
                    this.SizeTotal == input.SizeTotal ||
                    (this.SizeTotal != null &&
                    this.SizeTotal.Equals(input.SizeTotal))
                ) && 
                (
                    this.SizeUsed == input.SizeUsed ||
                    (this.SizeUsed != null &&
                    this.SizeUsed.Equals(input.SizeUsed))
                ) && 
                (
                    this.SizeFree == input.SizeFree ||
                    (this.SizeFree != null &&
                    this.SizeFree.Equals(input.SizeFree))
                ) && 
                (
                    this.Snfs == input.Snfs ||
                    (this.Snfs != null &&
                    this.Snfs.Equals(input.Snfs))
                ) && 
                (
                    this.Lizardfs == input.Lizardfs ||
                    (this.Lizardfs != null &&
                    this.Lizardfs.Equals(input.Lizardfs))
                ) && 
                (
                    this.Beegfs == input.Beegfs ||
                    (this.Beegfs != null &&
                    this.Beegfs.Equals(input.Beegfs))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Online.GetHashCode();
                if (this.SizeTotal != null)
                    hashCode = hashCode * 59 + this.SizeTotal.GetHashCode();
                if (this.SizeUsed != null)
                    hashCode = hashCode * 59 + this.SizeUsed.GetHashCode();
                if (this.SizeFree != null)
                    hashCode = hashCode * 59 + this.SizeFree.GetHashCode();
                if (this.Snfs != null)
                    hashCode = hashCode * 59 + this.Snfs.GetHashCode();
                if (this.Lizardfs != null)
                    hashCode = hashCode * 59 + this.Lizardfs.GetHashCode();
                if (this.Beegfs != null)
                    hashCode = hashCode * 59 + this.Beegfs.GetHashCode();
                return hashCode;
            }
        }

    }

}
