/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// AWSAccount
    /// </summary>
    [DataContract(Name = "AWSAccount")]
    public partial class AWSAccount : IEquatable<AWSAccount>
    {
        /// <summary>
        /// Defines DefaultRegion
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DefaultRegionEnum
        {
            /// <summary>
            /// Enum UsEast2 for value: us-east-2
            /// </summary>
            [EnumMember(Value = "us-east-2")]
            UsEast2 = 1,

            /// <summary>
            /// Enum UsEast1 for value: us-east-1
            /// </summary>
            [EnumMember(Value = "us-east-1")]
            UsEast1 = 2,

            /// <summary>
            /// Enum UsWest1 for value: us-west-1
            /// </summary>
            [EnumMember(Value = "us-west-1")]
            UsWest1 = 3,

            /// <summary>
            /// Enum UsWest2 for value: us-west-2
            /// </summary>
            [EnumMember(Value = "us-west-2")]
            UsWest2 = 4,

            /// <summary>
            /// Enum ApEast1 for value: ap-east-1
            /// </summary>
            [EnumMember(Value = "ap-east-1")]
            ApEast1 = 5,

            /// <summary>
            /// Enum ApSouth1 for value: ap-south-1
            /// </summary>
            [EnumMember(Value = "ap-south-1")]
            ApSouth1 = 6,

            /// <summary>
            /// Enum ApNortheast2 for value: ap-northeast-2
            /// </summary>
            [EnumMember(Value = "ap-northeast-2")]
            ApNortheast2 = 7,

            /// <summary>
            /// Enum ApSoutheast1 for value: ap-southeast-1
            /// </summary>
            [EnumMember(Value = "ap-southeast-1")]
            ApSoutheast1 = 8,

            /// <summary>
            /// Enum ApSoutheast2 for value: ap-southeast-2
            /// </summary>
            [EnumMember(Value = "ap-southeast-2")]
            ApSoutheast2 = 9,

            /// <summary>
            /// Enum ApNortheast1 for value: ap-northeast-1
            /// </summary>
            [EnumMember(Value = "ap-northeast-1")]
            ApNortheast1 = 10,

            /// <summary>
            /// Enum CaCentral1 for value: ca-central-1
            /// </summary>
            [EnumMember(Value = "ca-central-1")]
            CaCentral1 = 11,

            /// <summary>
            /// Enum CnNorth1 for value: cn-north-1
            /// </summary>
            [EnumMember(Value = "cn-north-1")]
            CnNorth1 = 12,

            /// <summary>
            /// Enum CnNorthwest1 for value: cn-northwest-1
            /// </summary>
            [EnumMember(Value = "cn-northwest-1")]
            CnNorthwest1 = 13,

            /// <summary>
            /// Enum EuCentral1 for value: eu-central-1
            /// </summary>
            [EnumMember(Value = "eu-central-1")]
            EuCentral1 = 14,

            /// <summary>
            /// Enum EuWest1 for value: eu-west-1
            /// </summary>
            [EnumMember(Value = "eu-west-1")]
            EuWest1 = 15,

            /// <summary>
            /// Enum EuWest2 for value: eu-west-2
            /// </summary>
            [EnumMember(Value = "eu-west-2")]
            EuWest2 = 16,

            /// <summary>
            /// Enum EuWest3 for value: eu-west-3
            /// </summary>
            [EnumMember(Value = "eu-west-3")]
            EuWest3 = 17,

            /// <summary>
            /// Enum EuNorth1 for value: eu-north-1
            /// </summary>
            [EnumMember(Value = "eu-north-1")]
            EuNorth1 = 18,

            /// <summary>
            /// Enum MeSouth1 for value: me-south-1
            /// </summary>
            [EnumMember(Value = "me-south-1")]
            MeSouth1 = 19,

            /// <summary>
            /// Enum SaEast1 for value: sa-east-1
            /// </summary>
            [EnumMember(Value = "sa-east-1")]
            SaEast1 = 20

        }


        /// <summary>
        /// Gets or Sets DefaultRegion
        /// </summary>
        [DataMember(Name = "default_region", EmitDefaultValue = false)]
        public DefaultRegionEnum? DefaultRegion { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AWSAccount" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AWSAccount() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AWSAccount" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="accessKeyId">accessKeyId (required).</param>
        /// <param name="secretAccessKey">secretAccessKey (required).</param>
        /// <param name="endpointUrl">endpointUrl.</param>
        /// <param name="defaultRegion">defaultRegion.</param>
        public AWSAccount(string name = default(string), string accessKeyId = default(string), string secretAccessKey = default(string), string endpointUrl = default(string), DefaultRegionEnum? defaultRegion = default(DefaultRegionEnum?))
        {
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for AWSAccount and cannot be null");
            // to ensure "accessKeyId" is required (not null)
            this.AccessKeyId = accessKeyId ?? throw new ArgumentNullException("accessKeyId is a required property for AWSAccount and cannot be null");
            // to ensure "secretAccessKey" is required (not null)
            this.SecretAccessKey = secretAccessKey ?? throw new ArgumentNullException("secretAccessKey is a required property for AWSAccount and cannot be null");
            this.EndpointUrl = endpointUrl;
            this.DefaultRegion = defaultRegion;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets AccessKeyId
        /// </summary>
        [DataMember(Name = "access_key_id", IsRequired = true, EmitDefaultValue = false)]
        public string AccessKeyId { get; set; }

        /// <summary>
        /// Gets or Sets SecretAccessKey
        /// </summary>
        [DataMember(Name = "secret_access_key", IsRequired = true, EmitDefaultValue = false)]
        public string SecretAccessKey { get; set; }

        /// <summary>
        /// Gets or Sets EndpointUrl
        /// </summary>
        [DataMember(Name = "endpoint_url", EmitDefaultValue = true)]
        public string EndpointUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AWSAccount {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  AccessKeyId: ").Append(AccessKeyId).Append("\n");
            sb.Append("  SecretAccessKey: ").Append(SecretAccessKey).Append("\n");
            sb.Append("  EndpointUrl: ").Append(EndpointUrl).Append("\n");
            sb.Append("  DefaultRegion: ").Append(DefaultRegion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AWSAccount);
        }

        /// <summary>
        /// Returns true if AWSAccount instances are equal
        /// </summary>
        /// <param name="input">Instance of AWSAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AWSAccount input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.AccessKeyId == input.AccessKeyId ||
                    (this.AccessKeyId != null &&
                    this.AccessKeyId.Equals(input.AccessKeyId))
                ) && 
                (
                    this.SecretAccessKey == input.SecretAccessKey ||
                    (this.SecretAccessKey != null &&
                    this.SecretAccessKey.Equals(input.SecretAccessKey))
                ) && 
                (
                    this.EndpointUrl == input.EndpointUrl ||
                    (this.EndpointUrl != null &&
                    this.EndpointUrl.Equals(input.EndpointUrl))
                ) && 
                (
                    this.DefaultRegion == input.DefaultRegion ||
                    this.DefaultRegion.Equals(input.DefaultRegion)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.AccessKeyId != null)
                    hashCode = hashCode * 59 + this.AccessKeyId.GetHashCode();
                if (this.SecretAccessKey != null)
                    hashCode = hashCode * 59 + this.SecretAccessKey.GetHashCode();
                if (this.EndpointUrl != null)
                    hashCode = hashCode * 59 + this.EndpointUrl.GetHashCode();
                hashCode = hashCode * 59 + this.DefaultRegion.GetHashCode();
                return hashCode;
            }
        }

    }

}
