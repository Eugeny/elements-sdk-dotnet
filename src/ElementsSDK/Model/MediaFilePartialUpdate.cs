/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// MediaFilePartialUpdate
    /// </summary>
    [DataContract(Name = "MediaFilePartialUpdate")]
    public partial class MediaFilePartialUpdate : IEquatable<MediaFilePartialUpdate>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MediaFilePartialUpdate" /> class.
        /// </summary>
        /// <param name="info">info.</param>
        /// <param name="customFields">customFields.</param>
        /// <param name="totalFiles">totalFiles.</param>
        /// <param name="needsRescan">needsRescan.</param>
        /// <param name="bookmarkedBy">bookmarkedBy.</param>
        public MediaFilePartialUpdate(Dictionary<string, string> info = default(Dictionary<string, string>), Dictionary<string, string> customFields = default(Dictionary<string, string>), int? totalFiles = default(int?), bool needsRescan = default(bool), List<int> bookmarkedBy = default(List<int>))
        {
            this.Info = info;
            this.CustomFields = customFields;
            this.TotalFiles = totalFiles;
            this.NeedsRescan = needsRescan;
            this.BookmarkedBy = bookmarkedBy;
        }

        /// <summary>
        /// Gets or Sets Info
        /// </summary>
        [DataMember(Name = "info", EmitDefaultValue = false)]
        public Dictionary<string, string> Info { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name = "custom_fields", EmitDefaultValue = false)]
        public Dictionary<string, string> CustomFields { get; set; }

        /// <summary>
        /// Gets or Sets TotalFiles
        /// </summary>
        [DataMember(Name = "total_files", EmitDefaultValue = true)]
        public int? TotalFiles { get; set; }

        /// <summary>
        /// Gets or Sets NeedsRescan
        /// </summary>
        [DataMember(Name = "needs_rescan", EmitDefaultValue = true)]
        public bool NeedsRescan { get; set; }

        /// <summary>
        /// Gets or Sets BookmarkedBy
        /// </summary>
        [DataMember(Name = "bookmarked_by", EmitDefaultValue = false)]
        public List<int> BookmarkedBy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MediaFilePartialUpdate {\n");
            sb.Append("  Info: ").Append(Info).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  TotalFiles: ").Append(TotalFiles).Append("\n");
            sb.Append("  NeedsRescan: ").Append(NeedsRescan).Append("\n");
            sb.Append("  BookmarkedBy: ").Append(BookmarkedBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MediaFilePartialUpdate);
        }

        /// <summary>
        /// Returns true if MediaFilePartialUpdate instances are equal
        /// </summary>
        /// <param name="input">Instance of MediaFilePartialUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MediaFilePartialUpdate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Info == input.Info ||
                    this.Info != null &&
                    input.Info != null &&
                    this.Info.SequenceEqual(input.Info)
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    this.CustomFields != null &&
                    input.CustomFields != null &&
                    this.CustomFields.SequenceEqual(input.CustomFields)
                ) && 
                (
                    this.TotalFiles == input.TotalFiles ||
                    (this.TotalFiles != null &&
                    this.TotalFiles.Equals(input.TotalFiles))
                ) && 
                (
                    this.NeedsRescan == input.NeedsRescan ||
                    this.NeedsRescan.Equals(input.NeedsRescan)
                ) && 
                (
                    this.BookmarkedBy == input.BookmarkedBy ||
                    this.BookmarkedBy != null &&
                    input.BookmarkedBy != null &&
                    this.BookmarkedBy.SequenceEqual(input.BookmarkedBy)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Info != null)
                    hashCode = hashCode * 59 + this.Info.GetHashCode();
                if (this.CustomFields != null)
                    hashCode = hashCode * 59 + this.CustomFields.GetHashCode();
                if (this.TotalFiles != null)
                    hashCode = hashCode * 59 + this.TotalFiles.GetHashCode();
                hashCode = hashCode * 59 + this.NeedsRescan.GetHashCode();
                if (this.BookmarkedBy != null)
                    hashCode = hashCode * 59 + this.BookmarkedBy.GetHashCode();
                return hashCode;
            }
        }

    }

}
