/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// TranscoderProfile
    /// </summary>
    [DataContract(Name = "TranscoderProfile")]
    public partial class TranscoderProfile : IEquatable<TranscoderProfile>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TranscoderProfile" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TranscoderProfile() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TranscoderProfile" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="options">options.</param>
        /// <param name="binary">binary.</param>
        /// <param name="command">command.</param>
        /// <param name="outputExtension">outputExtension.</param>
        /// <param name="acceptsBitrate">acceptsBitrate.</param>
        /// <param name="acceptsFps">acceptsFps.</param>
        /// <param name="acceptsResolution">acceptsResolution.</param>
        public TranscoderProfile(string name = default(string), string options = default(string), string binary = default(string), string command = default(string), string outputExtension = default(string), bool acceptsBitrate = default(bool), bool acceptsFps = default(bool), bool acceptsResolution = default(bool))
        {
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for TranscoderProfile and cannot be null");
            this.Options = options;
            this.Binary = binary;
            this.Command = command;
            this.OutputExtension = outputExtension;
            this.AcceptsBitrate = acceptsBitrate;
            this.AcceptsFps = acceptsFps;
            this.AcceptsResolution = acceptsResolution;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name = "options", EmitDefaultValue = false)]
        public string Options { get; set; }

        /// <summary>
        /// Gets or Sets Binary
        /// </summary>
        [DataMember(Name = "binary", EmitDefaultValue = false)]
        public string Binary { get; set; }

        /// <summary>
        /// Gets or Sets Command
        /// </summary>
        [DataMember(Name = "command", EmitDefaultValue = false)]
        public string Command { get; set; }

        /// <summary>
        /// Gets or Sets OutputExtension
        /// </summary>
        [DataMember(Name = "output_extension", EmitDefaultValue = false)]
        public string OutputExtension { get; set; }

        /// <summary>
        /// Gets or Sets AcceptsBitrate
        /// </summary>
        [DataMember(Name = "accepts_bitrate", EmitDefaultValue = true)]
        public bool AcceptsBitrate { get; set; }

        /// <summary>
        /// Gets or Sets AcceptsFps
        /// </summary>
        [DataMember(Name = "accepts_fps", EmitDefaultValue = true)]
        public bool AcceptsFps { get; set; }

        /// <summary>
        /// Gets or Sets AcceptsResolution
        /// </summary>
        [DataMember(Name = "accepts_resolution", EmitDefaultValue = true)]
        public bool AcceptsResolution { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TranscoderProfile {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  Binary: ").Append(Binary).Append("\n");
            sb.Append("  Command: ").Append(Command).Append("\n");
            sb.Append("  OutputExtension: ").Append(OutputExtension).Append("\n");
            sb.Append("  AcceptsBitrate: ").Append(AcceptsBitrate).Append("\n");
            sb.Append("  AcceptsFps: ").Append(AcceptsFps).Append("\n");
            sb.Append("  AcceptsResolution: ").Append(AcceptsResolution).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TranscoderProfile);
        }

        /// <summary>
        /// Returns true if TranscoderProfile instances are equal
        /// </summary>
        /// <param name="input">Instance of TranscoderProfile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TranscoderProfile input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Options == input.Options ||
                    (this.Options != null &&
                    this.Options.Equals(input.Options))
                ) && 
                (
                    this.Binary == input.Binary ||
                    (this.Binary != null &&
                    this.Binary.Equals(input.Binary))
                ) && 
                (
                    this.Command == input.Command ||
                    (this.Command != null &&
                    this.Command.Equals(input.Command))
                ) && 
                (
                    this.OutputExtension == input.OutputExtension ||
                    (this.OutputExtension != null &&
                    this.OutputExtension.Equals(input.OutputExtension))
                ) && 
                (
                    this.AcceptsBitrate == input.AcceptsBitrate ||
                    this.AcceptsBitrate.Equals(input.AcceptsBitrate)
                ) && 
                (
                    this.AcceptsFps == input.AcceptsFps ||
                    this.AcceptsFps.Equals(input.AcceptsFps)
                ) && 
                (
                    this.AcceptsResolution == input.AcceptsResolution ||
                    this.AcceptsResolution.Equals(input.AcceptsResolution)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Options != null)
                    hashCode = hashCode * 59 + this.Options.GetHashCode();
                if (this.Binary != null)
                    hashCode = hashCode * 59 + this.Binary.GetHashCode();
                if (this.Command != null)
                    hashCode = hashCode * 59 + this.Command.GetHashCode();
                if (this.OutputExtension != null)
                    hashCode = hashCode * 59 + this.OutputExtension.GetHashCode();
                hashCode = hashCode * 59 + this.AcceptsBitrate.GetHashCode();
                hashCode = hashCode * 59 + this.AcceptsFps.GetHashCode();
                hashCode = hashCode * 59 + this.AcceptsResolution.GetHashCode();
                return hashCode;
            }
        }

    }

}
