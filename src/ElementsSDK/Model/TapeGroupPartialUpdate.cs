/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// TapeGroupPartialUpdate
    /// </summary>
    [DataContract(Name = "TapeGroupPartialUpdate")]
    public partial class TapeGroupPartialUpdate : IEquatable<TapeGroupPartialUpdate>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TapeGroupPartialUpdate" /> class.
        /// </summary>
        /// <param name="tapes">tapes.</param>
        /// <param name="name">name.</param>
        public TapeGroupPartialUpdate(List<TapeReference> tapes = default(List<TapeReference>), string name = default(string))
        {
            this.Tapes = tapes;
            this.Name = name;
        }

        /// <summary>
        /// Gets or Sets Tapes
        /// </summary>
        [DataMember(Name = "tapes", EmitDefaultValue = false)]
        public List<TapeReference> Tapes { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TapeGroupPartialUpdate {\n");
            sb.Append("  Tapes: ").Append(Tapes).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TapeGroupPartialUpdate);
        }

        /// <summary>
        /// Returns true if TapeGroupPartialUpdate instances are equal
        /// </summary>
        /// <param name="input">Instance of TapeGroupPartialUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TapeGroupPartialUpdate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Tapes == input.Tapes ||
                    this.Tapes != null &&
                    input.Tapes != null &&
                    this.Tapes.SequenceEqual(input.Tapes)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Tapes != null)
                    hashCode = hashCode * 59 + this.Tapes.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                return hashCode;
            }
        }

    }

}
