/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// TasksSummary
    /// </summary>
    [DataContract(Name = "TasksSummary")]
    public partial class TasksSummary : IEquatable<TasksSummary>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TasksSummary" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TasksSummary() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TasksSummary" /> class.
        /// </summary>
        /// <param name="running">running (required).</param>
        /// <param name="recentFinished">recentFinished (required).</param>
        /// <param name="pendingCount">pendingCount (required).</param>
        public TasksSummary(List<TaskInfo> running = default(List<TaskInfo>), List<TaskInfo> recentFinished = default(List<TaskInfo>), int pendingCount = default(int))
        {
            // to ensure "running" is required (not null)
            this.Running = running ?? throw new ArgumentNullException("running is a required property for TasksSummary and cannot be null");
            // to ensure "recentFinished" is required (not null)
            this.RecentFinished = recentFinished ?? throw new ArgumentNullException("recentFinished is a required property for TasksSummary and cannot be null");
            this.PendingCount = pendingCount;
        }

        /// <summary>
        /// Gets or Sets Running
        /// </summary>
        [DataMember(Name = "running", IsRequired = true, EmitDefaultValue = false)]
        public List<TaskInfo> Running { get; set; }

        /// <summary>
        /// Gets or Sets RecentFinished
        /// </summary>
        [DataMember(Name = "recent_finished", IsRequired = true, EmitDefaultValue = false)]
        public List<TaskInfo> RecentFinished { get; set; }

        /// <summary>
        /// Gets or Sets PendingCount
        /// </summary>
        [DataMember(Name = "pending_count", IsRequired = true, EmitDefaultValue = false)]
        public int PendingCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TasksSummary {\n");
            sb.Append("  Running: ").Append(Running).Append("\n");
            sb.Append("  RecentFinished: ").Append(RecentFinished).Append("\n");
            sb.Append("  PendingCount: ").Append(PendingCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TasksSummary);
        }

        /// <summary>
        /// Returns true if TasksSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of TasksSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TasksSummary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Running == input.Running ||
                    this.Running != null &&
                    input.Running != null &&
                    this.Running.SequenceEqual(input.Running)
                ) && 
                (
                    this.RecentFinished == input.RecentFinished ||
                    this.RecentFinished != null &&
                    input.RecentFinished != null &&
                    this.RecentFinished.SequenceEqual(input.RecentFinished)
                ) && 
                (
                    this.PendingCount == input.PendingCount ||
                    this.PendingCount.Equals(input.PendingCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Running != null)
                    hashCode = hashCode * 59 + this.Running.GetHashCode();
                if (this.RecentFinished != null)
                    hashCode = hashCode * 59 + this.RecentFinished.GetHashCode();
                hashCode = hashCode * 59 + this.PendingCount.GetHashCode();
                return hashCode;
            }
        }

    }

}
