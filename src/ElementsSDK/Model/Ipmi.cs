/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// Ipmi
    /// </summary>
    [DataContract(Name = "Ipmi")]
    public partial class Ipmi : IEquatable<Ipmi>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ipmi" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Ipmi() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Ipmi" /> class.
        /// </summary>
        /// <param name="ip">ip (required).</param>
        /// <param name="netmask">netmask (required).</param>
        /// <param name="gateway">gateway (required).</param>
        public Ipmi(string ip = default(string), string netmask = default(string), string gateway = default(string))
        {
            // to ensure "ip" is required (not null)
            this.Ip = ip ?? throw new ArgumentNullException("ip is a required property for Ipmi and cannot be null");
            // to ensure "netmask" is required (not null)
            this.Netmask = netmask ?? throw new ArgumentNullException("netmask is a required property for Ipmi and cannot be null");
            // to ensure "gateway" is required (not null)
            this.Gateway = gateway ?? throw new ArgumentNullException("gateway is a required property for Ipmi and cannot be null");
        }

        /// <summary>
        /// Gets or Sets Ip
        /// </summary>
        [DataMember(Name = "ip", IsRequired = true, EmitDefaultValue = false)]
        public string Ip { get; set; }

        /// <summary>
        /// Gets or Sets Netmask
        /// </summary>
        [DataMember(Name = "netmask", IsRequired = true, EmitDefaultValue = false)]
        public string Netmask { get; set; }

        /// <summary>
        /// Gets or Sets Gateway
        /// </summary>
        [DataMember(Name = "gateway", IsRequired = true, EmitDefaultValue = false)]
        public string Gateway { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ipmi {\n");
            sb.Append("  Ip: ").Append(Ip).Append("\n");
            sb.Append("  Netmask: ").Append(Netmask).Append("\n");
            sb.Append("  Gateway: ").Append(Gateway).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Ipmi);
        }

        /// <summary>
        /// Returns true if Ipmi instances are equal
        /// </summary>
        /// <param name="input">Instance of Ipmi to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ipmi input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Ip == input.Ip ||
                    (this.Ip != null &&
                    this.Ip.Equals(input.Ip))
                ) && 
                (
                    this.Netmask == input.Netmask ||
                    (this.Netmask != null &&
                    this.Netmask.Equals(input.Netmask))
                ) && 
                (
                    this.Gateway == input.Gateway ||
                    (this.Gateway != null &&
                    this.Gateway.Equals(input.Gateway))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ip != null)
                    hashCode = hashCode * 59 + this.Ip.GetHashCode();
                if (this.Netmask != null)
                    hashCode = hashCode * 59 + this.Netmask.GetHashCode();
                if (this.Gateway != null)
                    hashCode = hashCode * 59 + this.Gateway.GetHashCode();
                return hashCode;
            }
        }

    }

}
