/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// MoveWorkspaceRequest
    /// </summary>
    [DataContract(Name = "MoveWorkspaceRequest")]
    public partial class MoveWorkspaceRequest : IEquatable<MoveWorkspaceRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MoveWorkspaceRequest" /> class.
        /// </summary>
        /// <param name="production">production.</param>
        /// <param name="volume">volume.</param>
        /// <param name="directory">directory.</param>
        public MoveWorkspaceRequest(int production = default(int), int volume = default(int), string directory = default(string))
        {
            this.Production = production;
            this.Volume = volume;
            this.Directory = directory;
        }

        /// <summary>
        /// Gets or Sets Production
        /// </summary>
        [DataMember(Name = "production", EmitDefaultValue = false)]
        public int Production { get; set; }

        /// <summary>
        /// Gets or Sets Volume
        /// </summary>
        [DataMember(Name = "volume", EmitDefaultValue = false)]
        public int Volume { get; set; }

        /// <summary>
        /// Gets or Sets Directory
        /// </summary>
        [DataMember(Name = "directory", EmitDefaultValue = false)]
        public string Directory { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MoveWorkspaceRequest {\n");
            sb.Append("  Production: ").Append(Production).Append("\n");
            sb.Append("  Volume: ").Append(Volume).Append("\n");
            sb.Append("  Directory: ").Append(Directory).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MoveWorkspaceRequest);
        }

        /// <summary>
        /// Returns true if MoveWorkspaceRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of MoveWorkspaceRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MoveWorkspaceRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Production == input.Production ||
                    this.Production.Equals(input.Production)
                ) && 
                (
                    this.Volume == input.Volume ||
                    this.Volume.Equals(input.Volume)
                ) && 
                (
                    this.Directory == input.Directory ||
                    (this.Directory != null &&
                    this.Directory.Equals(input.Directory))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Production.GetHashCode();
                hashCode = hashCode * 59 + this.Volume.GetHashCode();
                if (this.Directory != null)
                    hashCode = hashCode * 59 + this.Directory.GetHashCode();
                return hashCode;
            }
        }

    }

}
