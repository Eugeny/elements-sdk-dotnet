/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// Marker
    /// </summary>
    [DataContract(Name = "Marker")]
    public partial class Marker : IEquatable<Marker>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Marker" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Marker() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Marker" /> class.
        /// </summary>
        /// <param name="title">title.</param>
        /// <param name="text">text.</param>
        /// <param name="tIn">tIn (required).</param>
        /// <param name="tOut">tOut (required).</param>
        /// <param name="asset">asset (required).</param>
        public Marker(string title = default(string), string text = default(string), decimal tIn = default(decimal), decimal tOut = default(decimal), int asset = default(int))
        {
            this.TIn = tIn;
            this.TOut = tOut;
            this.Asset = asset;
            this.Title = title;
            this.Text = text;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets VeritoneMetadataParser
        /// </summary>
        [DataMember(Name = "veritone_metadata_parser", EmitDefaultValue = false)]
        public string VeritoneMetadataParser { get; private set; }

        /// <summary>
        /// Returns false as VeritoneMetadataParser should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVeritoneMetadataParser()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name = "text", EmitDefaultValue = false)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets TIn
        /// </summary>
        [DataMember(Name = "t_in", IsRequired = true, EmitDefaultValue = false)]
        public decimal TIn { get; set; }

        /// <summary>
        /// Gets or Sets TOut
        /// </summary>
        [DataMember(Name = "t_out", IsRequired = true, EmitDefaultValue = false)]
        public decimal TOut { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets ModifiedAt
        /// </summary>
        [DataMember(Name = "modified_at", EmitDefaultValue = false)]
        public DateTime ModifiedAt { get; private set; }

        /// <summary>
        /// Returns false as ModifiedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeModifiedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "user", EmitDefaultValue = false)]
        public int User { get; private set; }

        /// <summary>
        /// Returns false as User should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUser()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Asset
        /// </summary>
        [DataMember(Name = "asset", IsRequired = true, EmitDefaultValue = false)]
        public int Asset { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name = "comment", EmitDefaultValue = false)]
        public int Comment { get; private set; }

        /// <summary>
        /// Returns false as Comment should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeComment()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets VeritoneMetadata
        /// </summary>
        [DataMember(Name = "veritone_metadata", EmitDefaultValue = false)]
        public int VeritoneMetadata { get; private set; }

        /// <summary>
        /// Returns false as VeritoneMetadata should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVeritoneMetadata()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Marker {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  VeritoneMetadataParser: ").Append(VeritoneMetadataParser).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  TIn: ").Append(TIn).Append("\n");
            sb.Append("  TOut: ").Append(TOut).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ModifiedAt: ").Append(ModifiedAt).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Asset: ").Append(Asset).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  VeritoneMetadata: ").Append(VeritoneMetadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Marker);
        }

        /// <summary>
        /// Returns true if Marker instances are equal
        /// </summary>
        /// <param name="input">Instance of Marker to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Marker input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.VeritoneMetadataParser == input.VeritoneMetadataParser ||
                    (this.VeritoneMetadataParser != null &&
                    this.VeritoneMetadataParser.Equals(input.VeritoneMetadataParser))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.TIn == input.TIn ||
                    this.TIn.Equals(input.TIn)
                ) && 
                (
                    this.TOut == input.TOut ||
                    this.TOut.Equals(input.TOut)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.ModifiedAt == input.ModifiedAt ||
                    (this.ModifiedAt != null &&
                    this.ModifiedAt.Equals(input.ModifiedAt))
                ) && 
                (
                    this.User == input.User ||
                    this.User.Equals(input.User)
                ) && 
                (
                    this.Asset == input.Asset ||
                    this.Asset.Equals(input.Asset)
                ) && 
                (
                    this.Comment == input.Comment ||
                    this.Comment.Equals(input.Comment)
                ) && 
                (
                    this.VeritoneMetadata == input.VeritoneMetadata ||
                    this.VeritoneMetadata.Equals(input.VeritoneMetadata)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.VeritoneMetadataParser != null)
                    hashCode = hashCode * 59 + this.VeritoneMetadataParser.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                hashCode = hashCode * 59 + this.TIn.GetHashCode();
                hashCode = hashCode * 59 + this.TOut.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.ModifiedAt != null)
                    hashCode = hashCode * 59 + this.ModifiedAt.GetHashCode();
                hashCode = hashCode * 59 + this.User.GetHashCode();
                hashCode = hashCode * 59 + this.Asset.GetHashCode();
                hashCode = hashCode * 59 + this.Comment.GetHashCode();
                hashCode = hashCode * 59 + this.VeritoneMetadata.GetHashCode();
                return hashCode;
            }
        }

    }

}
