/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// MarkerPartialUpdate
    /// </summary>
    [DataContract(Name = "MarkerPartialUpdate")]
    public partial class MarkerPartialUpdate : IEquatable<MarkerPartialUpdate>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MarkerPartialUpdate" /> class.
        /// </summary>
        /// <param name="title">title.</param>
        /// <param name="text">text.</param>
        /// <param name="tIn">tIn.</param>
        /// <param name="tOut">tOut.</param>
        /// <param name="asset">asset.</param>
        public MarkerPartialUpdate(string title = default(string), string text = default(string), decimal tIn = default(decimal), decimal tOut = default(decimal), int asset = default(int))
        {
            this.Title = title;
            this.Text = text;
            this.TIn = tIn;
            this.TOut = tOut;
            this.Asset = asset;
        }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name = "text", EmitDefaultValue = false)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets TIn
        /// </summary>
        [DataMember(Name = "t_in", EmitDefaultValue = false)]
        public decimal TIn { get; set; }

        /// <summary>
        /// Gets or Sets TOut
        /// </summary>
        [DataMember(Name = "t_out", EmitDefaultValue = false)]
        public decimal TOut { get; set; }

        /// <summary>
        /// Gets or Sets Asset
        /// </summary>
        [DataMember(Name = "asset", EmitDefaultValue = false)]
        public int Asset { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MarkerPartialUpdate {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  TIn: ").Append(TIn).Append("\n");
            sb.Append("  TOut: ").Append(TOut).Append("\n");
            sb.Append("  Asset: ").Append(Asset).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MarkerPartialUpdate);
        }

        /// <summary>
        /// Returns true if MarkerPartialUpdate instances are equal
        /// </summary>
        /// <param name="input">Instance of MarkerPartialUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MarkerPartialUpdate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.TIn == input.TIn ||
                    this.TIn.Equals(input.TIn)
                ) && 
                (
                    this.TOut == input.TOut ||
                    this.TOut.Equals(input.TOut)
                ) && 
                (
                    this.Asset == input.Asset ||
                    this.Asset.Equals(input.Asset)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                hashCode = hashCode * 59 + this.TIn.GetHashCode();
                hashCode = hashCode * 59 + this.TOut.GetHashCode();
                hashCode = hashCode * 59 + this.Asset.GetHashCode();
                return hashCode;
            }
        }

    }

}
