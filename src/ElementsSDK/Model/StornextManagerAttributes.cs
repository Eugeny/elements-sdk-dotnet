/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// StornextManagerAttributes
    /// </summary>
    [DataContract(Name = "StornextManagerAttributes")]
    public partial class StornextManagerAttributes : IEquatable<StornextManagerAttributes>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StornextManagerAttributes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StornextManagerAttributes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StornextManagerAttributes" /> class.
        /// </summary>
        /// <param name="location">location (required).</param>
        /// <param name="policyClass">policyClass (required).</param>
        /// <param name="existingCopies">existingCopies (required).</param>
        /// <param name="targetCopies">targetCopies (required).</param>
        public StornextManagerAttributes(string location = default(string), string policyClass = default(string), int existingCopies = default(int), int targetCopies = default(int))
        {
            // to ensure "location" is required (not null)
            this.Location = location ?? throw new ArgumentNullException("location is a required property for StornextManagerAttributes and cannot be null");
            // to ensure "policyClass" is required (not null)
            this.PolicyClass = policyClass ?? throw new ArgumentNullException("policyClass is a required property for StornextManagerAttributes and cannot be null");
            this.ExistingCopies = existingCopies;
            this.TargetCopies = targetCopies;
        }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name = "location", IsRequired = true, EmitDefaultValue = false)]
        public string Location { get; set; }

        /// <summary>
        /// Gets or Sets PolicyClass
        /// </summary>
        [DataMember(Name = "policy_class", IsRequired = true, EmitDefaultValue = false)]
        public string PolicyClass { get; set; }

        /// <summary>
        /// Gets or Sets ExistingCopies
        /// </summary>
        [DataMember(Name = "existing_copies", IsRequired = true, EmitDefaultValue = false)]
        public int ExistingCopies { get; set; }

        /// <summary>
        /// Gets or Sets TargetCopies
        /// </summary>
        [DataMember(Name = "target_copies", IsRequired = true, EmitDefaultValue = false)]
        public int TargetCopies { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StornextManagerAttributes {\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  PolicyClass: ").Append(PolicyClass).Append("\n");
            sb.Append("  ExistingCopies: ").Append(ExistingCopies).Append("\n");
            sb.Append("  TargetCopies: ").Append(TargetCopies).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StornextManagerAttributes);
        }

        /// <summary>
        /// Returns true if StornextManagerAttributes instances are equal
        /// </summary>
        /// <param name="input">Instance of StornextManagerAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StornextManagerAttributes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.PolicyClass == input.PolicyClass ||
                    (this.PolicyClass != null &&
                    this.PolicyClass.Equals(input.PolicyClass))
                ) && 
                (
                    this.ExistingCopies == input.ExistingCopies ||
                    this.ExistingCopies.Equals(input.ExistingCopies)
                ) && 
                (
                    this.TargetCopies == input.TargetCopies ||
                    this.TargetCopies.Equals(input.TargetCopies)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.PolicyClass != null)
                    hashCode = hashCode * 59 + this.PolicyClass.GetHashCode();
                hashCode = hashCode * 59 + this.ExistingCopies.GetHashCode();
                hashCode = hashCode * 59 + this.TargetCopies.GetHashCode();
                return hashCode;
            }
        }

    }

}
