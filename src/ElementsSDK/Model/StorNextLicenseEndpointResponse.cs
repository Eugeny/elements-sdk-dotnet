/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// StorNextLicenseEndpointResponse
    /// </summary>
    [DataContract(Name = "StorNextLicenseEndpointResponse")]
    public partial class StorNextLicenseEndpointResponse : IEquatable<StorNextLicenseEndpointResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StorNextLicenseEndpointResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StorNextLicenseEndpointResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StorNextLicenseEndpointResponse" /> class.
        /// </summary>
        /// <param name="status">status (required).</param>
        /// <param name="expiry">expiry (required).</param>
        /// <param name="capacity">capacity (required).</param>
        public StorNextLicenseEndpointResponse(string status = default(string), string expiry = default(string), string capacity = default(string))
        {
            // to ensure "status" is required (not null)
            this.Status = status ?? throw new ArgumentNullException("status is a required property for StorNextLicenseEndpointResponse and cannot be null");
            // to ensure "expiry" is required (not null)
            this.Expiry = expiry ?? throw new ArgumentNullException("expiry is a required property for StorNextLicenseEndpointResponse and cannot be null");
            // to ensure "capacity" is required (not null)
            this.Capacity = capacity ?? throw new ArgumentNullException("capacity is a required property for StorNextLicenseEndpointResponse and cannot be null");
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Expiry
        /// </summary>
        [DataMember(Name = "expiry", IsRequired = true, EmitDefaultValue = false)]
        public string Expiry { get; set; }

        /// <summary>
        /// Gets or Sets Capacity
        /// </summary>
        [DataMember(Name = "capacity", IsRequired = true, EmitDefaultValue = false)]
        public string Capacity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StorNextLicenseEndpointResponse {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Expiry: ").Append(Expiry).Append("\n");
            sb.Append("  Capacity: ").Append(Capacity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StorNextLicenseEndpointResponse);
        }

        /// <summary>
        /// Returns true if StorNextLicenseEndpointResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of StorNextLicenseEndpointResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StorNextLicenseEndpointResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Expiry == input.Expiry ||
                    (this.Expiry != null &&
                    this.Expiry.Equals(input.Expiry))
                ) && 
                (
                    this.Capacity == input.Capacity ||
                    (this.Capacity != null &&
                    this.Capacity.Equals(input.Capacity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Expiry != null)
                    hashCode = hashCode * 59 + this.Expiry.GetHashCode();
                if (this.Capacity != null)
                    hashCode = hashCode * 59 + this.Capacity.GetHashCode();
                return hashCode;
            }
        }

    }

}
