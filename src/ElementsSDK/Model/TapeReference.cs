/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// TapeReference
    /// </summary>
    [DataContract(Name = "TapeReference")]
    public partial class TapeReference : IEquatable<TapeReference>
    {
        /// <summary>
        /// Defines Lto
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LtoEnum
        {
            /// <summary>
            /// Enum _5 for value: 5
            /// </summary>
            [EnumMember(Value = "5")]
            _5 = 1,

            /// <summary>
            /// Enum _6 for value: 6
            /// </summary>
            [EnumMember(Value = "6")]
            _6 = 2,

            /// <summary>
            /// Enum _7 for value: 7
            /// </summary>
            [EnumMember(Value = "7")]
            _7 = 3

        }


        /// <summary>
        /// Gets or Sets Lto
        /// </summary>
        [DataMember(Name = "lto", EmitDefaultValue = true)]
        public LtoEnum? Lto { get; set; }

        /// <summary>
        /// Returns false as Lto should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLto()
        {
            return false;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="TapeReference" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        public TapeReference(int id = default(int))
        {
            this.Id = id;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets RootEntry
        /// </summary>
        [DataMember(Name = "root_entry", EmitDefaultValue = false)]
        public int RootEntry { get; private set; }

        /// <summary>
        /// Returns false as RootEntry should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRootEntry()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; private set; }

        /// <summary>
        /// Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Uuid
        /// </summary>
        [DataMember(Name = "uuid", EmitDefaultValue = false)]
        public string Uuid { get; private set; }

        /// <summary>
        /// Returns false as Uuid should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUuid()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Generation
        /// </summary>
        [DataMember(Name = "generation", EmitDefaultValue = false)]
        public int Generation { get; private set; }

        /// <summary>
        /// Returns false as Generation should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeGeneration()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets CustomA
        /// </summary>
        [DataMember(Name = "custom_a", EmitDefaultValue = false)]
        public string CustomA { get; private set; }

        /// <summary>
        /// Returns false as CustomA should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomA()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets CustomB
        /// </summary>
        [DataMember(Name = "custom_b", EmitDefaultValue = false)]
        public string CustomB { get; private set; }

        /// <summary>
        /// Returns false as CustomB should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomB()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets CustomC
        /// </summary>
        [DataMember(Name = "custom_c", EmitDefaultValue = false)]
        public string CustomC { get; private set; }

        /// <summary>
        /// Returns false as CustomC should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomC()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets CustomD
        /// </summary>
        [DataMember(Name = "custom_d", EmitDefaultValue = false)]
        public string CustomD { get; private set; }

        /// <summary>
        /// Returns false as CustomD should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomD()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets FreeSpace
        /// </summary>
        [DataMember(Name = "free_space", EmitDefaultValue = true)]
        public int? FreeSpace { get; private set; }

        /// <summary>
        /// Returns false as FreeSpace should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFreeSpace()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets LoadCounter
        /// </summary>
        [DataMember(Name = "load_counter", EmitDefaultValue = false)]
        public int LoadCounter { get; private set; }

        /// <summary>
        /// Returns false as LoadCounter should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLoadCounter()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets ErrorCounter
        /// </summary>
        [DataMember(Name = "error_counter", EmitDefaultValue = false)]
        public int ErrorCounter { get; private set; }

        /// <summary>
        /// Returns false as ErrorCounter should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeErrorCounter()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets ErrorReason
        /// </summary>
        [DataMember(Name = "error_reason", EmitDefaultValue = true)]
        public string ErrorReason { get; private set; }

        /// <summary>
        /// Returns false as ErrorReason should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeErrorReason()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool Active { get; private set; }

        /// <summary>
        /// Returns false as Active should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeActive()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Group
        /// </summary>
        [DataMember(Name = "group", EmitDefaultValue = true)]
        public int? Group { get; private set; }

        /// <summary>
        /// Returns false as Group should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeGroup()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TapeReference {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RootEntry: ").Append(RootEntry).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  Generation: ").Append(Generation).Append("\n");
            sb.Append("  CustomA: ").Append(CustomA).Append("\n");
            sb.Append("  CustomB: ").Append(CustomB).Append("\n");
            sb.Append("  CustomC: ").Append(CustomC).Append("\n");
            sb.Append("  CustomD: ").Append(CustomD).Append("\n");
            sb.Append("  FreeSpace: ").Append(FreeSpace).Append("\n");
            sb.Append("  LoadCounter: ").Append(LoadCounter).Append("\n");
            sb.Append("  ErrorCounter: ").Append(ErrorCounter).Append("\n");
            sb.Append("  ErrorReason: ").Append(ErrorReason).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Lto: ").Append(Lto).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TapeReference);
        }

        /// <summary>
        /// Returns true if TapeReference instances are equal
        /// </summary>
        /// <param name="input">Instance of TapeReference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TapeReference input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.RootEntry == input.RootEntry ||
                    this.RootEntry.Equals(input.RootEntry)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Uuid == input.Uuid ||
                    (this.Uuid != null &&
                    this.Uuid.Equals(input.Uuid))
                ) && 
                (
                    this.Generation == input.Generation ||
                    this.Generation.Equals(input.Generation)
                ) && 
                (
                    this.CustomA == input.CustomA ||
                    (this.CustomA != null &&
                    this.CustomA.Equals(input.CustomA))
                ) && 
                (
                    this.CustomB == input.CustomB ||
                    (this.CustomB != null &&
                    this.CustomB.Equals(input.CustomB))
                ) && 
                (
                    this.CustomC == input.CustomC ||
                    (this.CustomC != null &&
                    this.CustomC.Equals(input.CustomC))
                ) && 
                (
                    this.CustomD == input.CustomD ||
                    (this.CustomD != null &&
                    this.CustomD.Equals(input.CustomD))
                ) && 
                (
                    this.FreeSpace == input.FreeSpace ||
                    (this.FreeSpace != null &&
                    this.FreeSpace.Equals(input.FreeSpace))
                ) && 
                (
                    this.LoadCounter == input.LoadCounter ||
                    this.LoadCounter.Equals(input.LoadCounter)
                ) && 
                (
                    this.ErrorCounter == input.ErrorCounter ||
                    this.ErrorCounter.Equals(input.ErrorCounter)
                ) && 
                (
                    this.ErrorReason == input.ErrorReason ||
                    (this.ErrorReason != null &&
                    this.ErrorReason.Equals(input.ErrorReason))
                ) && 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.Lto == input.Lto ||
                    this.Lto.Equals(input.Lto)
                ) && 
                (
                    this.Group == input.Group ||
                    (this.Group != null &&
                    this.Group.Equals(input.Group))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.RootEntry.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Uuid != null)
                    hashCode = hashCode * 59 + this.Uuid.GetHashCode();
                hashCode = hashCode * 59 + this.Generation.GetHashCode();
                if (this.CustomA != null)
                    hashCode = hashCode * 59 + this.CustomA.GetHashCode();
                if (this.CustomB != null)
                    hashCode = hashCode * 59 + this.CustomB.GetHashCode();
                if (this.CustomC != null)
                    hashCode = hashCode * 59 + this.CustomC.GetHashCode();
                if (this.CustomD != null)
                    hashCode = hashCode * 59 + this.CustomD.GetHashCode();
                if (this.FreeSpace != null)
                    hashCode = hashCode * 59 + this.FreeSpace.GetHashCode();
                hashCode = hashCode * 59 + this.LoadCounter.GetHashCode();
                hashCode = hashCode * 59 + this.ErrorCounter.GetHashCode();
                if (this.ErrorReason != null)
                    hashCode = hashCode * 59 + this.ErrorReason.GetHashCode();
                hashCode = hashCode * 59 + this.Active.GetHashCode();
                hashCode = hashCode * 59 + this.Lto.GetHashCode();
                if (this.Group != null)
                    hashCode = hashCode * 59 + this.Group.GetHashCode();
                return hashCode;
            }
        }

    }

}
