/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// ProxyProfilePartialUpdate
    /// </summary>
    [DataContract(Name = "ProxyProfilePartialUpdate")]
    public partial class ProxyProfilePartialUpdate : IEquatable<ProxyProfilePartialUpdate>
    {
        /// <summary>
        /// Defines ProxyGenerator
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProxyGeneratorEnum
        {
            /// <summary>
            /// Enum Ffmpeg for value: ffmpeg
            /// </summary>
            [EnumMember(Value = "ffmpeg")]
            Ffmpeg = 1,

            /// <summary>
            /// Enum Hotfolder for value: hotfolder
            /// </summary>
            [EnumMember(Value = "hotfolder")]
            Hotfolder = 2,

            /// <summary>
            /// Enum Transkoder for value: transkoder
            /// </summary>
            [EnumMember(Value = "transkoder")]
            Transkoder = 3,

            /// <summary>
            /// Enum Vantage for value: vantage
            /// </summary>
            [EnumMember(Value = "vantage")]
            Vantage = 4

        }


        /// <summary>
        /// Gets or Sets ProxyGenerator
        /// </summary>
        [DataMember(Name = "proxy_generator", EmitDefaultValue = false)]
        public ProxyGeneratorEnum? ProxyGenerator { get; set; }
        /// <summary>
        /// Defines RateControl
        /// </summary>
        public enum RateControlEnum
        {
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            NUMBER_0 = 0,

            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            NUMBER_2 = 2

        }


        /// <summary>
        /// Gets or Sets RateControl
        /// </summary>
        [DataMember(Name = "rate_control", EmitDefaultValue = false)]
        public RateControlEnum? RateControl { get; set; }
        /// <summary>
        /// Defines WatermarkPosition
        /// </summary>
        public enum WatermarkPositionEnum
        {
            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            NUMBER_2 = 2,

            /// <summary>
            /// Enum NUMBER_3 for value: 3
            /// </summary>
            NUMBER_3 = 3,

            /// <summary>
            /// Enum NUMBER_4 for value: 4
            /// </summary>
            NUMBER_4 = 4,

            /// <summary>
            /// Enum NUMBER_5 for value: 5
            /// </summary>
            NUMBER_5 = 5

        }


        /// <summary>
        /// Gets or Sets WatermarkPosition
        /// </summary>
        [DataMember(Name = "watermark_position", EmitDefaultValue = false)]
        public WatermarkPositionEnum? WatermarkPosition { get; set; }
        /// <summary>
        /// Defines TimecodePosition
        /// </summary>
        public enum TimecodePositionEnum
        {
            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            NUMBER_2 = 2,

            /// <summary>
            /// Enum NUMBER_3 for value: 3
            /// </summary>
            NUMBER_3 = 3,

            /// <summary>
            /// Enum NUMBER_4 for value: 4
            /// </summary>
            NUMBER_4 = 4,

            /// <summary>
            /// Enum NUMBER_5 for value: 5
            /// </summary>
            NUMBER_5 = 5

        }


        /// <summary>
        /// Gets or Sets TimecodePosition
        /// </summary>
        [DataMember(Name = "timecode_position", EmitDefaultValue = false)]
        public TimecodePositionEnum? TimecodePosition { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProxyProfilePartialUpdate" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="proxyGenerator">proxyGenerator.</param>
        /// <param name="resolution">resolution.</param>
        /// <param name="rateControl">rateControl.</param>
        /// <param name="crf">crf.</param>
        /// <param name="bitrate">bitrate.</param>
        /// <param name="audioBitrate">audioBitrate.</param>
        /// <param name="variantsLimit">variantsLimit.</param>
        /// <param name="enableRealtimeRead">enableRealtimeRead.</param>
        /// <param name="enableDenseFilmstrip">enableDenseFilmstrip.</param>
        /// <param name="enableWatermark">enableWatermark.</param>
        /// <param name="watermarkImage">watermarkImage.</param>
        /// <param name="watermarkPosition">watermarkPosition.</param>
        /// <param name="watermarkOpacity">watermarkOpacity.</param>
        /// <param name="watermarkSize">watermarkSize.</param>
        /// <param name="enableTimecode">enableTimecode.</param>
        /// <param name="timecodePosition">timecodePosition.</param>
        /// <param name="timecodeOpacity">timecodeOpacity.</param>
        /// <param name="timecodeSize">timecodeSize.</param>
        /// <param name="lut">lut.</param>
        /// <param name="hotfolderCopyTo">hotfolderCopyTo.</param>
        /// <param name="hotfolderReadFrom">hotfolderReadFrom.</param>
        /// <param name="hotfolderQueueTimeout">hotfolderQueueTimeout.</param>
        /// <param name="hotfolderEncodeTimeout">hotfolderEncodeTimeout.</param>
        /// <param name="vantageWorkflowId">vantageWorkflowId.</param>
        /// <param name="externalTranscoderStagingPath">externalTranscoderStagingPath.</param>
        /// <param name="externalTranscoder">externalTranscoder.</param>
        public ProxyProfilePartialUpdate(string name = default(string), ProxyGeneratorEnum? proxyGenerator = default(ProxyGeneratorEnum?), string resolution = default(string), RateControlEnum? rateControl = default(RateControlEnum?), int? crf = default(int?), int? bitrate = default(int?), int audioBitrate = default(int), int variantsLimit = default(int), bool enableRealtimeRead = default(bool), bool enableDenseFilmstrip = default(bool), bool enableWatermark = default(bool), string watermarkImage = default(string), WatermarkPositionEnum? watermarkPosition = default(WatermarkPositionEnum?), decimal watermarkOpacity = default(decimal), decimal watermarkSize = default(decimal), bool enableTimecode = default(bool), TimecodePositionEnum? timecodePosition = default(TimecodePositionEnum?), decimal timecodeOpacity = default(decimal), decimal timecodeSize = default(decimal), string lut = default(string), string hotfolderCopyTo = default(string), string hotfolderReadFrom = default(string), int hotfolderQueueTimeout = default(int), int hotfolderEncodeTimeout = default(int), string vantageWorkflowId = default(string), string externalTranscoderStagingPath = default(string), int? externalTranscoder = default(int?))
        {
            this.Name = name;
            this.ProxyGenerator = proxyGenerator;
            this.Resolution = resolution;
            this.RateControl = rateControl;
            this.Crf = crf;
            this.Bitrate = bitrate;
            this.AudioBitrate = audioBitrate;
            this.VariantsLimit = variantsLimit;
            this.EnableRealtimeRead = enableRealtimeRead;
            this.EnableDenseFilmstrip = enableDenseFilmstrip;
            this.EnableWatermark = enableWatermark;
            this.WatermarkImage = watermarkImage;
            this.WatermarkPosition = watermarkPosition;
            this.WatermarkOpacity = watermarkOpacity;
            this.WatermarkSize = watermarkSize;
            this.EnableTimecode = enableTimecode;
            this.TimecodePosition = timecodePosition;
            this.TimecodeOpacity = timecodeOpacity;
            this.TimecodeSize = timecodeSize;
            this.Lut = lut;
            this.HotfolderCopyTo = hotfolderCopyTo;
            this.HotfolderReadFrom = hotfolderReadFrom;
            this.HotfolderQueueTimeout = hotfolderQueueTimeout;
            this.HotfolderEncodeTimeout = hotfolderEncodeTimeout;
            this.VantageWorkflowId = vantageWorkflowId;
            this.ExternalTranscoderStagingPath = externalTranscoderStagingPath;
            this.ExternalTranscoder = externalTranscoder;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Resolution
        /// </summary>
        [DataMember(Name = "resolution", EmitDefaultValue = true)]
        public string Resolution { get; set; }

        /// <summary>
        /// Gets or Sets Crf
        /// </summary>
        [DataMember(Name = "crf", EmitDefaultValue = true)]
        public int? Crf { get; set; }

        /// <summary>
        /// Gets or Sets Bitrate
        /// </summary>
        [DataMember(Name = "bitrate", EmitDefaultValue = true)]
        public int? Bitrate { get; set; }

        /// <summary>
        /// Gets or Sets AudioBitrate
        /// </summary>
        [DataMember(Name = "audio_bitrate", EmitDefaultValue = false)]
        public int AudioBitrate { get; set; }

        /// <summary>
        /// Gets or Sets VariantsLimit
        /// </summary>
        [DataMember(Name = "variants_limit", EmitDefaultValue = false)]
        public int VariantsLimit { get; set; }

        /// <summary>
        /// Gets or Sets EnableRealtimeRead
        /// </summary>
        [DataMember(Name = "enable_realtime_read", EmitDefaultValue = true)]
        public bool EnableRealtimeRead { get; set; }

        /// <summary>
        /// Gets or Sets EnableDenseFilmstrip
        /// </summary>
        [DataMember(Name = "enable_dense_filmstrip", EmitDefaultValue = true)]
        public bool EnableDenseFilmstrip { get; set; }

        /// <summary>
        /// Gets or Sets EnableWatermark
        /// </summary>
        [DataMember(Name = "enable_watermark", EmitDefaultValue = true)]
        public bool EnableWatermark { get; set; }

        /// <summary>
        /// Gets or Sets WatermarkImage
        /// </summary>
        [DataMember(Name = "watermark_image", EmitDefaultValue = true)]
        public string WatermarkImage { get; set; }

        /// <summary>
        /// Gets or Sets WatermarkOpacity
        /// </summary>
        [DataMember(Name = "watermark_opacity", EmitDefaultValue = false)]
        public decimal WatermarkOpacity { get; set; }

        /// <summary>
        /// Gets or Sets WatermarkSize
        /// </summary>
        [DataMember(Name = "watermark_size", EmitDefaultValue = false)]
        public decimal WatermarkSize { get; set; }

        /// <summary>
        /// Gets or Sets EnableTimecode
        /// </summary>
        [DataMember(Name = "enable_timecode", EmitDefaultValue = true)]
        public bool EnableTimecode { get; set; }

        /// <summary>
        /// Gets or Sets TimecodeOpacity
        /// </summary>
        [DataMember(Name = "timecode_opacity", EmitDefaultValue = false)]
        public decimal TimecodeOpacity { get; set; }

        /// <summary>
        /// Gets or Sets TimecodeSize
        /// </summary>
        [DataMember(Name = "timecode_size", EmitDefaultValue = false)]
        public decimal TimecodeSize { get; set; }

        /// <summary>
        /// Gets or Sets Lut
        /// </summary>
        [DataMember(Name = "lut", EmitDefaultValue = true)]
        public string Lut { get; set; }

        /// <summary>
        /// Gets or Sets HotfolderCopyTo
        /// </summary>
        [DataMember(Name = "hotfolder_copy_to", EmitDefaultValue = true)]
        public string HotfolderCopyTo { get; set; }

        /// <summary>
        /// Gets or Sets HotfolderReadFrom
        /// </summary>
        [DataMember(Name = "hotfolder_read_from", EmitDefaultValue = true)]
        public string HotfolderReadFrom { get; set; }

        /// <summary>
        /// Gets or Sets HotfolderQueueTimeout
        /// </summary>
        [DataMember(Name = "hotfolder_queue_timeout", EmitDefaultValue = false)]
        public int HotfolderQueueTimeout { get; set; }

        /// <summary>
        /// Gets or Sets HotfolderEncodeTimeout
        /// </summary>
        [DataMember(Name = "hotfolder_encode_timeout", EmitDefaultValue = false)]
        public int HotfolderEncodeTimeout { get; set; }

        /// <summary>
        /// Gets or Sets VantageWorkflowId
        /// </summary>
        [DataMember(Name = "vantage_workflow_id", EmitDefaultValue = true)]
        public string VantageWorkflowId { get; set; }

        /// <summary>
        /// Gets or Sets ExternalTranscoderStagingPath
        /// </summary>
        [DataMember(Name = "external_transcoder_staging_path", EmitDefaultValue = true)]
        public string ExternalTranscoderStagingPath { get; set; }

        /// <summary>
        /// Gets or Sets ExternalTranscoder
        /// </summary>
        [DataMember(Name = "external_transcoder", EmitDefaultValue = true)]
        public int? ExternalTranscoder { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProxyProfilePartialUpdate {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ProxyGenerator: ").Append(ProxyGenerator).Append("\n");
            sb.Append("  Resolution: ").Append(Resolution).Append("\n");
            sb.Append("  RateControl: ").Append(RateControl).Append("\n");
            sb.Append("  Crf: ").Append(Crf).Append("\n");
            sb.Append("  Bitrate: ").Append(Bitrate).Append("\n");
            sb.Append("  AudioBitrate: ").Append(AudioBitrate).Append("\n");
            sb.Append("  VariantsLimit: ").Append(VariantsLimit).Append("\n");
            sb.Append("  EnableRealtimeRead: ").Append(EnableRealtimeRead).Append("\n");
            sb.Append("  EnableDenseFilmstrip: ").Append(EnableDenseFilmstrip).Append("\n");
            sb.Append("  EnableWatermark: ").Append(EnableWatermark).Append("\n");
            sb.Append("  WatermarkImage: ").Append(WatermarkImage).Append("\n");
            sb.Append("  WatermarkPosition: ").Append(WatermarkPosition).Append("\n");
            sb.Append("  WatermarkOpacity: ").Append(WatermarkOpacity).Append("\n");
            sb.Append("  WatermarkSize: ").Append(WatermarkSize).Append("\n");
            sb.Append("  EnableTimecode: ").Append(EnableTimecode).Append("\n");
            sb.Append("  TimecodePosition: ").Append(TimecodePosition).Append("\n");
            sb.Append("  TimecodeOpacity: ").Append(TimecodeOpacity).Append("\n");
            sb.Append("  TimecodeSize: ").Append(TimecodeSize).Append("\n");
            sb.Append("  Lut: ").Append(Lut).Append("\n");
            sb.Append("  HotfolderCopyTo: ").Append(HotfolderCopyTo).Append("\n");
            sb.Append("  HotfolderReadFrom: ").Append(HotfolderReadFrom).Append("\n");
            sb.Append("  HotfolderQueueTimeout: ").Append(HotfolderQueueTimeout).Append("\n");
            sb.Append("  HotfolderEncodeTimeout: ").Append(HotfolderEncodeTimeout).Append("\n");
            sb.Append("  VantageWorkflowId: ").Append(VantageWorkflowId).Append("\n");
            sb.Append("  ExternalTranscoderStagingPath: ").Append(ExternalTranscoderStagingPath).Append("\n");
            sb.Append("  ExternalTranscoder: ").Append(ExternalTranscoder).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProxyProfilePartialUpdate);
        }

        /// <summary>
        /// Returns true if ProxyProfilePartialUpdate instances are equal
        /// </summary>
        /// <param name="input">Instance of ProxyProfilePartialUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProxyProfilePartialUpdate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ProxyGenerator == input.ProxyGenerator ||
                    this.ProxyGenerator.Equals(input.ProxyGenerator)
                ) && 
                (
                    this.Resolution == input.Resolution ||
                    (this.Resolution != null &&
                    this.Resolution.Equals(input.Resolution))
                ) && 
                (
                    this.RateControl == input.RateControl ||
                    this.RateControl.Equals(input.RateControl)
                ) && 
                (
                    this.Crf == input.Crf ||
                    (this.Crf != null &&
                    this.Crf.Equals(input.Crf))
                ) && 
                (
                    this.Bitrate == input.Bitrate ||
                    (this.Bitrate != null &&
                    this.Bitrate.Equals(input.Bitrate))
                ) && 
                (
                    this.AudioBitrate == input.AudioBitrate ||
                    this.AudioBitrate.Equals(input.AudioBitrate)
                ) && 
                (
                    this.VariantsLimit == input.VariantsLimit ||
                    this.VariantsLimit.Equals(input.VariantsLimit)
                ) && 
                (
                    this.EnableRealtimeRead == input.EnableRealtimeRead ||
                    this.EnableRealtimeRead.Equals(input.EnableRealtimeRead)
                ) && 
                (
                    this.EnableDenseFilmstrip == input.EnableDenseFilmstrip ||
                    this.EnableDenseFilmstrip.Equals(input.EnableDenseFilmstrip)
                ) && 
                (
                    this.EnableWatermark == input.EnableWatermark ||
                    this.EnableWatermark.Equals(input.EnableWatermark)
                ) && 
                (
                    this.WatermarkImage == input.WatermarkImage ||
                    (this.WatermarkImage != null &&
                    this.WatermarkImage.Equals(input.WatermarkImage))
                ) && 
                (
                    this.WatermarkPosition == input.WatermarkPosition ||
                    this.WatermarkPosition.Equals(input.WatermarkPosition)
                ) && 
                (
                    this.WatermarkOpacity == input.WatermarkOpacity ||
                    this.WatermarkOpacity.Equals(input.WatermarkOpacity)
                ) && 
                (
                    this.WatermarkSize == input.WatermarkSize ||
                    this.WatermarkSize.Equals(input.WatermarkSize)
                ) && 
                (
                    this.EnableTimecode == input.EnableTimecode ||
                    this.EnableTimecode.Equals(input.EnableTimecode)
                ) && 
                (
                    this.TimecodePosition == input.TimecodePosition ||
                    this.TimecodePosition.Equals(input.TimecodePosition)
                ) && 
                (
                    this.TimecodeOpacity == input.TimecodeOpacity ||
                    this.TimecodeOpacity.Equals(input.TimecodeOpacity)
                ) && 
                (
                    this.TimecodeSize == input.TimecodeSize ||
                    this.TimecodeSize.Equals(input.TimecodeSize)
                ) && 
                (
                    this.Lut == input.Lut ||
                    (this.Lut != null &&
                    this.Lut.Equals(input.Lut))
                ) && 
                (
                    this.HotfolderCopyTo == input.HotfolderCopyTo ||
                    (this.HotfolderCopyTo != null &&
                    this.HotfolderCopyTo.Equals(input.HotfolderCopyTo))
                ) && 
                (
                    this.HotfolderReadFrom == input.HotfolderReadFrom ||
                    (this.HotfolderReadFrom != null &&
                    this.HotfolderReadFrom.Equals(input.HotfolderReadFrom))
                ) && 
                (
                    this.HotfolderQueueTimeout == input.HotfolderQueueTimeout ||
                    this.HotfolderQueueTimeout.Equals(input.HotfolderQueueTimeout)
                ) && 
                (
                    this.HotfolderEncodeTimeout == input.HotfolderEncodeTimeout ||
                    this.HotfolderEncodeTimeout.Equals(input.HotfolderEncodeTimeout)
                ) && 
                (
                    this.VantageWorkflowId == input.VantageWorkflowId ||
                    (this.VantageWorkflowId != null &&
                    this.VantageWorkflowId.Equals(input.VantageWorkflowId))
                ) && 
                (
                    this.ExternalTranscoderStagingPath == input.ExternalTranscoderStagingPath ||
                    (this.ExternalTranscoderStagingPath != null &&
                    this.ExternalTranscoderStagingPath.Equals(input.ExternalTranscoderStagingPath))
                ) && 
                (
                    this.ExternalTranscoder == input.ExternalTranscoder ||
                    (this.ExternalTranscoder != null &&
                    this.ExternalTranscoder.Equals(input.ExternalTranscoder))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                hashCode = hashCode * 59 + this.ProxyGenerator.GetHashCode();
                if (this.Resolution != null)
                    hashCode = hashCode * 59 + this.Resolution.GetHashCode();
                hashCode = hashCode * 59 + this.RateControl.GetHashCode();
                if (this.Crf != null)
                    hashCode = hashCode * 59 + this.Crf.GetHashCode();
                if (this.Bitrate != null)
                    hashCode = hashCode * 59 + this.Bitrate.GetHashCode();
                hashCode = hashCode * 59 + this.AudioBitrate.GetHashCode();
                hashCode = hashCode * 59 + this.VariantsLimit.GetHashCode();
                hashCode = hashCode * 59 + this.EnableRealtimeRead.GetHashCode();
                hashCode = hashCode * 59 + this.EnableDenseFilmstrip.GetHashCode();
                hashCode = hashCode * 59 + this.EnableWatermark.GetHashCode();
                if (this.WatermarkImage != null)
                    hashCode = hashCode * 59 + this.WatermarkImage.GetHashCode();
                hashCode = hashCode * 59 + this.WatermarkPosition.GetHashCode();
                hashCode = hashCode * 59 + this.WatermarkOpacity.GetHashCode();
                hashCode = hashCode * 59 + this.WatermarkSize.GetHashCode();
                hashCode = hashCode * 59 + this.EnableTimecode.GetHashCode();
                hashCode = hashCode * 59 + this.TimecodePosition.GetHashCode();
                hashCode = hashCode * 59 + this.TimecodeOpacity.GetHashCode();
                hashCode = hashCode * 59 + this.TimecodeSize.GetHashCode();
                if (this.Lut != null)
                    hashCode = hashCode * 59 + this.Lut.GetHashCode();
                if (this.HotfolderCopyTo != null)
                    hashCode = hashCode * 59 + this.HotfolderCopyTo.GetHashCode();
                if (this.HotfolderReadFrom != null)
                    hashCode = hashCode * 59 + this.HotfolderReadFrom.GetHashCode();
                hashCode = hashCode * 59 + this.HotfolderQueueTimeout.GetHashCode();
                hashCode = hashCode * 59 + this.HotfolderEncodeTimeout.GetHashCode();
                if (this.VantageWorkflowId != null)
                    hashCode = hashCode * 59 + this.VantageWorkflowId.GetHashCode();
                if (this.ExternalTranscoderStagingPath != null)
                    hashCode = hashCode * 59 + this.ExternalTranscoderStagingPath.GetHashCode();
                if (this.ExternalTranscoder != null)
                    hashCode = hashCode * 59 + this.ExternalTranscoder.GetHashCode();
                return hashCode;
            }
        }

    }

}
