/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// CommentPartialUpdate
    /// </summary>
    [DataContract(Name = "CommentPartialUpdate")]
    public partial class CommentPartialUpdate : IEquatable<CommentPartialUpdate>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CommentPartialUpdate" /> class.
        /// </summary>
        /// <param name="assignee">assignee.</param>
        /// <param name="user">user.</param>
        /// <param name="drawing">drawing.</param>
        /// <param name="tags">tags.</param>
        /// <param name="text">text.</param>
        /// <param name="time">time.</param>
        /// <param name="isCloud">isCloud.</param>
        /// <param name="resolved">resolved.</param>
        /// <param name="resolvedDate">resolvedDate.</param>
        /// <param name="asset">asset.</param>
        /// <param name="root">root.</param>
        /// <param name="parent">parent.</param>
        public CommentPartialUpdate(ElementsUserMiniReference assignee = default(ElementsUserMiniReference), ElementsUserMiniReference user = default(ElementsUserMiniReference), Dictionary<string, string> drawing = default(Dictionary<string, string>), List<TagReference> tags = default(List<TagReference>), string text = default(string), decimal? time = default(decimal?), bool isCloud = default(bool), bool resolved = default(bool), DateTime? resolvedDate = default(DateTime?), int asset = default(int), int? root = default(int?), int? parent = default(int?))
        {
            this.Assignee = assignee;
            this.User = user;
            this.Drawing = drawing;
            this.Tags = tags;
            this.Text = text;
            this.Time = time;
            this.IsCloud = isCloud;
            this.Resolved = resolved;
            this.ResolvedDate = resolvedDate;
            this.Asset = asset;
            this.Root = root;
            this.Parent = parent;
        }

        /// <summary>
        /// Gets or Sets Assignee
        /// </summary>
        [DataMember(Name = "assignee", EmitDefaultValue = false)]
        public ElementsUserMiniReference Assignee { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "user", EmitDefaultValue = false)]
        public ElementsUserMiniReference User { get; set; }

        /// <summary>
        /// Gets or Sets Drawing
        /// </summary>
        [DataMember(Name = "drawing", EmitDefaultValue = true)]
        public Dictionary<string, string> Drawing { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<TagReference> Tags { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name = "text", EmitDefaultValue = false)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets Time
        /// </summary>
        [DataMember(Name = "time", EmitDefaultValue = true)]
        public decimal? Time { get; set; }

        /// <summary>
        /// Gets or Sets IsCloud
        /// </summary>
        [DataMember(Name = "is_cloud", EmitDefaultValue = true)]
        public bool IsCloud { get; set; }

        /// <summary>
        /// Gets or Sets Resolved
        /// </summary>
        [DataMember(Name = "resolved", EmitDefaultValue = true)]
        public bool Resolved { get; set; }

        /// <summary>
        /// Gets or Sets ResolvedDate
        /// </summary>
        [DataMember(Name = "resolved_date", EmitDefaultValue = true)]
        public DateTime? ResolvedDate { get; set; }

        /// <summary>
        /// Gets or Sets Asset
        /// </summary>
        [DataMember(Name = "asset", EmitDefaultValue = false)]
        public int Asset { get; set; }

        /// <summary>
        /// Gets or Sets Root
        /// </summary>
        [DataMember(Name = "root", EmitDefaultValue = true)]
        public int? Root { get; set; }

        /// <summary>
        /// Gets or Sets Parent
        /// </summary>
        [DataMember(Name = "parent", EmitDefaultValue = true)]
        public int? Parent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CommentPartialUpdate {\n");
            sb.Append("  Assignee: ").Append(Assignee).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Drawing: ").Append(Drawing).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  IsCloud: ").Append(IsCloud).Append("\n");
            sb.Append("  Resolved: ").Append(Resolved).Append("\n");
            sb.Append("  ResolvedDate: ").Append(ResolvedDate).Append("\n");
            sb.Append("  Asset: ").Append(Asset).Append("\n");
            sb.Append("  Root: ").Append(Root).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CommentPartialUpdate);
        }

        /// <summary>
        /// Returns true if CommentPartialUpdate instances are equal
        /// </summary>
        /// <param name="input">Instance of CommentPartialUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommentPartialUpdate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Assignee == input.Assignee ||
                    (this.Assignee != null &&
                    this.Assignee.Equals(input.Assignee))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.Drawing == input.Drawing ||
                    this.Drawing != null &&
                    input.Drawing != null &&
                    this.Drawing.SequenceEqual(input.Drawing)
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.Time == input.Time ||
                    (this.Time != null &&
                    this.Time.Equals(input.Time))
                ) && 
                (
                    this.IsCloud == input.IsCloud ||
                    this.IsCloud.Equals(input.IsCloud)
                ) && 
                (
                    this.Resolved == input.Resolved ||
                    this.Resolved.Equals(input.Resolved)
                ) && 
                (
                    this.ResolvedDate == input.ResolvedDate ||
                    (this.ResolvedDate != null &&
                    this.ResolvedDate.Equals(input.ResolvedDate))
                ) && 
                (
                    this.Asset == input.Asset ||
                    this.Asset.Equals(input.Asset)
                ) && 
                (
                    this.Root == input.Root ||
                    (this.Root != null &&
                    this.Root.Equals(input.Root))
                ) && 
                (
                    this.Parent == input.Parent ||
                    (this.Parent != null &&
                    this.Parent.Equals(input.Parent))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Assignee != null)
                    hashCode = hashCode * 59 + this.Assignee.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.Drawing != null)
                    hashCode = hashCode * 59 + this.Drawing.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.Time != null)
                    hashCode = hashCode * 59 + this.Time.GetHashCode();
                hashCode = hashCode * 59 + this.IsCloud.GetHashCode();
                hashCode = hashCode * 59 + this.Resolved.GetHashCode();
                if (this.ResolvedDate != null)
                    hashCode = hashCode * 59 + this.ResolvedDate.GetHashCode();
                hashCode = hashCode * 59 + this.Asset.GetHashCode();
                if (this.Root != null)
                    hashCode = hashCode * 59 + this.Root.GetHashCode();
                if (this.Parent != null)
                    hashCode = hashCode * 59 + this.Parent.GetHashCode();
                return hashCode;
            }
        }

    }

}
