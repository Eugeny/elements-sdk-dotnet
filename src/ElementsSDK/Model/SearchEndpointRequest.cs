/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// SearchEndpointRequest
    /// </summary>
    [DataContract(Name = "SearchEndpointRequest")]
    public partial class SearchEndpointRequest : IEquatable<SearchEndpointRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchEndpointRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SearchEndpointRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchEndpointRequest" /> class.
        /// </summary>
        /// <param name="query">query (required).</param>
        /// <param name="exclude">exclude.</param>
        /// <param name="offset">offset.</param>
        /// <param name="limit">limit.</param>
        /// <param name="dirsOnly">dirsOnly.</param>
        /// <param name="namesOnly">namesOnly.</param>
        /// <param name="tapes">tapes.</param>
        public SearchEndpointRequest(string query = default(string), string exclude = default(string), int offset = default(int), int limit = default(int), bool dirsOnly = default(bool), bool namesOnly = default(bool), bool tapes = default(bool))
        {
            // to ensure "query" is required (not null)
            this.Query = query ?? throw new ArgumentNullException("query is a required property for SearchEndpointRequest and cannot be null");
            this.Exclude = exclude;
            this.Offset = offset;
            this.Limit = limit;
            this.DirsOnly = dirsOnly;
            this.NamesOnly = namesOnly;
            this.Tapes = tapes;
        }

        /// <summary>
        /// Gets or Sets Query
        /// </summary>
        [DataMember(Name = "query", IsRequired = true, EmitDefaultValue = false)]
        public string Query { get; set; }

        /// <summary>
        /// Gets or Sets Exclude
        /// </summary>
        [DataMember(Name = "exclude", EmitDefaultValue = false)]
        public string Exclude { get; set; }

        /// <summary>
        /// Gets or Sets Offset
        /// </summary>
        [DataMember(Name = "offset", EmitDefaultValue = false)]
        public int Offset { get; set; }

        /// <summary>
        /// Gets or Sets Limit
        /// </summary>
        [DataMember(Name = "limit", EmitDefaultValue = false)]
        public int Limit { get; set; }

        /// <summary>
        /// Gets or Sets DirsOnly
        /// </summary>
        [DataMember(Name = "dirs_only", EmitDefaultValue = true)]
        public bool DirsOnly { get; set; }

        /// <summary>
        /// Gets or Sets NamesOnly
        /// </summary>
        [DataMember(Name = "names_only", EmitDefaultValue = true)]
        public bool NamesOnly { get; set; }

        /// <summary>
        /// Gets or Sets Tapes
        /// </summary>
        [DataMember(Name = "tapes", EmitDefaultValue = true)]
        public bool Tapes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SearchEndpointRequest {\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  Exclude: ").Append(Exclude).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  DirsOnly: ").Append(DirsOnly).Append("\n");
            sb.Append("  NamesOnly: ").Append(NamesOnly).Append("\n");
            sb.Append("  Tapes: ").Append(Tapes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SearchEndpointRequest);
        }

        /// <summary>
        /// Returns true if SearchEndpointRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SearchEndpointRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchEndpointRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Query == input.Query ||
                    (this.Query != null &&
                    this.Query.Equals(input.Query))
                ) && 
                (
                    this.Exclude == input.Exclude ||
                    (this.Exclude != null &&
                    this.Exclude.Equals(input.Exclude))
                ) && 
                (
                    this.Offset == input.Offset ||
                    this.Offset.Equals(input.Offset)
                ) && 
                (
                    this.Limit == input.Limit ||
                    this.Limit.Equals(input.Limit)
                ) && 
                (
                    this.DirsOnly == input.DirsOnly ||
                    this.DirsOnly.Equals(input.DirsOnly)
                ) && 
                (
                    this.NamesOnly == input.NamesOnly ||
                    this.NamesOnly.Equals(input.NamesOnly)
                ) && 
                (
                    this.Tapes == input.Tapes ||
                    this.Tapes.Equals(input.Tapes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Query != null)
                    hashCode = hashCode * 59 + this.Query.GetHashCode();
                if (this.Exclude != null)
                    hashCode = hashCode * 59 + this.Exclude.GetHashCode();
                hashCode = hashCode * 59 + this.Offset.GetHashCode();
                hashCode = hashCode * 59 + this.Limit.GetHashCode();
                hashCode = hashCode * 59 + this.DirsOnly.GetHashCode();
                hashCode = hashCode * 59 + this.NamesOnly.GetHashCode();
                hashCode = hashCode * 59 + this.Tapes.GetHashCode();
                return hashCode;
            }
        }

    }

}
