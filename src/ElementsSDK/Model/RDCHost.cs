/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// RDCHost
    /// </summary>
    [DataContract(Name = "RDCHost")]
    public partial class RDCHost : IEquatable<RDCHost>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RDCHost" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RDCHost() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RDCHost" /> class.
        /// </summary>
        /// <param name="workstation">workstation (required).</param>
        public RDCHost(Workstation workstation = default(Workstation))
        {
            // to ensure "workstation" is required (not null)
            this.Workstation = workstation ?? throw new ArgumentNullException("workstation is a required property for RDCHost and cannot be null");
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets Workstation
        /// </summary>
        [DataMember(Name = "workstation", IsRequired = true, EmitDefaultValue = false)]
        public Workstation Workstation { get; set; }

        /// <summary>
        /// Gets or Sets Occupied
        /// </summary>
        [DataMember(Name = "occupied", EmitDefaultValue = true)]
        public bool Occupied { get; private set; }

        /// <summary>
        /// Returns false as Occupied should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOccupied()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets LastUpdated
        /// </summary>
        [DataMember(Name = "last_updated", EmitDefaultValue = false)]
        public DateTime LastUpdated { get; private set; }

        /// <summary>
        /// Returns false as LastUpdated should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLastUpdated()
        {
            return false;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RDCHost {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Workstation: ").Append(Workstation).Append("\n");
            sb.Append("  Occupied: ").Append(Occupied).Append("\n");
            sb.Append("  LastUpdated: ").Append(LastUpdated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RDCHost);
        }

        /// <summary>
        /// Returns true if RDCHost instances are equal
        /// </summary>
        /// <param name="input">Instance of RDCHost to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RDCHost input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Workstation == input.Workstation ||
                    (this.Workstation != null &&
                    this.Workstation.Equals(input.Workstation))
                ) && 
                (
                    this.Occupied == input.Occupied ||
                    this.Occupied.Equals(input.Occupied)
                ) && 
                (
                    this.LastUpdated == input.LastUpdated ||
                    (this.LastUpdated != null &&
                    this.LastUpdated.Equals(input.LastUpdated))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Workstation != null)
                    hashCode = hashCode * 59 + this.Workstation.GetHashCode();
                hashCode = hashCode * 59 + this.Occupied.GetHashCode();
                if (this.LastUpdated != null)
                    hashCode = hashCode * 59 + this.LastUpdated.GetHashCode();
                return hashCode;
            }
        }

    }

}
