/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// Quota
    /// </summary>
    [DataContract(Name = "Quota")]
    public partial class Quota : IEquatable<Quota>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Quota" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Quota() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Quota" /> class.
        /// </summary>
        /// <param name="current">current (required).</param>
        /// <param name="soft">soft (required).</param>
        /// <param name="hard">hard (required).</param>
        public Quota(int current = default(int), int? soft = default(int?), int? hard = default(int?))
        {
            this.Current = current;
            // to ensure "soft" is required (not null)
            this.Soft = soft ?? throw new ArgumentNullException("soft is a required property for Quota and cannot be null");
            // to ensure "hard" is required (not null)
            this.Hard = hard ?? throw new ArgumentNullException("hard is a required property for Quota and cannot be null");
        }

        /// <summary>
        /// Gets or Sets Current
        /// </summary>
        [DataMember(Name = "current", IsRequired = true, EmitDefaultValue = false)]
        public int Current { get; set; }

        /// <summary>
        /// Gets or Sets Soft
        /// </summary>
        [DataMember(Name = "soft", IsRequired = true, EmitDefaultValue = true)]
        public int? Soft { get; set; }

        /// <summary>
        /// Gets or Sets Hard
        /// </summary>
        [DataMember(Name = "hard", IsRequired = true, EmitDefaultValue = true)]
        public int? Hard { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Quota {\n");
            sb.Append("  Current: ").Append(Current).Append("\n");
            sb.Append("  Soft: ").Append(Soft).Append("\n");
            sb.Append("  Hard: ").Append(Hard).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Quota);
        }

        /// <summary>
        /// Returns true if Quota instances are equal
        /// </summary>
        /// <param name="input">Instance of Quota to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Quota input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Current == input.Current ||
                    this.Current.Equals(input.Current)
                ) && 
                (
                    this.Soft == input.Soft ||
                    (this.Soft != null &&
                    this.Soft.Equals(input.Soft))
                ) && 
                (
                    this.Hard == input.Hard ||
                    (this.Hard != null &&
                    this.Hard.Equals(input.Hard))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Current.GetHashCode();
                if (this.Soft != null)
                    hashCode = hashCode * 59 + this.Soft.GetHashCode();
                if (this.Hard != null)
                    hashCode = hashCode * 59 + this.Hard.GetHashCode();
                return hashCode;
            }
        }

    }

}
