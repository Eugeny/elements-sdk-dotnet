/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// LocateResult
    /// </summary>
    [DataContract(Name = "LocateResult")]
    public partial class LocateResult : IEquatable<LocateResult>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LocateResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LocateResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LocateResult" /> class.
        /// </summary>
        /// <param name="path">path (required).</param>
        /// <param name="workspace">workspace.</param>
        /// <param name="workspaceRelativePath">workspaceRelativePath.</param>
        public LocateResult(string path = default(string), int? workspace = default(int?), string workspaceRelativePath = default(string))
        {
            // to ensure "path" is required (not null)
            this.Path = path ?? throw new ArgumentNullException("path is a required property for LocateResult and cannot be null");
            this.Workspace = workspace;
            this.WorkspaceRelativePath = workspaceRelativePath;
        }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name = "path", IsRequired = true, EmitDefaultValue = true)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets Workspace
        /// </summary>
        [DataMember(Name = "workspace", EmitDefaultValue = true)]
        public int? Workspace { get; set; }

        /// <summary>
        /// Gets or Sets WorkspaceRelativePath
        /// </summary>
        [DataMember(Name = "workspace_relative_path", EmitDefaultValue = true)]
        public string WorkspaceRelativePath { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LocateResult {\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Workspace: ").Append(Workspace).Append("\n");
            sb.Append("  WorkspaceRelativePath: ").Append(WorkspaceRelativePath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LocateResult);
        }

        /// <summary>
        /// Returns true if LocateResult instances are equal
        /// </summary>
        /// <param name="input">Instance of LocateResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LocateResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.Workspace == input.Workspace ||
                    (this.Workspace != null &&
                    this.Workspace.Equals(input.Workspace))
                ) && 
                (
                    this.WorkspaceRelativePath == input.WorkspaceRelativePath ||
                    (this.WorkspaceRelativePath != null &&
                    this.WorkspaceRelativePath.Equals(input.WorkspaceRelativePath))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.Workspace != null)
                    hashCode = hashCode * 59 + this.Workspace.GetHashCode();
                if (this.WorkspaceRelativePath != null)
                    hashCode = hashCode * 59 + this.WorkspaceRelativePath.GetHashCode();
                return hashCode;
            }
        }

    }

}
