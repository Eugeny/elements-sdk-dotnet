/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// TapeJob
    /// </summary>
    [DataContract(Name = "TapeJob")]
    public partial class TapeJob : IEquatable<TapeJob>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TapeJob" /> class.
        /// </summary>
        /// <param name="group">group.</param>
        /// <param name="id">id.</param>
        /// <param name="exclude">exclude.</param>
        /// <param name="selectedTape">selectedTape.</param>
        /// <param name="hasCopy2">hasCopy2.</param>
        /// <param name="copy2Id">copy2Id.</param>
        /// <param name="status">status.</param>
        /// <param name="copied">copied.</param>
        /// <param name="total">total.</param>
        /// <param name="type">type.</param>
        /// <param name="export">export.</param>
        /// <param name="start">start.</param>
        /// <param name="duration">duration.</param>
        /// <param name="name">name.</param>
        /// <param name="destination">destination.</param>
        /// <param name="deleteSource">deleteSource.</param>
        /// <param name="destination2">destination2.</param>
        /// <param name="group2">group2.</param>
        /// <param name="export2">export2.</param>
        /// <param name="md5">md5.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="logPath">logPath.</param>
        /// <param name="logExists">logExists.</param>
        public TapeJob(TapeGroup group = default(TapeGroup), int id = default(int), List<string> exclude = default(List<string>), string selectedTape = default(string), string hasCopy2 = default(string), string copy2Id = default(string), string status = default(string), string copied = default(string), string total = default(string), string type = default(string), bool export = default(bool), string start = default(string), string duration = default(string), string name = default(string), string destination = default(string), bool deleteSource = default(bool), string destination2 = default(string), string group2 = default(string), bool export2 = default(bool), bool md5 = default(bool), string startDate = default(string), string logPath = default(string), bool logExists = default(bool))
        {
            this.Group = group;
            this.Id = id;
            this.Exclude = exclude;
            this.SelectedTape = selectedTape;
            this.HasCopy2 = hasCopy2;
            this.Copy2Id = copy2Id;
            this.Status = status;
            this.Copied = copied;
            this.Total = total;
            this.Type = type;
            this.Export = export;
            this.Start = start;
            this.Duration = duration;
            this.Name = name;
            this.Destination = destination;
            this.DeleteSource = deleteSource;
            this.Destination2 = destination2;
            this.Group2 = group2;
            this.Export2 = export2;
            this.Md5 = md5;
            this.StartDate = startDate;
            this.LogPath = logPath;
            this.LogExists = logExists;
        }

        /// <summary>
        /// Gets or Sets Group
        /// </summary>
        [DataMember(Name = "group", EmitDefaultValue = false)]
        public TapeGroup Group { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Exclude
        /// </summary>
        [DataMember(Name = "exclude", EmitDefaultValue = false)]
        public List<string> Exclude { get; set; }

        /// <summary>
        /// Gets or Sets SelectedTape
        /// </summary>
        [DataMember(Name = "selected_tape", EmitDefaultValue = false)]
        public string SelectedTape { get; set; }

        /// <summary>
        /// Gets or Sets HasCopy2
        /// </summary>
        [DataMember(Name = "has_copy2", EmitDefaultValue = false)]
        public string HasCopy2 { get; set; }

        /// <summary>
        /// Gets or Sets Copy2Id
        /// </summary>
        [DataMember(Name = "copy2_id", EmitDefaultValue = false)]
        public string Copy2Id { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Copied
        /// </summary>
        [DataMember(Name = "copied", EmitDefaultValue = false)]
        public string Copied { get; set; }

        /// <summary>
        /// Gets or Sets Total
        /// </summary>
        [DataMember(Name = "total", EmitDefaultValue = false)]
        public string Total { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Export
        /// </summary>
        [DataMember(Name = "export", EmitDefaultValue = true)]
        public bool Export { get; set; }

        /// <summary>
        /// Gets or Sets Start
        /// </summary>
        [DataMember(Name = "start", EmitDefaultValue = false)]
        public string Start { get; set; }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name = "duration", EmitDefaultValue = false)]
        public string Duration { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Destination
        /// </summary>
        [DataMember(Name = "destination", EmitDefaultValue = false)]
        public string Destination { get; set; }

        /// <summary>
        /// Gets or Sets DeleteSource
        /// </summary>
        [DataMember(Name = "delete_source", EmitDefaultValue = true)]
        public bool DeleteSource { get; set; }

        /// <summary>
        /// Gets or Sets Destination2
        /// </summary>
        [DataMember(Name = "destination2", EmitDefaultValue = false)]
        public string Destination2 { get; set; }

        /// <summary>
        /// Gets or Sets Group2
        /// </summary>
        [DataMember(Name = "group2", EmitDefaultValue = true)]
        public string Group2 { get; set; }

        /// <summary>
        /// Gets or Sets Export2
        /// </summary>
        [DataMember(Name = "export2", EmitDefaultValue = true)]
        public bool Export2 { get; set; }

        /// <summary>
        /// Gets or Sets Md5
        /// </summary>
        [DataMember(Name = "md5", EmitDefaultValue = true)]
        public bool Md5 { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name = "start_date", EmitDefaultValue = false)]
        public string StartDate { get; set; }

        /// <summary>
        /// Gets or Sets LogPath
        /// </summary>
        [DataMember(Name = "log_path", EmitDefaultValue = true)]
        public string LogPath { get; set; }

        /// <summary>
        /// Gets or Sets LogExists
        /// </summary>
        [DataMember(Name = "log_exists", EmitDefaultValue = true)]
        public bool LogExists { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TapeJob {\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Exclude: ").Append(Exclude).Append("\n");
            sb.Append("  SelectedTape: ").Append(SelectedTape).Append("\n");
            sb.Append("  HasCopy2: ").Append(HasCopy2).Append("\n");
            sb.Append("  Copy2Id: ").Append(Copy2Id).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Copied: ").Append(Copied).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Export: ").Append(Export).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  DeleteSource: ").Append(DeleteSource).Append("\n");
            sb.Append("  Destination2: ").Append(Destination2).Append("\n");
            sb.Append("  Group2: ").Append(Group2).Append("\n");
            sb.Append("  Export2: ").Append(Export2).Append("\n");
            sb.Append("  Md5: ").Append(Md5).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  LogPath: ").Append(LogPath).Append("\n");
            sb.Append("  LogExists: ").Append(LogExists).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TapeJob);
        }

        /// <summary>
        /// Returns true if TapeJob instances are equal
        /// </summary>
        /// <param name="input">Instance of TapeJob to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TapeJob input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Group == input.Group ||
                    (this.Group != null &&
                    this.Group.Equals(input.Group))
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Exclude == input.Exclude ||
                    this.Exclude != null &&
                    input.Exclude != null &&
                    this.Exclude.SequenceEqual(input.Exclude)
                ) && 
                (
                    this.SelectedTape == input.SelectedTape ||
                    (this.SelectedTape != null &&
                    this.SelectedTape.Equals(input.SelectedTape))
                ) && 
                (
                    this.HasCopy2 == input.HasCopy2 ||
                    (this.HasCopy2 != null &&
                    this.HasCopy2.Equals(input.HasCopy2))
                ) && 
                (
                    this.Copy2Id == input.Copy2Id ||
                    (this.Copy2Id != null &&
                    this.Copy2Id.Equals(input.Copy2Id))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Copied == input.Copied ||
                    (this.Copied != null &&
                    this.Copied.Equals(input.Copied))
                ) && 
                (
                    this.Total == input.Total ||
                    (this.Total != null &&
                    this.Total.Equals(input.Total))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Export == input.Export ||
                    this.Export.Equals(input.Export)
                ) && 
                (
                    this.Start == input.Start ||
                    (this.Start != null &&
                    this.Start.Equals(input.Start))
                ) && 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Destination == input.Destination ||
                    (this.Destination != null &&
                    this.Destination.Equals(input.Destination))
                ) && 
                (
                    this.DeleteSource == input.DeleteSource ||
                    this.DeleteSource.Equals(input.DeleteSource)
                ) && 
                (
                    this.Destination2 == input.Destination2 ||
                    (this.Destination2 != null &&
                    this.Destination2.Equals(input.Destination2))
                ) && 
                (
                    this.Group2 == input.Group2 ||
                    (this.Group2 != null &&
                    this.Group2.Equals(input.Group2))
                ) && 
                (
                    this.Export2 == input.Export2 ||
                    this.Export2.Equals(input.Export2)
                ) && 
                (
                    this.Md5 == input.Md5 ||
                    this.Md5.Equals(input.Md5)
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.LogPath == input.LogPath ||
                    (this.LogPath != null &&
                    this.LogPath.Equals(input.LogPath))
                ) && 
                (
                    this.LogExists == input.LogExists ||
                    this.LogExists.Equals(input.LogExists)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Group != null)
                    hashCode = hashCode * 59 + this.Group.GetHashCode();
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Exclude != null)
                    hashCode = hashCode * 59 + this.Exclude.GetHashCode();
                if (this.SelectedTape != null)
                    hashCode = hashCode * 59 + this.SelectedTape.GetHashCode();
                if (this.HasCopy2 != null)
                    hashCode = hashCode * 59 + this.HasCopy2.GetHashCode();
                if (this.Copy2Id != null)
                    hashCode = hashCode * 59 + this.Copy2Id.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Copied != null)
                    hashCode = hashCode * 59 + this.Copied.GetHashCode();
                if (this.Total != null)
                    hashCode = hashCode * 59 + this.Total.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                hashCode = hashCode * 59 + this.Export.GetHashCode();
                if (this.Start != null)
                    hashCode = hashCode * 59 + this.Start.GetHashCode();
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Destination != null)
                    hashCode = hashCode * 59 + this.Destination.GetHashCode();
                hashCode = hashCode * 59 + this.DeleteSource.GetHashCode();
                if (this.Destination2 != null)
                    hashCode = hashCode * 59 + this.Destination2.GetHashCode();
                if (this.Group2 != null)
                    hashCode = hashCode * 59 + this.Group2.GetHashCode();
                hashCode = hashCode * 59 + this.Export2.GetHashCode();
                hashCode = hashCode * 59 + this.Md5.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.LogPath != null)
                    hashCode = hashCode * 59 + this.LogPath.GetHashCode();
                hashCode = hashCode * 59 + this.LogExists.GetHashCode();
                return hashCode;
            }
        }

    }

}
