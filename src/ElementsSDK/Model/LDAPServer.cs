/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// LDAPServer
    /// </summary>
    [DataContract(Name = "LDAPServer")]
    public partial class LDAPServer : IEquatable<LDAPServer>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LDAPServer" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="ntDomain">ntDomain.</param>
        public LDAPServer(string name = default(string), string ntDomain = default(string))
        {
            this.Name = name;
            this.NtDomain = ntDomain;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets WinbindSeparator
        /// </summary>
        [DataMember(Name = "winbind_separator", EmitDefaultValue = false)]
        public string WinbindSeparator { get; private set; }

        /// <summary>
        /// Returns false as WinbindSeparator should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeWinbindSeparator()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets NtDomain
        /// </summary>
        [DataMember(Name = "nt_domain", EmitDefaultValue = false)]
        public string NtDomain { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LDAPServer {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  WinbindSeparator: ").Append(WinbindSeparator).Append("\n");
            sb.Append("  NtDomain: ").Append(NtDomain).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LDAPServer);
        }

        /// <summary>
        /// Returns true if LDAPServer instances are equal
        /// </summary>
        /// <param name="input">Instance of LDAPServer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LDAPServer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.WinbindSeparator == input.WinbindSeparator ||
                    (this.WinbindSeparator != null &&
                    this.WinbindSeparator.Equals(input.WinbindSeparator))
                ) && 
                (
                    this.NtDomain == input.NtDomain ||
                    (this.NtDomain != null &&
                    this.NtDomain.Equals(input.NtDomain))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.WinbindSeparator != null)
                    hashCode = hashCode * 59 + this.WinbindSeparator.GetHashCode();
                if (this.NtDomain != null)
                    hashCode = hashCode * 59 + this.NtDomain.GetHashCode();
                return hashCode;
            }
        }

    }

}
