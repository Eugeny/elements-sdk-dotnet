/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// SNFSStripeGroup
    /// </summary>
    [DataContract(Name = "SNFSStripeGroup")]
    public partial class SNFSStripeGroup : IEquatable<SNFSStripeGroup>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SNFSStripeGroup" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SNFSStripeGroup() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SNFSStripeGroup" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="statusTags">statusTags (required).</param>
        /// <param name="affinity">affinity.</param>
        /// <param name="sizeTotal">sizeTotal.</param>
        /// <param name="sizeUsed">sizeUsed.</param>
        /// <param name="sizeFree">sizeFree.</param>
        public SNFSStripeGroup(string name = default(string), List<string> statusTags = default(List<string>), string affinity = default(string), int sizeTotal = default(int), int sizeUsed = default(int), int sizeFree = default(int))
        {
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for SNFSStripeGroup and cannot be null");
            // to ensure "statusTags" is required (not null)
            this.StatusTags = statusTags ?? throw new ArgumentNullException("statusTags is a required property for SNFSStripeGroup and cannot be null");
            this.Affinity = affinity;
            this.SizeTotal = sizeTotal;
            this.SizeUsed = sizeUsed;
            this.SizeFree = sizeFree;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets StatusTags
        /// </summary>
        [DataMember(Name = "status_tags", IsRequired = true, EmitDefaultValue = false)]
        public List<string> StatusTags { get; set; }

        /// <summary>
        /// Gets or Sets Affinity
        /// </summary>
        [DataMember(Name = "affinity", EmitDefaultValue = true)]
        public string Affinity { get; set; }

        /// <summary>
        /// Gets or Sets SizeTotal
        /// </summary>
        [DataMember(Name = "size_total", EmitDefaultValue = false)]
        public int SizeTotal { get; set; }

        /// <summary>
        /// Gets or Sets SizeUsed
        /// </summary>
        [DataMember(Name = "size_used", EmitDefaultValue = false)]
        public int SizeUsed { get; set; }

        /// <summary>
        /// Gets or Sets SizeFree
        /// </summary>
        [DataMember(Name = "size_free", EmitDefaultValue = false)]
        public int SizeFree { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SNFSStripeGroup {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  StatusTags: ").Append(StatusTags).Append("\n");
            sb.Append("  Affinity: ").Append(Affinity).Append("\n");
            sb.Append("  SizeTotal: ").Append(SizeTotal).Append("\n");
            sb.Append("  SizeUsed: ").Append(SizeUsed).Append("\n");
            sb.Append("  SizeFree: ").Append(SizeFree).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SNFSStripeGroup);
        }

        /// <summary>
        /// Returns true if SNFSStripeGroup instances are equal
        /// </summary>
        /// <param name="input">Instance of SNFSStripeGroup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SNFSStripeGroup input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.StatusTags == input.StatusTags ||
                    this.StatusTags != null &&
                    input.StatusTags != null &&
                    this.StatusTags.SequenceEqual(input.StatusTags)
                ) && 
                (
                    this.Affinity == input.Affinity ||
                    (this.Affinity != null &&
                    this.Affinity.Equals(input.Affinity))
                ) && 
                (
                    this.SizeTotal == input.SizeTotal ||
                    this.SizeTotal.Equals(input.SizeTotal)
                ) && 
                (
                    this.SizeUsed == input.SizeUsed ||
                    this.SizeUsed.Equals(input.SizeUsed)
                ) && 
                (
                    this.SizeFree == input.SizeFree ||
                    this.SizeFree.Equals(input.SizeFree)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.StatusTags != null)
                    hashCode = hashCode * 59 + this.StatusTags.GetHashCode();
                if (this.Affinity != null)
                    hashCode = hashCode * 59 + this.Affinity.GetHashCode();
                hashCode = hashCode * 59 + this.SizeTotal.GetHashCode();
                hashCode = hashCode * 59 + this.SizeUsed.GetHashCode();
                hashCode = hashCode * 59 + this.SizeFree.GetHashCode();
                return hashCode;
            }
        }

    }

}
