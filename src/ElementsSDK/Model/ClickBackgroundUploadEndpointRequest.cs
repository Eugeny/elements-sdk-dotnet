/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// ClickBackgroundUploadEndpointRequest
    /// </summary>
    [DataContract(Name = "ClickBackgroundUploadEndpointRequest")]
    public partial class ClickBackgroundUploadEndpointRequest : IEquatable<ClickBackgroundUploadEndpointRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClickBackgroundUploadEndpointRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ClickBackgroundUploadEndpointRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ClickBackgroundUploadEndpointRequest" /> class.
        /// </summary>
        /// <param name="gallery">gallery (required).</param>
        /// <param name="linksToSend">linksToSend (required).</param>
        /// <param name="notifyOnCompletion">notifyOnCompletion (required).</param>
        public ClickBackgroundUploadEndpointRequest(int gallery = default(int), List<int> linksToSend = default(List<int>), bool notifyOnCompletion = default(bool))
        {
            this.Gallery = gallery;
            // to ensure "linksToSend" is required (not null)
            this.LinksToSend = linksToSend ?? throw new ArgumentNullException("linksToSend is a required property for ClickBackgroundUploadEndpointRequest and cannot be null");
            this.NotifyOnCompletion = notifyOnCompletion;
        }

        /// <summary>
        /// Gets or Sets Gallery
        /// </summary>
        [DataMember(Name = "gallery", IsRequired = true, EmitDefaultValue = false)]
        public int Gallery { get; set; }

        /// <summary>
        /// Gets or Sets LinksToSend
        /// </summary>
        [DataMember(Name = "links_to_send", IsRequired = true, EmitDefaultValue = false)]
        public List<int> LinksToSend { get; set; }

        /// <summary>
        /// Gets or Sets NotifyOnCompletion
        /// </summary>
        [DataMember(Name = "notify_on_completion", IsRequired = true, EmitDefaultValue = true)]
        public bool NotifyOnCompletion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClickBackgroundUploadEndpointRequest {\n");
            sb.Append("  Gallery: ").Append(Gallery).Append("\n");
            sb.Append("  LinksToSend: ").Append(LinksToSend).Append("\n");
            sb.Append("  NotifyOnCompletion: ").Append(NotifyOnCompletion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ClickBackgroundUploadEndpointRequest);
        }

        /// <summary>
        /// Returns true if ClickBackgroundUploadEndpointRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ClickBackgroundUploadEndpointRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClickBackgroundUploadEndpointRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Gallery == input.Gallery ||
                    this.Gallery.Equals(input.Gallery)
                ) && 
                (
                    this.LinksToSend == input.LinksToSend ||
                    this.LinksToSend != null &&
                    input.LinksToSend != null &&
                    this.LinksToSend.SequenceEqual(input.LinksToSend)
                ) && 
                (
                    this.NotifyOnCompletion == input.NotifyOnCompletion ||
                    this.NotifyOnCompletion.Equals(input.NotifyOnCompletion)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Gallery.GetHashCode();
                if (this.LinksToSend != null)
                    hashCode = hashCode * 59 + this.LinksToSend.GetHashCode();
                hashCode = hashCode * 59 + this.NotifyOnCompletion.GetHashCode();
                return hashCode;
            }
        }

    }

}
