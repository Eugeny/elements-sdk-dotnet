/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// OneTimeAccessToken
    /// </summary>
    [DataContract(Name = "OneTimeAccessToken")]
    public partial class OneTimeAccessToken : IEquatable<OneTimeAccessToken>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OneTimeAccessToken" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OneTimeAccessToken() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OneTimeAccessToken" /> class.
        /// </summary>
        /// <param name="user">user (required).</param>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="url">url (required).</param>
        /// <param name="token">token (required).</param>
        /// <param name="viewLimitEnabled">viewLimitEnabled.</param>
        /// <param name="viewLimitLeft">viewLimitLeft.</param>
        /// <param name="expires">expires.</param>
        /// <param name="requireLogin">requireLogin.</param>
        public OneTimeAccessToken(ElementsUserMiniReference user = default(ElementsUserMiniReference), ElementsUserMini createdBy = default(ElementsUserMini), string url = default(string), string token = default(string), bool viewLimitEnabled = default(bool), int viewLimitLeft = default(int), DateTime? expires = default(DateTime?), bool requireLogin = default(bool))
        {
            // to ensure "user" is required (not null)
            this.User = user ?? throw new ArgumentNullException("user is a required property for OneTimeAccessToken and cannot be null");
            // to ensure "url" is required (not null)
            this.Url = url ?? throw new ArgumentNullException("url is a required property for OneTimeAccessToken and cannot be null");
            // to ensure "token" is required (not null)
            this.Token = token ?? throw new ArgumentNullException("token is a required property for OneTimeAccessToken and cannot be null");
            this.CreatedBy = createdBy;
            this.ViewLimitEnabled = viewLimitEnabled;
            this.ViewLimitLeft = viewLimitLeft;
            this.Expires = expires;
            this.RequireLogin = requireLogin;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets Activity
        /// </summary>
        [DataMember(Name = "activity", EmitDefaultValue = false)]
        public List<OneTimeAccessTokenActivity> Activity { get; private set; }

        /// <summary>
        /// Returns false as Activity should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeActivity()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "user", IsRequired = true, EmitDefaultValue = false)]
        public ElementsUserMiniReference User { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "created_by", EmitDefaultValue = false)]
        public ElementsUserMini CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets MediaRootPermissions
        /// </summary>
        [DataMember(Name = "media_root_permissions", EmitDefaultValue = false)]
        public string MediaRootPermissions { get; private set; }

        /// <summary>
        /// Returns false as MediaRootPermissions should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMediaRootPermissions()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets SharedBundles
        /// </summary>
        [DataMember(Name = "shared_bundles", EmitDefaultValue = false)]
        public List<OneTimeAccessTokenSharedObject> SharedBundles { get; private set; }

        /// <summary>
        /// Returns false as SharedBundles should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSharedBundles()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets SharedDirectories
        /// </summary>
        [DataMember(Name = "shared_directories", EmitDefaultValue = false)]
        public List<OneTimeAccessTokenSharedObject> SharedDirectories { get; private set; }

        /// <summary>
        /// Returns false as SharedDirectories should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSharedDirectories()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets FullUrl
        /// </summary>
        [DataMember(Name = "full_url", EmitDefaultValue = false)]
        public string FullUrl { get; private set; }

        /// <summary>
        /// Returns false as FullUrl should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFullUrl()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name = "token", IsRequired = true, EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets ViewLimitEnabled
        /// </summary>
        [DataMember(Name = "view_limit_enabled", EmitDefaultValue = true)]
        public bool ViewLimitEnabled { get; set; }

        /// <summary>
        /// Gets or Sets ViewLimitLeft
        /// </summary>
        [DataMember(Name = "view_limit_left", EmitDefaultValue = false)]
        public int ViewLimitLeft { get; set; }

        /// <summary>
        /// Gets or Sets Expires
        /// </summary>
        [DataMember(Name = "expires", EmitDefaultValue = true)]
        public DateTime? Expires { get; set; }

        /// <summary>
        /// Gets or Sets RequireLogin
        /// </summary>
        [DataMember(Name = "require_login", EmitDefaultValue = true)]
        public bool RequireLogin { get; set; }

        /// <summary>
        /// Gets or Sets IsEasySharingForBundle
        /// </summary>
        [DataMember(Name = "is_easy_sharing_for_bundle", EmitDefaultValue = false)]
        public int IsEasySharingForBundle { get; private set; }

        /// <summary>
        /// Returns false as IsEasySharingForBundle should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsEasySharingForBundle()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets IsEasySharingForDirectory
        /// </summary>
        [DataMember(Name = "is_easy_sharing_for_directory", EmitDefaultValue = false)]
        public int IsEasySharingForDirectory { get; private set; }

        /// <summary>
        /// Returns false as IsEasySharingForDirectory should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsEasySharingForDirectory()
        {
            return false;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OneTimeAccessToken {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Activity: ").Append(Activity).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  MediaRootPermissions: ").Append(MediaRootPermissions).Append("\n");
            sb.Append("  SharedBundles: ").Append(SharedBundles).Append("\n");
            sb.Append("  SharedDirectories: ").Append(SharedDirectories).Append("\n");
            sb.Append("  FullUrl: ").Append(FullUrl).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ViewLimitEnabled: ").Append(ViewLimitEnabled).Append("\n");
            sb.Append("  ViewLimitLeft: ").Append(ViewLimitLeft).Append("\n");
            sb.Append("  Expires: ").Append(Expires).Append("\n");
            sb.Append("  RequireLogin: ").Append(RequireLogin).Append("\n");
            sb.Append("  IsEasySharingForBundle: ").Append(IsEasySharingForBundle).Append("\n");
            sb.Append("  IsEasySharingForDirectory: ").Append(IsEasySharingForDirectory).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OneTimeAccessToken);
        }

        /// <summary>
        /// Returns true if OneTimeAccessToken instances are equal
        /// </summary>
        /// <param name="input">Instance of OneTimeAccessToken to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OneTimeAccessToken input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Activity == input.Activity ||
                    this.Activity != null &&
                    input.Activity != null &&
                    this.Activity.SequenceEqual(input.Activity)
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.MediaRootPermissions == input.MediaRootPermissions ||
                    (this.MediaRootPermissions != null &&
                    this.MediaRootPermissions.Equals(input.MediaRootPermissions))
                ) && 
                (
                    this.SharedBundles == input.SharedBundles ||
                    this.SharedBundles != null &&
                    input.SharedBundles != null &&
                    this.SharedBundles.SequenceEqual(input.SharedBundles)
                ) && 
                (
                    this.SharedDirectories == input.SharedDirectories ||
                    this.SharedDirectories != null &&
                    input.SharedDirectories != null &&
                    this.SharedDirectories.SequenceEqual(input.SharedDirectories)
                ) && 
                (
                    this.FullUrl == input.FullUrl ||
                    (this.FullUrl != null &&
                    this.FullUrl.Equals(input.FullUrl))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.ViewLimitEnabled == input.ViewLimitEnabled ||
                    this.ViewLimitEnabled.Equals(input.ViewLimitEnabled)
                ) && 
                (
                    this.ViewLimitLeft == input.ViewLimitLeft ||
                    this.ViewLimitLeft.Equals(input.ViewLimitLeft)
                ) && 
                (
                    this.Expires == input.Expires ||
                    (this.Expires != null &&
                    this.Expires.Equals(input.Expires))
                ) && 
                (
                    this.RequireLogin == input.RequireLogin ||
                    this.RequireLogin.Equals(input.RequireLogin)
                ) && 
                (
                    this.IsEasySharingForBundle == input.IsEasySharingForBundle ||
                    this.IsEasySharingForBundle.Equals(input.IsEasySharingForBundle)
                ) && 
                (
                    this.IsEasySharingForDirectory == input.IsEasySharingForDirectory ||
                    this.IsEasySharingForDirectory.Equals(input.IsEasySharingForDirectory)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Activity != null)
                    hashCode = hashCode * 59 + this.Activity.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.MediaRootPermissions != null)
                    hashCode = hashCode * 59 + this.MediaRootPermissions.GetHashCode();
                if (this.SharedBundles != null)
                    hashCode = hashCode * 59 + this.SharedBundles.GetHashCode();
                if (this.SharedDirectories != null)
                    hashCode = hashCode * 59 + this.SharedDirectories.GetHashCode();
                if (this.FullUrl != null)
                    hashCode = hashCode * 59 + this.FullUrl.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                hashCode = hashCode * 59 + this.ViewLimitEnabled.GetHashCode();
                hashCode = hashCode * 59 + this.ViewLimitLeft.GetHashCode();
                if (this.Expires != null)
                    hashCode = hashCode * 59 + this.Expires.GetHashCode();
                hashCode = hashCode * 59 + this.RequireLogin.GetHashCode();
                hashCode = hashCode * 59 + this.IsEasySharingForBundle.GetHashCode();
                hashCode = hashCode * 59 + this.IsEasySharingForDirectory.GetHashCode();
                return hashCode;
            }
        }

    }

}
