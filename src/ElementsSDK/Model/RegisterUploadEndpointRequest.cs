/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// RegisterUploadEndpointRequest
    /// </summary>
    [DataContract(Name = "RegisterUploadEndpointRequest")]
    public partial class RegisterUploadEndpointRequest : IEquatable<RegisterUploadEndpointRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RegisterUploadEndpointRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RegisterUploadEndpointRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RegisterUploadEndpointRequest" /> class.
        /// </summary>
        /// <param name="uploadId">uploadId (required).</param>
        /// <param name="path">path (required).</param>
        public RegisterUploadEndpointRequest(string uploadId = default(string), string path = default(string))
        {
            // to ensure "uploadId" is required (not null)
            this.UploadId = uploadId ?? throw new ArgumentNullException("uploadId is a required property for RegisterUploadEndpointRequest and cannot be null");
            // to ensure "path" is required (not null)
            this.Path = path ?? throw new ArgumentNullException("path is a required property for RegisterUploadEndpointRequest and cannot be null");
        }

        /// <summary>
        /// Gets or Sets UploadId
        /// </summary>
        [DataMember(Name = "upload_id", IsRequired = true, EmitDefaultValue = false)]
        public string UploadId { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name = "path", IsRequired = true, EmitDefaultValue = false)]
        public string Path { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RegisterUploadEndpointRequest {\n");
            sb.Append("  UploadId: ").Append(UploadId).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RegisterUploadEndpointRequest);
        }

        /// <summary>
        /// Returns true if RegisterUploadEndpointRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of RegisterUploadEndpointRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RegisterUploadEndpointRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UploadId == input.UploadId ||
                    (this.UploadId != null &&
                    this.UploadId.Equals(input.UploadId))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UploadId != null)
                    hashCode = hashCode * 59 + this.UploadId.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                return hashCode;
            }
        }

    }

}
