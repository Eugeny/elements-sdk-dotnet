/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// ElementsUserProfile
    /// </summary>
    [DataContract(Name = "ElementsUserProfile")]
    public partial class ElementsUserProfile : IEquatable<ElementsUserProfile>
    {
        /// <summary>
        /// Defines Language
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LanguageEnum
        {
            /// <summary>
            /// Enum En for value: en
            /// </summary>
            [EnumMember(Value = "en")]
            En = 1,

            /// <summary>
            /// Enum Fr for value: fr
            /// </summary>
            [EnumMember(Value = "fr")]
            Fr = 2,

            /// <summary>
            /// Enum De for value: de
            /// </summary>
            [EnumMember(Value = "de")]
            De = 3,

            /// <summary>
            /// Enum Ru for value: ru
            /// </summary>
            [EnumMember(Value = "ru")]
            Ru = 4

        }


        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name = "language", EmitDefaultValue = true)]
        public LanguageEnum? Language { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ElementsUserProfile" /> class.
        /// </summary>
        /// <param name="avatar">avatar.</param>
        /// <param name="defaultPage">defaultPage.</param>
        /// <param name="fullName">fullName.</param>
        /// <param name="language">language.</param>
        /// <param name="fmBookmarks">fmBookmarks.</param>
        /// <param name="ldap">ldap.</param>
        public ElementsUserProfile(string avatar = default(string), string defaultPage = default(string), string fullName = default(string), LanguageEnum? language = default(LanguageEnum?), List<string> fmBookmarks = default(List<string>), LDAPServer ldap = default(LDAPServer))
        {
            this.Avatar = avatar;
            this.DefaultPage = defaultPage;
            this.FullName = fullName;
            this.Language = language;
            this.FmBookmarks = fmBookmarks;
            this.Ldap = ldap;
        }

        /// <summary>
        /// Gets or Sets Avatar
        /// </summary>
        [DataMember(Name = "avatar", EmitDefaultValue = true)]
        public string Avatar { get; set; }

        /// <summary>
        /// Gets or Sets DefaultPage
        /// </summary>
        [DataMember(Name = "default_page", EmitDefaultValue = false)]
        public string DefaultPage { get; set; }

        /// <summary>
        /// Gets or Sets FullName
        /// </summary>
        [DataMember(Name = "full_name", EmitDefaultValue = true)]
        public string FullName { get; set; }

        /// <summary>
        /// Gets or Sets FmBookmarks
        /// </summary>
        [DataMember(Name = "fm_bookmarks", EmitDefaultValue = false)]
        public List<string> FmBookmarks { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        public string Username { get; private set; }

        /// <summary>
        /// Returns false as Username should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUsername()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets UnixUsername
        /// </summary>
        [DataMember(Name = "unix_username", EmitDefaultValue = false)]
        public string UnixUsername { get; private set; }

        /// <summary>
        /// Returns false as UnixUsername should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUnixUsername()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "display_name", EmitDefaultValue = false)]
        public string DisplayName { get; private set; }

        /// <summary>
        /// Returns false as DisplayName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDisplayName()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; private set; }

        /// <summary>
        /// Returns false as Email should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEmail()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Ldap
        /// </summary>
        [DataMember(Name = "ldap", EmitDefaultValue = false)]
        public LDAPServer Ldap { get; set; }

        /// <summary>
        /// Gets or Sets EffectivePermissions
        /// </summary>
        [DataMember(Name = "effective_permissions", EmitDefaultValue = false)]
        public List<string> EffectivePermissions { get; private set; }

        /// <summary>
        /// Returns false as EffectivePermissions should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEffectivePermissions()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ElementsUserProfile {\n");
            sb.Append("  Avatar: ").Append(Avatar).Append("\n");
            sb.Append("  DefaultPage: ").Append(DefaultPage).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  FmBookmarks: ").Append(FmBookmarks).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  UnixUsername: ").Append(UnixUsername).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Ldap: ").Append(Ldap).Append("\n");
            sb.Append("  EffectivePermissions: ").Append(EffectivePermissions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ElementsUserProfile);
        }

        /// <summary>
        /// Returns true if ElementsUserProfile instances are equal
        /// </summary>
        /// <param name="input">Instance of ElementsUserProfile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ElementsUserProfile input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Avatar == input.Avatar ||
                    (this.Avatar != null &&
                    this.Avatar.Equals(input.Avatar))
                ) && 
                (
                    this.DefaultPage == input.DefaultPage ||
                    (this.DefaultPage != null &&
                    this.DefaultPage.Equals(input.DefaultPage))
                ) && 
                (
                    this.FullName == input.FullName ||
                    (this.FullName != null &&
                    this.FullName.Equals(input.FullName))
                ) && 
                (
                    this.Language == input.Language ||
                    this.Language.Equals(input.Language)
                ) && 
                (
                    this.FmBookmarks == input.FmBookmarks ||
                    this.FmBookmarks != null &&
                    input.FmBookmarks != null &&
                    this.FmBookmarks.SequenceEqual(input.FmBookmarks)
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.UnixUsername == input.UnixUsername ||
                    (this.UnixUsername != null &&
                    this.UnixUsername.Equals(input.UnixUsername))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Ldap == input.Ldap ||
                    (this.Ldap != null &&
                    this.Ldap.Equals(input.Ldap))
                ) && 
                (
                    this.EffectivePermissions == input.EffectivePermissions ||
                    this.EffectivePermissions != null &&
                    input.EffectivePermissions != null &&
                    this.EffectivePermissions.SequenceEqual(input.EffectivePermissions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Avatar != null)
                    hashCode = hashCode * 59 + this.Avatar.GetHashCode();
                if (this.DefaultPage != null)
                    hashCode = hashCode * 59 + this.DefaultPage.GetHashCode();
                if (this.FullName != null)
                    hashCode = hashCode * 59 + this.FullName.GetHashCode();
                hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.FmBookmarks != null)
                    hashCode = hashCode * 59 + this.FmBookmarks.GetHashCode();
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.UnixUsername != null)
                    hashCode = hashCode * 59 + this.UnixUsername.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Ldap != null)
                    hashCode = hashCode * 59 + this.Ldap.GetHashCode();
                if (this.EffectivePermissions != null)
                    hashCode = hashCode * 59 + this.EffectivePermissions.GetHashCode();
                return hashCode;
            }
        }

    }

}
