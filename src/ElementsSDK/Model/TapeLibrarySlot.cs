/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// TapeLibrarySlot
    /// </summary>
    [DataContract(Name = "TapeLibrarySlot")]
    public partial class TapeLibrarySlot : IEquatable<TapeLibrarySlot>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TapeLibrarySlot" /> class.
        /// </summary>
        /// <param name="drive">drive.</param>
        /// <param name="status">status.</param>
        /// <param name="barcode">barcode.</param>
        /// <param name="origin">origin.</param>
        /// <param name="locked">locked.</param>
        public TapeLibrarySlot(int? drive = default(int?), string status = default(string), string barcode = default(string), string origin = default(string), bool locked = default(bool))
        {
            this.Drive = drive;
            this.Status = status;
            this.Barcode = barcode;
            this.Origin = origin;
            this.Locked = locked;
        }

        /// <summary>
        /// Gets or Sets Drive
        /// </summary>
        [DataMember(Name = "drive", EmitDefaultValue = true)]
        public int? Drive { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Barcode
        /// </summary>
        [DataMember(Name = "barcode", EmitDefaultValue = false)]
        public string Barcode { get; set; }

        /// <summary>
        /// Gets or Sets Origin
        /// </summary>
        [DataMember(Name = "origin", EmitDefaultValue = false)]
        public string Origin { get; set; }

        /// <summary>
        /// Gets or Sets Locked
        /// </summary>
        [DataMember(Name = "locked", EmitDefaultValue = true)]
        public bool Locked { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TapeLibrarySlot {\n");
            sb.Append("  Drive: ").Append(Drive).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Barcode: ").Append(Barcode).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  Locked: ").Append(Locked).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TapeLibrarySlot);
        }

        /// <summary>
        /// Returns true if TapeLibrarySlot instances are equal
        /// </summary>
        /// <param name="input">Instance of TapeLibrarySlot to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TapeLibrarySlot input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Drive == input.Drive ||
                    (this.Drive != null &&
                    this.Drive.Equals(input.Drive))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Barcode == input.Barcode ||
                    (this.Barcode != null &&
                    this.Barcode.Equals(input.Barcode))
                ) && 
                (
                    this.Origin == input.Origin ||
                    (this.Origin != null &&
                    this.Origin.Equals(input.Origin))
                ) && 
                (
                    this.Locked == input.Locked ||
                    this.Locked.Equals(input.Locked)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Drive != null)
                    hashCode = hashCode * 59 + this.Drive.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Barcode != null)
                    hashCode = hashCode * 59 + this.Barcode.GetHashCode();
                if (this.Origin != null)
                    hashCode = hashCode * 59 + this.Origin.GetHashCode();
                hashCode = hashCode * 59 + this.Locked.GetHashCode();
                return hashCode;
            }
        }

    }

}
