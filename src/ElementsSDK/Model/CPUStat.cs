/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// CPUStat
    /// </summary>
    [DataContract(Name = "CPUStat")]
    public partial class CPUStat : IEquatable<CPUStat>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CPUStat" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CPUStat() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CPUStat" /> class.
        /// </summary>
        /// <param name="time">time (required).</param>
        /// <param name="cIdle">cIdle (required).</param>
        /// <param name="cIowait">cIowait (required).</param>
        /// <param name="cSystem">cSystem (required).</param>
        /// <param name="cUser">cUser (required).</param>
        /// <param name="cUsage">cUsage (required).</param>
        public CPUStat(decimal time = default(decimal), decimal cIdle = default(decimal), decimal cIowait = default(decimal), decimal cSystem = default(decimal), decimal cUser = default(decimal), decimal cUsage = default(decimal))
        {
            this.Time = time;
            this.CIdle = cIdle;
            this.CIowait = cIowait;
            this.CSystem = cSystem;
            this.CUser = cUser;
            this.CUsage = cUsage;
        }

        /// <summary>
        /// Gets or Sets Time
        /// </summary>
        [DataMember(Name = "time", IsRequired = true, EmitDefaultValue = false)]
        public decimal Time { get; set; }

        /// <summary>
        /// Gets or Sets CIdle
        /// </summary>
        [DataMember(Name = "c_idle", IsRequired = true, EmitDefaultValue = false)]
        public decimal CIdle { get; set; }

        /// <summary>
        /// Gets or Sets CIowait
        /// </summary>
        [DataMember(Name = "c_iowait", IsRequired = true, EmitDefaultValue = false)]
        public decimal CIowait { get; set; }

        /// <summary>
        /// Gets or Sets CSystem
        /// </summary>
        [DataMember(Name = "c_system", IsRequired = true, EmitDefaultValue = false)]
        public decimal CSystem { get; set; }

        /// <summary>
        /// Gets or Sets CUser
        /// </summary>
        [DataMember(Name = "c_user", IsRequired = true, EmitDefaultValue = false)]
        public decimal CUser { get; set; }

        /// <summary>
        /// Gets or Sets CUsage
        /// </summary>
        [DataMember(Name = "c_usage", IsRequired = true, EmitDefaultValue = false)]
        public decimal CUsage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CPUStat {\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  CIdle: ").Append(CIdle).Append("\n");
            sb.Append("  CIowait: ").Append(CIowait).Append("\n");
            sb.Append("  CSystem: ").Append(CSystem).Append("\n");
            sb.Append("  CUser: ").Append(CUser).Append("\n");
            sb.Append("  CUsage: ").Append(CUsage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CPUStat);
        }

        /// <summary>
        /// Returns true if CPUStat instances are equal
        /// </summary>
        /// <param name="input">Instance of CPUStat to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CPUStat input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Time == input.Time ||
                    this.Time.Equals(input.Time)
                ) && 
                (
                    this.CIdle == input.CIdle ||
                    this.CIdle.Equals(input.CIdle)
                ) && 
                (
                    this.CIowait == input.CIowait ||
                    this.CIowait.Equals(input.CIowait)
                ) && 
                (
                    this.CSystem == input.CSystem ||
                    this.CSystem.Equals(input.CSystem)
                ) && 
                (
                    this.CUser == input.CUser ||
                    this.CUser.Equals(input.CUser)
                ) && 
                (
                    this.CUsage == input.CUsage ||
                    this.CUsage.Equals(input.CUsage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Time.GetHashCode();
                hashCode = hashCode * 59 + this.CIdle.GetHashCode();
                hashCode = hashCode * 59 + this.CIowait.GetHashCode();
                hashCode = hashCode * 59 + this.CSystem.GetHashCode();
                hashCode = hashCode * 59 + this.CUser.GetHashCode();
                hashCode = hashCode * 59 + this.CUsage.GetHashCode();
                return hashCode;
            }
        }

    }

}
