/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// MediaFileBundle
    /// </summary>
    [DataContract(Name = "MediaFileBundle")]
    public partial class MediaFileBundle : IEquatable<MediaFileBundle>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MediaFileBundle" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MediaFileBundle() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MediaFileBundle" /> class.
        /// </summary>
        /// <param name="asset">asset.</param>
        /// <param name="mainfile">mainfile.</param>
        /// <param name="snmAttributes">snmAttributes.</param>
        /// <param name="name">name (required).</param>
        /// <param name="location">location (required).</param>
        /// <param name="sharedViaTokens">sharedViaTokens.</param>
        public MediaFileBundle(Asset asset = default(Asset), MediaFileMini mainfile = default(MediaFileMini), StornextManagerAttributes snmAttributes = default(StornextManagerAttributes), string name = default(string), int location = default(int), List<int> sharedViaTokens = default(List<int>))
        {
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for MediaFileBundle and cannot be null");
            this.Location = location;
            this.Asset = asset;
            this.Mainfile = mainfile;
            this.SnmAttributes = snmAttributes;
            this.SharedViaTokens = sharedViaTokens;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Asset
        /// </summary>
        [DataMember(Name = "asset", EmitDefaultValue = false)]
        public Asset Asset { get; set; }

        /// <summary>
        /// Gets or Sets Mainfile
        /// </summary>
        [DataMember(Name = "mainfile", EmitDefaultValue = false)]
        public MediaFileMini Mainfile { get; set; }

        /// <summary>
        /// Gets or Sets SnmAttributes
        /// </summary>
        [DataMember(Name = "snm_attributes", EmitDefaultValue = false)]
        public StornextManagerAttributes SnmAttributes { get; set; }

        /// <summary>
        /// Gets or Sets IsShared
        /// </summary>
        [DataMember(Name = "is_shared", EmitDefaultValue = true)]
        public bool IsShared { get; private set; }

        /// <summary>
        /// Returns false as IsShared should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsShared()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name = "location", IsRequired = true, EmitDefaultValue = false)]
        public int Location { get; set; }

        /// <summary>
        /// Gets or Sets SharedViaTokens
        /// </summary>
        [DataMember(Name = "shared_via_tokens", EmitDefaultValue = false)]
        public List<int> SharedViaTokens { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MediaFileBundle {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Asset: ").Append(Asset).Append("\n");
            sb.Append("  Mainfile: ").Append(Mainfile).Append("\n");
            sb.Append("  SnmAttributes: ").Append(SnmAttributes).Append("\n");
            sb.Append("  IsShared: ").Append(IsShared).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  SharedViaTokens: ").Append(SharedViaTokens).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MediaFileBundle);
        }

        /// <summary>
        /// Returns true if MediaFileBundle instances are equal
        /// </summary>
        /// <param name="input">Instance of MediaFileBundle to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MediaFileBundle input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Asset == input.Asset ||
                    (this.Asset != null &&
                    this.Asset.Equals(input.Asset))
                ) && 
                (
                    this.Mainfile == input.Mainfile ||
                    (this.Mainfile != null &&
                    this.Mainfile.Equals(input.Mainfile))
                ) && 
                (
                    this.SnmAttributes == input.SnmAttributes ||
                    (this.SnmAttributes != null &&
                    this.SnmAttributes.Equals(input.SnmAttributes))
                ) && 
                (
                    this.IsShared == input.IsShared ||
                    this.IsShared.Equals(input.IsShared)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Location == input.Location ||
                    this.Location.Equals(input.Location)
                ) && 
                (
                    this.SharedViaTokens == input.SharedViaTokens ||
                    this.SharedViaTokens != null &&
                    input.SharedViaTokens != null &&
                    this.SharedViaTokens.SequenceEqual(input.SharedViaTokens)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Asset != null)
                    hashCode = hashCode * 59 + this.Asset.GetHashCode();
                if (this.Mainfile != null)
                    hashCode = hashCode * 59 + this.Mainfile.GetHashCode();
                if (this.SnmAttributes != null)
                    hashCode = hashCode * 59 + this.SnmAttributes.GetHashCode();
                hashCode = hashCode * 59 + this.IsShared.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.SharedViaTokens != null)
                    hashCode = hashCode * 59 + this.SharedViaTokens.GetHashCode();
                return hashCode;
            }
        }

    }

}
