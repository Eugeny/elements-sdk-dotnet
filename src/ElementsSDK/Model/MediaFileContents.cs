/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// MediaFileContents
    /// </summary>
    [DataContract(Name = "MediaFileContents")]
    public partial class MediaFileContents : IEquatable<MediaFileContents>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MediaFileContents" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MediaFileContents() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MediaFileContents" /> class.
        /// </summary>
        /// <param name="total">total (required).</param>
        public MediaFileContents(int total = default(int))
        {
            this.Total = total;
        }

        /// <summary>
        /// Gets or Sets Directories
        /// </summary>
        [DataMember(Name = "directories", EmitDefaultValue = false)]
        public List<MediaFile> Directories { get; private set; }

        /// <summary>
        /// Returns false as Directories should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDirectories()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Bundles
        /// </summary>
        [DataMember(Name = "bundles", EmitDefaultValue = false)]
        public List<MediaFileBundle> Bundles { get; private set; }

        /// <summary>
        /// Returns false as Bundles should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBundles()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Total
        /// </summary>
        [DataMember(Name = "total", IsRequired = true, EmitDefaultValue = false)]
        public int Total { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MediaFileContents {\n");
            sb.Append("  Directories: ").Append(Directories).Append("\n");
            sb.Append("  Bundles: ").Append(Bundles).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MediaFileContents);
        }

        /// <summary>
        /// Returns true if MediaFileContents instances are equal
        /// </summary>
        /// <param name="input">Instance of MediaFileContents to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MediaFileContents input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Directories == input.Directories ||
                    this.Directories != null &&
                    input.Directories != null &&
                    this.Directories.SequenceEqual(input.Directories)
                ) && 
                (
                    this.Bundles == input.Bundles ||
                    this.Bundles != null &&
                    input.Bundles != null &&
                    this.Bundles.SequenceEqual(input.Bundles)
                ) && 
                (
                    this.Total == input.Total ||
                    this.Total.Equals(input.Total)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Directories != null)
                    hashCode = hashCode * 59 + this.Directories.GetHashCode();
                if (this.Bundles != null)
                    hashCode = hashCode * 59 + this.Bundles.GetHashCode();
                hashCode = hashCode * 59 + this.Total.GetHashCode();
                return hashCode;
            }
        }

    }

}
