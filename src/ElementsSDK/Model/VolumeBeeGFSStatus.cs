/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// VolumeBeeGFSStatus
    /// </summary>
    [DataContract(Name = "VolumeBeeGFSStatus")]
    public partial class VolumeBeeGFSStatus : IEquatable<VolumeBeeGFSStatus>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VolumeBeeGFSStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VolumeBeeGFSStatus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VolumeBeeGFSStatus" /> class.
        /// </summary>
        /// <param name="nodes">nodes (required).</param>
        /// <param name="targets">targets (required).</param>
        public VolumeBeeGFSStatus(List<BeeGFSNode> nodes = default(List<BeeGFSNode>), List<BeeGFSTarget> targets = default(List<BeeGFSTarget>))
        {
            // to ensure "nodes" is required (not null)
            this.Nodes = nodes ?? throw new ArgumentNullException("nodes is a required property for VolumeBeeGFSStatus and cannot be null");
            // to ensure "targets" is required (not null)
            this.Targets = targets ?? throw new ArgumentNullException("targets is a required property for VolumeBeeGFSStatus and cannot be null");
        }

        /// <summary>
        /// Gets or Sets Nodes
        /// </summary>
        [DataMember(Name = "nodes", IsRequired = true, EmitDefaultValue = false)]
        public List<BeeGFSNode> Nodes { get; set; }

        /// <summary>
        /// Gets or Sets Targets
        /// </summary>
        [DataMember(Name = "targets", IsRequired = true, EmitDefaultValue = false)]
        public List<BeeGFSTarget> Targets { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VolumeBeeGFSStatus {\n");
            sb.Append("  Nodes: ").Append(Nodes).Append("\n");
            sb.Append("  Targets: ").Append(Targets).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VolumeBeeGFSStatus);
        }

        /// <summary>
        /// Returns true if VolumeBeeGFSStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of VolumeBeeGFSStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VolumeBeeGFSStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Nodes == input.Nodes ||
                    this.Nodes != null &&
                    input.Nodes != null &&
                    this.Nodes.SequenceEqual(input.Nodes)
                ) && 
                (
                    this.Targets == input.Targets ||
                    this.Targets != null &&
                    input.Targets != null &&
                    this.Targets.SequenceEqual(input.Targets)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Nodes != null)
                    hashCode = hashCode * 59 + this.Nodes.GetHashCode();
                if (this.Targets != null)
                    hashCode = hashCode * 59 + this.Targets.GetHashCode();
                return hashCode;
            }
        }

    }

}
