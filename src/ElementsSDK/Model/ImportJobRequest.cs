/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// ImportJobRequest
    /// </summary>
    [DataContract(Name = "ImportJobRequest")]
    public partial class ImportJobRequest : IEquatable<ImportJobRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImportJobRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ImportJobRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ImportJobRequest" /> class.
        /// </summary>
        /// <param name="content">content (required).</param>
        /// <param name="replace">replace (required).</param>
        /// <param name="rename">rename.</param>
        public ImportJobRequest(string content = default(string), bool replace = default(bool), string rename = default(string))
        {
            // to ensure "content" is required (not null)
            this.Content = content ?? throw new ArgumentNullException("content is a required property for ImportJobRequest and cannot be null");
            this.Replace = replace;
            this.Rename = rename;
        }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [DataMember(Name = "content", IsRequired = true, EmitDefaultValue = false)]
        public string Content { get; set; }

        /// <summary>
        /// Gets or Sets Replace
        /// </summary>
        [DataMember(Name = "replace", IsRequired = true, EmitDefaultValue = true)]
        public bool Replace { get; set; }

        /// <summary>
        /// Gets or Sets Rename
        /// </summary>
        [DataMember(Name = "rename", EmitDefaultValue = false)]
        public string Rename { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImportJobRequest {\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Replace: ").Append(Replace).Append("\n");
            sb.Append("  Rename: ").Append(Rename).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ImportJobRequest);
        }

        /// <summary>
        /// Returns true if ImportJobRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ImportJobRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportJobRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                ) && 
                (
                    this.Replace == input.Replace ||
                    this.Replace.Equals(input.Replace)
                ) && 
                (
                    this.Rename == input.Rename ||
                    (this.Rename != null &&
                    this.Rename.Equals(input.Rename))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Content != null)
                    hashCode = hashCode * 59 + this.Content.GetHashCode();
                hashCode = hashCode * 59 + this.Replace.GetHashCode();
                if (this.Rename != null)
                    hashCode = hashCode * 59 + this.Rename.GetHashCode();
                return hashCode;
            }
        }

    }

}
