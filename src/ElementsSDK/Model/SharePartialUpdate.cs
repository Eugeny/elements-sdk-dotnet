/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// SharePartialUpdate
    /// </summary>
    [DataContract(Name = "SharePartialUpdate")]
    public partial class SharePartialUpdate : IEquatable<SharePartialUpdate>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharePartialUpdate" /> class.
        /// </summary>
        /// <param name="sharingNfsPermissions">sharingNfsPermissions.</param>
        /// <param name="volume">volume.</param>
        /// <param name="name">name.</param>
        /// <param name="path">path.</param>
        /// <param name="shareSmb">shareSmb.</param>
        /// <param name="shareNfs">shareNfs.</param>
        /// <param name="shareAfp">shareAfp.</param>
        /// <param name="sharingReadOnly">sharingReadOnly.</param>
        /// <param name="sharingHidden">sharingHidden.</param>
        /// <param name="sharingRequireLogin">sharingRequireLogin.</param>
        /// <param name="smbExtraConfig">smbExtraConfig.</param>
        /// <param name="afpExtraConfig">afpExtraConfig.</param>
        /// <param name="rwAccessGroup">rwAccessGroup.</param>
        /// <param name="roAccessGroup">roAccessGroup.</param>
        public SharePartialUpdate(List<string> sharingNfsPermissions = default(List<string>), VolumeReference volume = default(VolumeReference), string name = default(string), string path = default(string), bool shareSmb = default(bool), bool shareNfs = default(bool), bool shareAfp = default(bool), bool sharingReadOnly = default(bool), bool sharingHidden = default(bool), bool sharingRequireLogin = default(bool), string smbExtraConfig = default(string), string afpExtraConfig = default(string), int? rwAccessGroup = default(int?), int? roAccessGroup = default(int?))
        {
            this.SharingNfsPermissions = sharingNfsPermissions;
            this.Volume = volume;
            this.Name = name;
            this.Path = path;
            this.ShareSmb = shareSmb;
            this.ShareNfs = shareNfs;
            this.ShareAfp = shareAfp;
            this.SharingReadOnly = sharingReadOnly;
            this.SharingHidden = sharingHidden;
            this.SharingRequireLogin = sharingRequireLogin;
            this.SmbExtraConfig = smbExtraConfig;
            this.AfpExtraConfig = afpExtraConfig;
            this.RwAccessGroup = rwAccessGroup;
            this.RoAccessGroup = roAccessGroup;
        }

        /// <summary>
        /// Gets or Sets SharingNfsPermissions
        /// </summary>
        [DataMember(Name = "sharing_nfs_permissions", EmitDefaultValue = false)]
        public List<string> SharingNfsPermissions { get; set; }

        /// <summary>
        /// Gets or Sets Volume
        /// </summary>
        [DataMember(Name = "volume", EmitDefaultValue = false)]
        public VolumeReference Volume { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name = "path", EmitDefaultValue = false)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets ShareSmb
        /// </summary>
        [DataMember(Name = "share_smb", EmitDefaultValue = true)]
        public bool ShareSmb { get; set; }

        /// <summary>
        /// Gets or Sets ShareNfs
        /// </summary>
        [DataMember(Name = "share_nfs", EmitDefaultValue = true)]
        public bool ShareNfs { get; set; }

        /// <summary>
        /// Gets or Sets ShareAfp
        /// </summary>
        [DataMember(Name = "share_afp", EmitDefaultValue = true)]
        public bool ShareAfp { get; set; }

        /// <summary>
        /// Gets or Sets SharingReadOnly
        /// </summary>
        [DataMember(Name = "sharing_read_only", EmitDefaultValue = true)]
        public bool SharingReadOnly { get; set; }

        /// <summary>
        /// Gets or Sets SharingHidden
        /// </summary>
        [DataMember(Name = "sharing_hidden", EmitDefaultValue = true)]
        public bool SharingHidden { get; set; }

        /// <summary>
        /// Gets or Sets SharingRequireLogin
        /// </summary>
        [DataMember(Name = "sharing_require_login", EmitDefaultValue = true)]
        public bool SharingRequireLogin { get; set; }

        /// <summary>
        /// Gets or Sets SmbExtraConfig
        /// </summary>
        [DataMember(Name = "smb_extra_config", EmitDefaultValue = false)]
        public string SmbExtraConfig { get; set; }

        /// <summary>
        /// Gets or Sets AfpExtraConfig
        /// </summary>
        [DataMember(Name = "afp_extra_config", EmitDefaultValue = false)]
        public string AfpExtraConfig { get; set; }

        /// <summary>
        /// Gets or Sets RwAccessGroup
        /// </summary>
        [DataMember(Name = "rw_access_group", EmitDefaultValue = true)]
        public int? RwAccessGroup { get; set; }

        /// <summary>
        /// Gets or Sets RoAccessGroup
        /// </summary>
        [DataMember(Name = "ro_access_group", EmitDefaultValue = true)]
        public int? RoAccessGroup { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SharePartialUpdate {\n");
            sb.Append("  SharingNfsPermissions: ").Append(SharingNfsPermissions).Append("\n");
            sb.Append("  Volume: ").Append(Volume).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  ShareSmb: ").Append(ShareSmb).Append("\n");
            sb.Append("  ShareNfs: ").Append(ShareNfs).Append("\n");
            sb.Append("  ShareAfp: ").Append(ShareAfp).Append("\n");
            sb.Append("  SharingReadOnly: ").Append(SharingReadOnly).Append("\n");
            sb.Append("  SharingHidden: ").Append(SharingHidden).Append("\n");
            sb.Append("  SharingRequireLogin: ").Append(SharingRequireLogin).Append("\n");
            sb.Append("  SmbExtraConfig: ").Append(SmbExtraConfig).Append("\n");
            sb.Append("  AfpExtraConfig: ").Append(AfpExtraConfig).Append("\n");
            sb.Append("  RwAccessGroup: ").Append(RwAccessGroup).Append("\n");
            sb.Append("  RoAccessGroup: ").Append(RoAccessGroup).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SharePartialUpdate);
        }

        /// <summary>
        /// Returns true if SharePartialUpdate instances are equal
        /// </summary>
        /// <param name="input">Instance of SharePartialUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SharePartialUpdate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SharingNfsPermissions == input.SharingNfsPermissions ||
                    this.SharingNfsPermissions != null &&
                    input.SharingNfsPermissions != null &&
                    this.SharingNfsPermissions.SequenceEqual(input.SharingNfsPermissions)
                ) && 
                (
                    this.Volume == input.Volume ||
                    (this.Volume != null &&
                    this.Volume.Equals(input.Volume))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.ShareSmb == input.ShareSmb ||
                    this.ShareSmb.Equals(input.ShareSmb)
                ) && 
                (
                    this.ShareNfs == input.ShareNfs ||
                    this.ShareNfs.Equals(input.ShareNfs)
                ) && 
                (
                    this.ShareAfp == input.ShareAfp ||
                    this.ShareAfp.Equals(input.ShareAfp)
                ) && 
                (
                    this.SharingReadOnly == input.SharingReadOnly ||
                    this.SharingReadOnly.Equals(input.SharingReadOnly)
                ) && 
                (
                    this.SharingHidden == input.SharingHidden ||
                    this.SharingHidden.Equals(input.SharingHidden)
                ) && 
                (
                    this.SharingRequireLogin == input.SharingRequireLogin ||
                    this.SharingRequireLogin.Equals(input.SharingRequireLogin)
                ) && 
                (
                    this.SmbExtraConfig == input.SmbExtraConfig ||
                    (this.SmbExtraConfig != null &&
                    this.SmbExtraConfig.Equals(input.SmbExtraConfig))
                ) && 
                (
                    this.AfpExtraConfig == input.AfpExtraConfig ||
                    (this.AfpExtraConfig != null &&
                    this.AfpExtraConfig.Equals(input.AfpExtraConfig))
                ) && 
                (
                    this.RwAccessGroup == input.RwAccessGroup ||
                    (this.RwAccessGroup != null &&
                    this.RwAccessGroup.Equals(input.RwAccessGroup))
                ) && 
                (
                    this.RoAccessGroup == input.RoAccessGroup ||
                    (this.RoAccessGroup != null &&
                    this.RoAccessGroup.Equals(input.RoAccessGroup))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SharingNfsPermissions != null)
                    hashCode = hashCode * 59 + this.SharingNfsPermissions.GetHashCode();
                if (this.Volume != null)
                    hashCode = hashCode * 59 + this.Volume.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                hashCode = hashCode * 59 + this.ShareSmb.GetHashCode();
                hashCode = hashCode * 59 + this.ShareNfs.GetHashCode();
                hashCode = hashCode * 59 + this.ShareAfp.GetHashCode();
                hashCode = hashCode * 59 + this.SharingReadOnly.GetHashCode();
                hashCode = hashCode * 59 + this.SharingHidden.GetHashCode();
                hashCode = hashCode * 59 + this.SharingRequireLogin.GetHashCode();
                if (this.SmbExtraConfig != null)
                    hashCode = hashCode * 59 + this.SmbExtraConfig.GetHashCode();
                if (this.AfpExtraConfig != null)
                    hashCode = hashCode * 59 + this.AfpExtraConfig.GetHashCode();
                if (this.RwAccessGroup != null)
                    hashCode = hashCode * 59 + this.RwAccessGroup.GetHashCode();
                if (this.RoAccessGroup != null)
                    hashCode = hashCode * 59 + this.RoAccessGroup.GetHashCode();
                return hashCode;
            }
        }

    }

}
