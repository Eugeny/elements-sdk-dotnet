/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// Workspace
    /// </summary>
    [DataContract(Name = "Workspace")]
    public partial class Workspace : IEquatable<Workspace>
    {
        /// <summary>
        /// Defines MacProtocol
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MacProtocolEnum
        {
            /// <summary>
            /// Enum Smb for value: smb
            /// </summary>
            [EnumMember(Value = "smb")]
            Smb = 1,

            /// <summary>
            /// Enum Afp for value: afp
            /// </summary>
            [EnumMember(Value = "afp")]
            Afp = 2,

            /// <summary>
            /// Enum Nfs for value: nfs
            /// </summary>
            [EnumMember(Value = "nfs")]
            Nfs = 3,

            /// <summary>
            /// Enum Omfs for value: omfs
            /// </summary>
            [EnumMember(Value = "omfs")]
            Omfs = 4

        }


        /// <summary>
        /// Gets or Sets MacProtocol
        /// </summary>
        [DataMember(Name = "mac_protocol", EmitDefaultValue = false)]
        public MacProtocolEnum? MacProtocol { get; set; }
        /// <summary>
        /// Defines WinProtocol
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum WinProtocolEnum
        {
            /// <summary>
            /// Enum Disk for value: disk
            /// </summary>
            [EnumMember(Value = "disk")]
            Disk = 1,

            /// <summary>
            /// Enum Unc for value: unc
            /// </summary>
            [EnumMember(Value = "unc")]
            Unc = 2

        }


        /// <summary>
        /// Gets or Sets WinProtocol
        /// </summary>
        [DataMember(Name = "win_protocol", EmitDefaultValue = false)]
        public WinProtocolEnum? WinProtocol { get; set; }
        /// <summary>
        /// Defines WinDrive
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum WinDriveEnum
        {
            /// <summary>
            /// Enum A for value: a
            /// </summary>
            [EnumMember(Value = "a")]
            A = 1,

            /// <summary>
            /// Enum B for value: b
            /// </summary>
            [EnumMember(Value = "b")]
            B = 2,

            /// <summary>
            /// Enum C for value: c
            /// </summary>
            [EnumMember(Value = "c")]
            C = 3,

            /// <summary>
            /// Enum D for value: d
            /// </summary>
            [EnumMember(Value = "d")]
            D = 4,

            /// <summary>
            /// Enum E for value: e
            /// </summary>
            [EnumMember(Value = "e")]
            E = 5,

            /// <summary>
            /// Enum F for value: f
            /// </summary>
            [EnumMember(Value = "f")]
            F = 6,

            /// <summary>
            /// Enum G for value: g
            /// </summary>
            [EnumMember(Value = "g")]
            G = 7,

            /// <summary>
            /// Enum H for value: h
            /// </summary>
            [EnumMember(Value = "h")]
            H = 8,

            /// <summary>
            /// Enum I for value: i
            /// </summary>
            [EnumMember(Value = "i")]
            I = 9,

            /// <summary>
            /// Enum J for value: j
            /// </summary>
            [EnumMember(Value = "j")]
            J = 10,

            /// <summary>
            /// Enum K for value: k
            /// </summary>
            [EnumMember(Value = "k")]
            K = 11,

            /// <summary>
            /// Enum L for value: l
            /// </summary>
            [EnumMember(Value = "l")]
            L = 12,

            /// <summary>
            /// Enum M for value: m
            /// </summary>
            [EnumMember(Value = "m")]
            M = 13,

            /// <summary>
            /// Enum N for value: n
            /// </summary>
            [EnumMember(Value = "n")]
            N = 14,

            /// <summary>
            /// Enum O for value: o
            /// </summary>
            [EnumMember(Value = "o")]
            O = 15,

            /// <summary>
            /// Enum P for value: p
            /// </summary>
            [EnumMember(Value = "p")]
            P = 16,

            /// <summary>
            /// Enum Q for value: q
            /// </summary>
            [EnumMember(Value = "q")]
            Q = 17,

            /// <summary>
            /// Enum R for value: r
            /// </summary>
            [EnumMember(Value = "r")]
            R = 18,

            /// <summary>
            /// Enum S for value: s
            /// </summary>
            [EnumMember(Value = "s")]
            S = 19,

            /// <summary>
            /// Enum T for value: t
            /// </summary>
            [EnumMember(Value = "t")]
            T = 20,

            /// <summary>
            /// Enum U for value: u
            /// </summary>
            [EnumMember(Value = "u")]
            U = 21,

            /// <summary>
            /// Enum V for value: v
            /// </summary>
            [EnumMember(Value = "v")]
            V = 22,

            /// <summary>
            /// Enum W for value: w
            /// </summary>
            [EnumMember(Value = "w")]
            W = 23,

            /// <summary>
            /// Enum X for value: x
            /// </summary>
            [EnumMember(Value = "x")]
            X = 24,

            /// <summary>
            /// Enum Y for value: y
            /// </summary>
            [EnumMember(Value = "y")]
            Y = 25,

            /// <summary>
            /// Enum Z for value: z
            /// </summary>
            [EnumMember(Value = "z")]
            Z = 26

        }


        /// <summary>
        /// Gets or Sets WinDrive
        /// </summary>
        [DataMember(Name = "win_drive", EmitDefaultValue = true)]
        public WinDriveEnum? WinDrive { get; set; }
        /// <summary>
        /// Defines LinuxProtocol
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LinuxProtocolEnum
        {
            /// <summary>
            /// Enum Smb for value: smb
            /// </summary>
            [EnumMember(Value = "smb")]
            Smb = 1,

            /// <summary>
            /// Enum Nfs for value: nfs
            /// </summary>
            [EnumMember(Value = "nfs")]
            Nfs = 2

        }


        /// <summary>
        /// Gets or Sets LinuxProtocol
        /// </summary>
        [DataMember(Name = "linux_protocol", EmitDefaultValue = false)]
        public LinuxProtocolEnum? LinuxProtocol { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Workspace" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Workspace() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Workspace" /> class.
        /// </summary>
        /// <param name="production">production (required).</param>
        /// <param name="volume">volume.</param>
        /// <param name="sharingNfsPermissions">sharingNfsPermissions.</param>
        /// <param name="quota">quota.</param>
        /// <param name="name">name.</param>
        /// <param name="description">description.</param>
        /// <param name="longDescription">longDescription.</param>
        /// <param name="isTemplate">isTemplate.</param>
        /// <param name="active">active.</param>
        /// <param name="macProtocol">macProtocol.</param>
        /// <param name="winProtocol">winProtocol.</param>
        /// <param name="winDrive">winDrive.</param>
        /// <param name="linuxProtocol">linuxProtocol.</param>
        /// <param name="linuxMountpoint">linuxMountpoint.</param>
        /// <param name="shareName">shareName.</param>
        /// <param name="shareNfs">shareNfs.</param>
        /// <param name="shareAfp">shareAfp.</param>
        /// <param name="sharingHidden">sharingHidden.</param>
        /// <param name="sharingRequireLogin">sharingRequireLogin.</param>
        /// <param name="sharingReadOnly">sharingReadOnly.</param>
        /// <param name="sharingAllowExecute">sharingAllowExecute.</param>
        /// <param name="enableQuota">enableQuota.</param>
        /// <param name="quotaSizeHard">quotaSizeHard.</param>
        /// <param name="quotaSizeSoft">quotaSizeSoft.</param>
        /// <param name="affinity">affinity.</param>
        /// <param name="emulateAvid">emulateAvid.</param>
        /// <param name="emulateCapture">emulateCapture.</param>
        /// <param name="emulatePreopen">emulatePreopen.</param>
        /// <param name="emulateNtfsStreams">emulateNtfsStreams.</param>
        /// <param name="emulateRecycleBin">emulateRecycleBin.</param>
        /// <param name="emulateFruit">emulateFruit.</param>
        /// <param name="smbExtraConfig">smbExtraConfig.</param>
        /// <param name="afpExtraConfig">afpExtraConfig.</param>
        /// <param name="recycleBinExclude">recycleBinExclude.</param>
        /// <param name="isExternal">isExternal.</param>
        /// <param name="externalMacUrl">externalMacUrl.</param>
        /// <param name="externalWinUrl">externalWinUrl.</param>
        /// <param name="externalLinuxUrl">externalLinuxUrl.</param>
        /// <param name="allowSymlinks">allowSymlinks.</param>
        /// <param name="rwPermissionPriority">rwPermissionPriority.</param>
        /// <param name="template">template.</param>
        public Workspace(ProductionMiniReference production = default(ProductionMiniReference), VolumeMiniReference volume = default(VolumeMiniReference), List<string> sharingNfsPermissions = default(List<string>), Quota quota = default(Quota), string name = default(string), string description = default(string), string longDescription = default(string), bool isTemplate = default(bool), bool active = default(bool), MacProtocolEnum? macProtocol = default(MacProtocolEnum?), WinProtocolEnum? winProtocol = default(WinProtocolEnum?), WinDriveEnum? winDrive = default(WinDriveEnum?), LinuxProtocolEnum? linuxProtocol = default(LinuxProtocolEnum?), string linuxMountpoint = default(string), string shareName = default(string), bool shareNfs = default(bool), bool shareAfp = default(bool), bool sharingHidden = default(bool), bool sharingRequireLogin = default(bool), bool sharingReadOnly = default(bool), bool sharingAllowExecute = default(bool), bool enableQuota = default(bool), int quotaSizeHard = default(int), int quotaSizeSoft = default(int), string affinity = default(string), bool emulateAvid = default(bool), bool emulateCapture = default(bool), bool emulatePreopen = default(bool), bool emulateNtfsStreams = default(bool), bool emulateRecycleBin = default(bool), bool emulateFruit = default(bool), string smbExtraConfig = default(string), string afpExtraConfig = default(string), string recycleBinExclude = default(string), bool isExternal = default(bool), string externalMacUrl = default(string), string externalWinUrl = default(string), string externalLinuxUrl = default(string), bool allowSymlinks = default(bool), bool rwPermissionPriority = default(bool), int? template = default(int?))
        {
            // to ensure "production" is required (not null)
            this.Production = production ?? throw new ArgumentNullException("production is a required property for Workspace and cannot be null");
            this.Volume = volume;
            this.SharingNfsPermissions = sharingNfsPermissions;
            this.Quota = quota;
            this.Name = name;
            this.Description = description;
            this.LongDescription = longDescription;
            this.IsTemplate = isTemplate;
            this.Active = active;
            this.MacProtocol = macProtocol;
            this.WinProtocol = winProtocol;
            this.WinDrive = winDrive;
            this.LinuxProtocol = linuxProtocol;
            this.LinuxMountpoint = linuxMountpoint;
            this.ShareName = shareName;
            this.ShareNfs = shareNfs;
            this.ShareAfp = shareAfp;
            this.SharingHidden = sharingHidden;
            this.SharingRequireLogin = sharingRequireLogin;
            this.SharingReadOnly = sharingReadOnly;
            this.SharingAllowExecute = sharingAllowExecute;
            this.EnableQuota = enableQuota;
            this.QuotaSizeHard = quotaSizeHard;
            this.QuotaSizeSoft = quotaSizeSoft;
            this.Affinity = affinity;
            this.EmulateAvid = emulateAvid;
            this.EmulateCapture = emulateCapture;
            this.EmulatePreopen = emulatePreopen;
            this.EmulateNtfsStreams = emulateNtfsStreams;
            this.EmulateRecycleBin = emulateRecycleBin;
            this.EmulateFruit = emulateFruit;
            this.SmbExtraConfig = smbExtraConfig;
            this.AfpExtraConfig = afpExtraConfig;
            this.RecycleBinExclude = recycleBinExclude;
            this.IsExternal = isExternal;
            this.ExternalMacUrl = externalMacUrl;
            this.ExternalWinUrl = externalWinUrl;
            this.ExternalLinuxUrl = externalLinuxUrl;
            this.AllowSymlinks = allowSymlinks;
            this.RwPermissionPriority = rwPermissionPriority;
            this.Template = template;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Production
        /// </summary>
        [DataMember(Name = "production", IsRequired = true, EmitDefaultValue = false)]
        public ProductionMiniReference Production { get; set; }

        /// <summary>
        /// Gets or Sets Volume
        /// </summary>
        [DataMember(Name = "volume", EmitDefaultValue = false)]
        public VolumeMiniReference Volume { get; set; }

        /// <summary>
        /// Gets or Sets VolumePath
        /// </summary>
        [DataMember(Name = "volume_path", EmitDefaultValue = false)]
        public string VolumePath { get; private set; }

        /// <summary>
        /// Returns false as VolumePath should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVolumePath()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name = "path", EmitDefaultValue = false)]
        public string Path { get; private set; }

        /// <summary>
        /// Returns false as Path should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePath()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets SharingNfsPermissions
        /// </summary>
        [DataMember(Name = "sharing_nfs_permissions", EmitDefaultValue = false)]
        public List<string> SharingNfsPermissions { get; set; }

        /// <summary>
        /// Gets or Sets FullPath
        /// </summary>
        [DataMember(Name = "full_path", EmitDefaultValue = false)]
        public string FullPath { get; private set; }

        /// <summary>
        /// Returns false as FullPath should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFullPath()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets CurrentShareName
        /// </summary>
        [DataMember(Name = "current_share_name", EmitDefaultValue = false)]
        public string CurrentShareName { get; private set; }

        /// <summary>
        /// Returns false as CurrentShareName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCurrentShareName()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Endpoints
        /// </summary>
        [DataMember(Name = "endpoints", EmitDefaultValue = false)]
        public List<WorkspaceEndpoint> Endpoints { get; private set; }

        /// <summary>
        /// Returns false as Endpoints should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEndpoints()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Quota
        /// </summary>
        [DataMember(Name = "quota", EmitDefaultValue = false)]
        public Quota Quota { get; set; }

        /// <summary>
        /// Gets or Sets SizeUsed
        /// </summary>
        [DataMember(Name = "size_used", EmitDefaultValue = false)]
        public int SizeUsed { get; private set; }

        /// <summary>
        /// Returns false as SizeUsed should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSizeUsed()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets SizeTotal
        /// </summary>
        [DataMember(Name = "size_total", EmitDefaultValue = false)]
        public int SizeTotal { get; private set; }

        /// <summary>
        /// Returns false as SizeTotal should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSizeTotal()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Bookmarked
        /// </summary>
        [DataMember(Name = "bookmarked", EmitDefaultValue = true)]
        public bool Bookmarked { get; private set; }

        /// <summary>
        /// Returns false as Bookmarked should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBookmarked()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets ResolvedPermissions
        /// </summary>
        [DataMember(Name = "resolved_permissions", EmitDefaultValue = false)]
        public List<WorkspaceResolvedPermission> ResolvedPermissions { get; private set; }

        /// <summary>
        /// Returns false as ResolvedPermissions should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeResolvedPermissions()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets ResolvedReadOnly
        /// </summary>
        [DataMember(Name = "resolved_read_only", EmitDefaultValue = true)]
        public bool ResolvedReadOnly { get; private set; }

        /// <summary>
        /// Returns false as ResolvedReadOnly should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeResolvedReadOnly()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Directory
        /// </summary>
        [DataMember(Name = "directory", EmitDefaultValue = false)]
        public string Directory { get; private set; }

        /// <summary>
        /// Returns false as Directory should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDirectory()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets LongDescription
        /// </summary>
        [DataMember(Name = "long_description", EmitDefaultValue = false)]
        public string LongDescription { get; set; }

        /// <summary>
        /// Gets or Sets IsTemplate
        /// </summary>
        [DataMember(Name = "is_template", EmitDefaultValue = true)]
        public bool IsTemplate { get; set; }

        /// <summary>
        /// Gets or Sets LastLogin
        /// </summary>
        [DataMember(Name = "last_login", EmitDefaultValue = false)]
        public DateTime LastLogin { get; private set; }

        /// <summary>
        /// Returns false as LastLogin should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLastLogin()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// Gets or Sets LinuxMountpoint
        /// </summary>
        [DataMember(Name = "linux_mountpoint", EmitDefaultValue = true)]
        public string LinuxMountpoint { get; set; }

        /// <summary>
        /// Gets or Sets ShareName
        /// </summary>
        [DataMember(Name = "share_name", EmitDefaultValue = true)]
        public string ShareName { get; set; }

        /// <summary>
        /// Gets or Sets ShareNfs
        /// </summary>
        [DataMember(Name = "share_nfs", EmitDefaultValue = true)]
        public bool ShareNfs { get; set; }

        /// <summary>
        /// Gets or Sets ShareAfp
        /// </summary>
        [DataMember(Name = "share_afp", EmitDefaultValue = true)]
        public bool ShareAfp { get; set; }

        /// <summary>
        /// Gets or Sets SharingHidden
        /// </summary>
        [DataMember(Name = "sharing_hidden", EmitDefaultValue = true)]
        public bool SharingHidden { get; set; }

        /// <summary>
        /// Gets or Sets SharingRequireLogin
        /// </summary>
        [DataMember(Name = "sharing_require_login", EmitDefaultValue = true)]
        public bool SharingRequireLogin { get; set; }

        /// <summary>
        /// Gets or Sets SharingReadOnly
        /// </summary>
        [DataMember(Name = "sharing_read_only", EmitDefaultValue = true)]
        public bool SharingReadOnly { get; set; }

        /// <summary>
        /// Gets or Sets SharingAllowExecute
        /// </summary>
        [DataMember(Name = "sharing_allow_execute", EmitDefaultValue = true)]
        public bool SharingAllowExecute { get; set; }

        /// <summary>
        /// Gets or Sets EnableQuota
        /// </summary>
        [DataMember(Name = "enable_quota", EmitDefaultValue = true)]
        public bool EnableQuota { get; set; }

        /// <summary>
        /// Gets or Sets QuotaSizeHard
        /// </summary>
        [DataMember(Name = "quota_size_hard", EmitDefaultValue = false)]
        public int QuotaSizeHard { get; set; }

        /// <summary>
        /// Gets or Sets QuotaSizeSoft
        /// </summary>
        [DataMember(Name = "quota_size_soft", EmitDefaultValue = false)]
        public int QuotaSizeSoft { get; set; }

        /// <summary>
        /// Gets or Sets Affinity
        /// </summary>
        [DataMember(Name = "affinity", EmitDefaultValue = true)]
        public string Affinity { get; set; }

        /// <summary>
        /// Gets or Sets EmulateAvid
        /// </summary>
        [DataMember(Name = "emulate_avid", EmitDefaultValue = true)]
        public bool EmulateAvid { get; set; }

        /// <summary>
        /// Gets or Sets EmulateCapture
        /// </summary>
        [DataMember(Name = "emulate_capture", EmitDefaultValue = true)]
        public bool EmulateCapture { get; set; }

        /// <summary>
        /// Gets or Sets EmulatePreopen
        /// </summary>
        [DataMember(Name = "emulate_preopen", EmitDefaultValue = true)]
        public bool EmulatePreopen { get; set; }

        /// <summary>
        /// Gets or Sets EmulateNtfsStreams
        /// </summary>
        [DataMember(Name = "emulate_ntfs_streams", EmitDefaultValue = true)]
        public bool EmulateNtfsStreams { get; set; }

        /// <summary>
        /// Gets or Sets EmulateRecycleBin
        /// </summary>
        [DataMember(Name = "emulate_recycle_bin", EmitDefaultValue = true)]
        public bool EmulateRecycleBin { get; set; }

        /// <summary>
        /// Gets or Sets EmulateFruit
        /// </summary>
        [DataMember(Name = "emulate_fruit", EmitDefaultValue = true)]
        public bool EmulateFruit { get; set; }

        /// <summary>
        /// Gets or Sets SmbExtraConfig
        /// </summary>
        [DataMember(Name = "smb_extra_config", EmitDefaultValue = false)]
        public string SmbExtraConfig { get; set; }

        /// <summary>
        /// Gets or Sets AfpExtraConfig
        /// </summary>
        [DataMember(Name = "afp_extra_config", EmitDefaultValue = false)]
        public string AfpExtraConfig { get; set; }

        /// <summary>
        /// Gets or Sets RecycleBinExclude
        /// </summary>
        [DataMember(Name = "recycle_bin_exclude", EmitDefaultValue = true)]
        public string RecycleBinExclude { get; set; }

        /// <summary>
        /// Gets or Sets IsExternal
        /// </summary>
        [DataMember(Name = "is_external", EmitDefaultValue = true)]
        public bool IsExternal { get; set; }

        /// <summary>
        /// Gets or Sets ExternalMacUrl
        /// </summary>
        [DataMember(Name = "external_mac_url", EmitDefaultValue = true)]
        public string ExternalMacUrl { get; set; }

        /// <summary>
        /// Gets or Sets ExternalWinUrl
        /// </summary>
        [DataMember(Name = "external_win_url", EmitDefaultValue = true)]
        public string ExternalWinUrl { get; set; }

        /// <summary>
        /// Gets or Sets ExternalLinuxUrl
        /// </summary>
        [DataMember(Name = "external_linux_url", EmitDefaultValue = true)]
        public string ExternalLinuxUrl { get; set; }

        /// <summary>
        /// Gets or Sets AllowSymlinks
        /// </summary>
        [DataMember(Name = "allow_symlinks", EmitDefaultValue = true)]
        public bool AllowSymlinks { get; set; }

        /// <summary>
        /// Gets or Sets RwPermissionPriority
        /// </summary>
        [DataMember(Name = "rw_permission_priority", EmitDefaultValue = true)]
        public bool RwPermissionPriority { get; set; }

        /// <summary>
        /// Gets or Sets Template
        /// </summary>
        [DataMember(Name = "template", EmitDefaultValue = true)]
        public int? Template { get; set; }

        /// <summary>
        /// Gets or Sets HomeFor
        /// </summary>
        [DataMember(Name = "home_for", EmitDefaultValue = false)]
        public int HomeFor { get; private set; }

        /// <summary>
        /// Returns false as HomeFor should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHomeFor()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Workspace {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Production: ").Append(Production).Append("\n");
            sb.Append("  Volume: ").Append(Volume).Append("\n");
            sb.Append("  VolumePath: ").Append(VolumePath).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  SharingNfsPermissions: ").Append(SharingNfsPermissions).Append("\n");
            sb.Append("  FullPath: ").Append(FullPath).Append("\n");
            sb.Append("  CurrentShareName: ").Append(CurrentShareName).Append("\n");
            sb.Append("  Endpoints: ").Append(Endpoints).Append("\n");
            sb.Append("  Quota: ").Append(Quota).Append("\n");
            sb.Append("  SizeUsed: ").Append(SizeUsed).Append("\n");
            sb.Append("  SizeTotal: ").Append(SizeTotal).Append("\n");
            sb.Append("  Bookmarked: ").Append(Bookmarked).Append("\n");
            sb.Append("  ResolvedPermissions: ").Append(ResolvedPermissions).Append("\n");
            sb.Append("  ResolvedReadOnly: ").Append(ResolvedReadOnly).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Directory: ").Append(Directory).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  LongDescription: ").Append(LongDescription).Append("\n");
            sb.Append("  IsTemplate: ").Append(IsTemplate).Append("\n");
            sb.Append("  LastLogin: ").Append(LastLogin).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  MacProtocol: ").Append(MacProtocol).Append("\n");
            sb.Append("  WinProtocol: ").Append(WinProtocol).Append("\n");
            sb.Append("  WinDrive: ").Append(WinDrive).Append("\n");
            sb.Append("  LinuxProtocol: ").Append(LinuxProtocol).Append("\n");
            sb.Append("  LinuxMountpoint: ").Append(LinuxMountpoint).Append("\n");
            sb.Append("  ShareName: ").Append(ShareName).Append("\n");
            sb.Append("  ShareNfs: ").Append(ShareNfs).Append("\n");
            sb.Append("  ShareAfp: ").Append(ShareAfp).Append("\n");
            sb.Append("  SharingHidden: ").Append(SharingHidden).Append("\n");
            sb.Append("  SharingRequireLogin: ").Append(SharingRequireLogin).Append("\n");
            sb.Append("  SharingReadOnly: ").Append(SharingReadOnly).Append("\n");
            sb.Append("  SharingAllowExecute: ").Append(SharingAllowExecute).Append("\n");
            sb.Append("  EnableQuota: ").Append(EnableQuota).Append("\n");
            sb.Append("  QuotaSizeHard: ").Append(QuotaSizeHard).Append("\n");
            sb.Append("  QuotaSizeSoft: ").Append(QuotaSizeSoft).Append("\n");
            sb.Append("  Affinity: ").Append(Affinity).Append("\n");
            sb.Append("  EmulateAvid: ").Append(EmulateAvid).Append("\n");
            sb.Append("  EmulateCapture: ").Append(EmulateCapture).Append("\n");
            sb.Append("  EmulatePreopen: ").Append(EmulatePreopen).Append("\n");
            sb.Append("  EmulateNtfsStreams: ").Append(EmulateNtfsStreams).Append("\n");
            sb.Append("  EmulateRecycleBin: ").Append(EmulateRecycleBin).Append("\n");
            sb.Append("  EmulateFruit: ").Append(EmulateFruit).Append("\n");
            sb.Append("  SmbExtraConfig: ").Append(SmbExtraConfig).Append("\n");
            sb.Append("  AfpExtraConfig: ").Append(AfpExtraConfig).Append("\n");
            sb.Append("  RecycleBinExclude: ").Append(RecycleBinExclude).Append("\n");
            sb.Append("  IsExternal: ").Append(IsExternal).Append("\n");
            sb.Append("  ExternalMacUrl: ").Append(ExternalMacUrl).Append("\n");
            sb.Append("  ExternalWinUrl: ").Append(ExternalWinUrl).Append("\n");
            sb.Append("  ExternalLinuxUrl: ").Append(ExternalLinuxUrl).Append("\n");
            sb.Append("  AllowSymlinks: ").Append(AllowSymlinks).Append("\n");
            sb.Append("  RwPermissionPriority: ").Append(RwPermissionPriority).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  HomeFor: ").Append(HomeFor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Workspace);
        }

        /// <summary>
        /// Returns true if Workspace instances are equal
        /// </summary>
        /// <param name="input">Instance of Workspace to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Workspace input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Production == input.Production ||
                    (this.Production != null &&
                    this.Production.Equals(input.Production))
                ) && 
                (
                    this.Volume == input.Volume ||
                    (this.Volume != null &&
                    this.Volume.Equals(input.Volume))
                ) && 
                (
                    this.VolumePath == input.VolumePath ||
                    (this.VolumePath != null &&
                    this.VolumePath.Equals(input.VolumePath))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.SharingNfsPermissions == input.SharingNfsPermissions ||
                    this.SharingNfsPermissions != null &&
                    input.SharingNfsPermissions != null &&
                    this.SharingNfsPermissions.SequenceEqual(input.SharingNfsPermissions)
                ) && 
                (
                    this.FullPath == input.FullPath ||
                    (this.FullPath != null &&
                    this.FullPath.Equals(input.FullPath))
                ) && 
                (
                    this.CurrentShareName == input.CurrentShareName ||
                    (this.CurrentShareName != null &&
                    this.CurrentShareName.Equals(input.CurrentShareName))
                ) && 
                (
                    this.Endpoints == input.Endpoints ||
                    this.Endpoints != null &&
                    input.Endpoints != null &&
                    this.Endpoints.SequenceEqual(input.Endpoints)
                ) && 
                (
                    this.Quota == input.Quota ||
                    (this.Quota != null &&
                    this.Quota.Equals(input.Quota))
                ) && 
                (
                    this.SizeUsed == input.SizeUsed ||
                    this.SizeUsed.Equals(input.SizeUsed)
                ) && 
                (
                    this.SizeTotal == input.SizeTotal ||
                    this.SizeTotal.Equals(input.SizeTotal)
                ) && 
                (
                    this.Bookmarked == input.Bookmarked ||
                    this.Bookmarked.Equals(input.Bookmarked)
                ) && 
                (
                    this.ResolvedPermissions == input.ResolvedPermissions ||
                    this.ResolvedPermissions != null &&
                    input.ResolvedPermissions != null &&
                    this.ResolvedPermissions.SequenceEqual(input.ResolvedPermissions)
                ) && 
                (
                    this.ResolvedReadOnly == input.ResolvedReadOnly ||
                    this.ResolvedReadOnly.Equals(input.ResolvedReadOnly)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Directory == input.Directory ||
                    (this.Directory != null &&
                    this.Directory.Equals(input.Directory))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.LongDescription == input.LongDescription ||
                    (this.LongDescription != null &&
                    this.LongDescription.Equals(input.LongDescription))
                ) && 
                (
                    this.IsTemplate == input.IsTemplate ||
                    this.IsTemplate.Equals(input.IsTemplate)
                ) && 
                (
                    this.LastLogin == input.LastLogin ||
                    (this.LastLogin != null &&
                    this.LastLogin.Equals(input.LastLogin))
                ) && 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.MacProtocol == input.MacProtocol ||
                    this.MacProtocol.Equals(input.MacProtocol)
                ) && 
                (
                    this.WinProtocol == input.WinProtocol ||
                    this.WinProtocol.Equals(input.WinProtocol)
                ) && 
                (
                    this.WinDrive == input.WinDrive ||
                    this.WinDrive.Equals(input.WinDrive)
                ) && 
                (
                    this.LinuxProtocol == input.LinuxProtocol ||
                    this.LinuxProtocol.Equals(input.LinuxProtocol)
                ) && 
                (
                    this.LinuxMountpoint == input.LinuxMountpoint ||
                    (this.LinuxMountpoint != null &&
                    this.LinuxMountpoint.Equals(input.LinuxMountpoint))
                ) && 
                (
                    this.ShareName == input.ShareName ||
                    (this.ShareName != null &&
                    this.ShareName.Equals(input.ShareName))
                ) && 
                (
                    this.ShareNfs == input.ShareNfs ||
                    this.ShareNfs.Equals(input.ShareNfs)
                ) && 
                (
                    this.ShareAfp == input.ShareAfp ||
                    this.ShareAfp.Equals(input.ShareAfp)
                ) && 
                (
                    this.SharingHidden == input.SharingHidden ||
                    this.SharingHidden.Equals(input.SharingHidden)
                ) && 
                (
                    this.SharingRequireLogin == input.SharingRequireLogin ||
                    this.SharingRequireLogin.Equals(input.SharingRequireLogin)
                ) && 
                (
                    this.SharingReadOnly == input.SharingReadOnly ||
                    this.SharingReadOnly.Equals(input.SharingReadOnly)
                ) && 
                (
                    this.SharingAllowExecute == input.SharingAllowExecute ||
                    this.SharingAllowExecute.Equals(input.SharingAllowExecute)
                ) && 
                (
                    this.EnableQuota == input.EnableQuota ||
                    this.EnableQuota.Equals(input.EnableQuota)
                ) && 
                (
                    this.QuotaSizeHard == input.QuotaSizeHard ||
                    this.QuotaSizeHard.Equals(input.QuotaSizeHard)
                ) && 
                (
                    this.QuotaSizeSoft == input.QuotaSizeSoft ||
                    this.QuotaSizeSoft.Equals(input.QuotaSizeSoft)
                ) && 
                (
                    this.Affinity == input.Affinity ||
                    (this.Affinity != null &&
                    this.Affinity.Equals(input.Affinity))
                ) && 
                (
                    this.EmulateAvid == input.EmulateAvid ||
                    this.EmulateAvid.Equals(input.EmulateAvid)
                ) && 
                (
                    this.EmulateCapture == input.EmulateCapture ||
                    this.EmulateCapture.Equals(input.EmulateCapture)
                ) && 
                (
                    this.EmulatePreopen == input.EmulatePreopen ||
                    this.EmulatePreopen.Equals(input.EmulatePreopen)
                ) && 
                (
                    this.EmulateNtfsStreams == input.EmulateNtfsStreams ||
                    this.EmulateNtfsStreams.Equals(input.EmulateNtfsStreams)
                ) && 
                (
                    this.EmulateRecycleBin == input.EmulateRecycleBin ||
                    this.EmulateRecycleBin.Equals(input.EmulateRecycleBin)
                ) && 
                (
                    this.EmulateFruit == input.EmulateFruit ||
                    this.EmulateFruit.Equals(input.EmulateFruit)
                ) && 
                (
                    this.SmbExtraConfig == input.SmbExtraConfig ||
                    (this.SmbExtraConfig != null &&
                    this.SmbExtraConfig.Equals(input.SmbExtraConfig))
                ) && 
                (
                    this.AfpExtraConfig == input.AfpExtraConfig ||
                    (this.AfpExtraConfig != null &&
                    this.AfpExtraConfig.Equals(input.AfpExtraConfig))
                ) && 
                (
                    this.RecycleBinExclude == input.RecycleBinExclude ||
                    (this.RecycleBinExclude != null &&
                    this.RecycleBinExclude.Equals(input.RecycleBinExclude))
                ) && 
                (
                    this.IsExternal == input.IsExternal ||
                    this.IsExternal.Equals(input.IsExternal)
                ) && 
                (
                    this.ExternalMacUrl == input.ExternalMacUrl ||
                    (this.ExternalMacUrl != null &&
                    this.ExternalMacUrl.Equals(input.ExternalMacUrl))
                ) && 
                (
                    this.ExternalWinUrl == input.ExternalWinUrl ||
                    (this.ExternalWinUrl != null &&
                    this.ExternalWinUrl.Equals(input.ExternalWinUrl))
                ) && 
                (
                    this.ExternalLinuxUrl == input.ExternalLinuxUrl ||
                    (this.ExternalLinuxUrl != null &&
                    this.ExternalLinuxUrl.Equals(input.ExternalLinuxUrl))
                ) && 
                (
                    this.AllowSymlinks == input.AllowSymlinks ||
                    this.AllowSymlinks.Equals(input.AllowSymlinks)
                ) && 
                (
                    this.RwPermissionPriority == input.RwPermissionPriority ||
                    this.RwPermissionPriority.Equals(input.RwPermissionPriority)
                ) && 
                (
                    this.Template == input.Template ||
                    (this.Template != null &&
                    this.Template.Equals(input.Template))
                ) && 
                (
                    this.HomeFor == input.HomeFor ||
                    this.HomeFor.Equals(input.HomeFor)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Production != null)
                    hashCode = hashCode * 59 + this.Production.GetHashCode();
                if (this.Volume != null)
                    hashCode = hashCode * 59 + this.Volume.GetHashCode();
                if (this.VolumePath != null)
                    hashCode = hashCode * 59 + this.VolumePath.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.SharingNfsPermissions != null)
                    hashCode = hashCode * 59 + this.SharingNfsPermissions.GetHashCode();
                if (this.FullPath != null)
                    hashCode = hashCode * 59 + this.FullPath.GetHashCode();
                if (this.CurrentShareName != null)
                    hashCode = hashCode * 59 + this.CurrentShareName.GetHashCode();
                if (this.Endpoints != null)
                    hashCode = hashCode * 59 + this.Endpoints.GetHashCode();
                if (this.Quota != null)
                    hashCode = hashCode * 59 + this.Quota.GetHashCode();
                hashCode = hashCode * 59 + this.SizeUsed.GetHashCode();
                hashCode = hashCode * 59 + this.SizeTotal.GetHashCode();
                hashCode = hashCode * 59 + this.Bookmarked.GetHashCode();
                if (this.ResolvedPermissions != null)
                    hashCode = hashCode * 59 + this.ResolvedPermissions.GetHashCode();
                hashCode = hashCode * 59 + this.ResolvedReadOnly.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Directory != null)
                    hashCode = hashCode * 59 + this.Directory.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.LongDescription != null)
                    hashCode = hashCode * 59 + this.LongDescription.GetHashCode();
                hashCode = hashCode * 59 + this.IsTemplate.GetHashCode();
                if (this.LastLogin != null)
                    hashCode = hashCode * 59 + this.LastLogin.GetHashCode();
                hashCode = hashCode * 59 + this.Active.GetHashCode();
                hashCode = hashCode * 59 + this.MacProtocol.GetHashCode();
                hashCode = hashCode * 59 + this.WinProtocol.GetHashCode();
                hashCode = hashCode * 59 + this.WinDrive.GetHashCode();
                hashCode = hashCode * 59 + this.LinuxProtocol.GetHashCode();
                if (this.LinuxMountpoint != null)
                    hashCode = hashCode * 59 + this.LinuxMountpoint.GetHashCode();
                if (this.ShareName != null)
                    hashCode = hashCode * 59 + this.ShareName.GetHashCode();
                hashCode = hashCode * 59 + this.ShareNfs.GetHashCode();
                hashCode = hashCode * 59 + this.ShareAfp.GetHashCode();
                hashCode = hashCode * 59 + this.SharingHidden.GetHashCode();
                hashCode = hashCode * 59 + this.SharingRequireLogin.GetHashCode();
                hashCode = hashCode * 59 + this.SharingReadOnly.GetHashCode();
                hashCode = hashCode * 59 + this.SharingAllowExecute.GetHashCode();
                hashCode = hashCode * 59 + this.EnableQuota.GetHashCode();
                hashCode = hashCode * 59 + this.QuotaSizeHard.GetHashCode();
                hashCode = hashCode * 59 + this.QuotaSizeSoft.GetHashCode();
                if (this.Affinity != null)
                    hashCode = hashCode * 59 + this.Affinity.GetHashCode();
                hashCode = hashCode * 59 + this.EmulateAvid.GetHashCode();
                hashCode = hashCode * 59 + this.EmulateCapture.GetHashCode();
                hashCode = hashCode * 59 + this.EmulatePreopen.GetHashCode();
                hashCode = hashCode * 59 + this.EmulateNtfsStreams.GetHashCode();
                hashCode = hashCode * 59 + this.EmulateRecycleBin.GetHashCode();
                hashCode = hashCode * 59 + this.EmulateFruit.GetHashCode();
                if (this.SmbExtraConfig != null)
                    hashCode = hashCode * 59 + this.SmbExtraConfig.GetHashCode();
                if (this.AfpExtraConfig != null)
                    hashCode = hashCode * 59 + this.AfpExtraConfig.GetHashCode();
                if (this.RecycleBinExclude != null)
                    hashCode = hashCode * 59 + this.RecycleBinExclude.GetHashCode();
                hashCode = hashCode * 59 + this.IsExternal.GetHashCode();
                if (this.ExternalMacUrl != null)
                    hashCode = hashCode * 59 + this.ExternalMacUrl.GetHashCode();
                if (this.ExternalWinUrl != null)
                    hashCode = hashCode * 59 + this.ExternalWinUrl.GetHashCode();
                if (this.ExternalLinuxUrl != null)
                    hashCode = hashCode * 59 + this.ExternalLinuxUrl.GetHashCode();
                hashCode = hashCode * 59 + this.AllowSymlinks.GetHashCode();
                hashCode = hashCode * 59 + this.RwPermissionPriority.GetHashCode();
                if (this.Template != null)
                    hashCode = hashCode * 59 + this.Template.GetHashCode();
                hashCode = hashCode * 59 + this.HomeFor.GetHashCode();
                return hashCode;
            }
        }

    }

}
