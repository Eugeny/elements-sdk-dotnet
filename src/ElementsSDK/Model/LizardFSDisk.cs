/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// LizardFSDisk
    /// </summary>
    [DataContract(Name = "LizardFSDisk")]
    public partial class LizardFSDisk : IEquatable<LizardFSDisk>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LizardFSDisk" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LizardFSDisk() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LizardFSDisk" /> class.
        /// </summary>
        /// <param name="node">node.</param>
        /// <param name="host">host (required).</param>
        /// <param name="mountpoint">mountpoint (required).</param>
        /// <param name="toDelete">toDelete (required).</param>
        /// <param name="damaged">damaged (required).</param>
        /// <param name="scanning">scanning (required).</param>
        /// <param name="errorChunk">errorChunk (required).</param>
        /// <param name="errorTimestamp">errorTimestamp (required).</param>
        /// <param name="sizeTotal">sizeTotal (required).</param>
        /// <param name="sizeUsed">sizeUsed (required).</param>
        /// <param name="sizeFree">sizeFree (required).</param>
        /// <param name="chunks">chunks (required).</param>
        public LizardFSDisk(StorageNodeMini node = default(StorageNodeMini), string host = default(string), string mountpoint = default(string), bool toDelete = default(bool), bool damaged = default(bool), bool scanning = default(bool), int errorChunk = default(int), int errorTimestamp = default(int), int sizeTotal = default(int), int sizeUsed = default(int), int sizeFree = default(int), int chunks = default(int))
        {
            // to ensure "host" is required (not null)
            this.Host = host ?? throw new ArgumentNullException("host is a required property for LizardFSDisk and cannot be null");
            // to ensure "mountpoint" is required (not null)
            this.Mountpoint = mountpoint ?? throw new ArgumentNullException("mountpoint is a required property for LizardFSDisk and cannot be null");
            this.ToDelete = toDelete;
            this.Damaged = damaged;
            this.Scanning = scanning;
            this.ErrorChunk = errorChunk;
            this.ErrorTimestamp = errorTimestamp;
            this.SizeTotal = sizeTotal;
            this.SizeUsed = sizeUsed;
            this.SizeFree = sizeFree;
            this.Chunks = chunks;
            this.Node = node;
        }

        /// <summary>
        /// Gets or Sets Node
        /// </summary>
        [DataMember(Name = "node", EmitDefaultValue = false)]
        public StorageNodeMini Node { get; set; }

        /// <summary>
        /// Gets or Sets Host
        /// </summary>
        [DataMember(Name = "host", IsRequired = true, EmitDefaultValue = false)]
        public string Host { get; set; }

        /// <summary>
        /// Gets or Sets Mountpoint
        /// </summary>
        [DataMember(Name = "mountpoint", IsRequired = true, EmitDefaultValue = false)]
        public string Mountpoint { get; set; }

        /// <summary>
        /// Gets or Sets ToDelete
        /// </summary>
        [DataMember(Name = "to_delete", IsRequired = true, EmitDefaultValue = true)]
        public bool ToDelete { get; set; }

        /// <summary>
        /// Gets or Sets Damaged
        /// </summary>
        [DataMember(Name = "damaged", IsRequired = true, EmitDefaultValue = true)]
        public bool Damaged { get; set; }

        /// <summary>
        /// Gets or Sets Scanning
        /// </summary>
        [DataMember(Name = "scanning", IsRequired = true, EmitDefaultValue = true)]
        public bool Scanning { get; set; }

        /// <summary>
        /// Gets or Sets ErrorChunk
        /// </summary>
        [DataMember(Name = "error_chunk", IsRequired = true, EmitDefaultValue = false)]
        public int ErrorChunk { get; set; }

        /// <summary>
        /// Gets or Sets ErrorTimestamp
        /// </summary>
        [DataMember(Name = "error_timestamp", IsRequired = true, EmitDefaultValue = false)]
        public int ErrorTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets SizeTotal
        /// </summary>
        [DataMember(Name = "size_total", IsRequired = true, EmitDefaultValue = false)]
        public int SizeTotal { get; set; }

        /// <summary>
        /// Gets or Sets SizeUsed
        /// </summary>
        [DataMember(Name = "size_used", IsRequired = true, EmitDefaultValue = false)]
        public int SizeUsed { get; set; }

        /// <summary>
        /// Gets or Sets SizeFree
        /// </summary>
        [DataMember(Name = "size_free", IsRequired = true, EmitDefaultValue = false)]
        public int SizeFree { get; set; }

        /// <summary>
        /// Gets or Sets Chunks
        /// </summary>
        [DataMember(Name = "chunks", IsRequired = true, EmitDefaultValue = false)]
        public int Chunks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LizardFSDisk {\n");
            sb.Append("  Node: ").Append(Node).Append("\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  Mountpoint: ").Append(Mountpoint).Append("\n");
            sb.Append("  ToDelete: ").Append(ToDelete).Append("\n");
            sb.Append("  Damaged: ").Append(Damaged).Append("\n");
            sb.Append("  Scanning: ").Append(Scanning).Append("\n");
            sb.Append("  ErrorChunk: ").Append(ErrorChunk).Append("\n");
            sb.Append("  ErrorTimestamp: ").Append(ErrorTimestamp).Append("\n");
            sb.Append("  SizeTotal: ").Append(SizeTotal).Append("\n");
            sb.Append("  SizeUsed: ").Append(SizeUsed).Append("\n");
            sb.Append("  SizeFree: ").Append(SizeFree).Append("\n");
            sb.Append("  Chunks: ").Append(Chunks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LizardFSDisk);
        }

        /// <summary>
        /// Returns true if LizardFSDisk instances are equal
        /// </summary>
        /// <param name="input">Instance of LizardFSDisk to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LizardFSDisk input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Node == input.Node ||
                    (this.Node != null &&
                    this.Node.Equals(input.Node))
                ) && 
                (
                    this.Host == input.Host ||
                    (this.Host != null &&
                    this.Host.Equals(input.Host))
                ) && 
                (
                    this.Mountpoint == input.Mountpoint ||
                    (this.Mountpoint != null &&
                    this.Mountpoint.Equals(input.Mountpoint))
                ) && 
                (
                    this.ToDelete == input.ToDelete ||
                    this.ToDelete.Equals(input.ToDelete)
                ) && 
                (
                    this.Damaged == input.Damaged ||
                    this.Damaged.Equals(input.Damaged)
                ) && 
                (
                    this.Scanning == input.Scanning ||
                    this.Scanning.Equals(input.Scanning)
                ) && 
                (
                    this.ErrorChunk == input.ErrorChunk ||
                    this.ErrorChunk.Equals(input.ErrorChunk)
                ) && 
                (
                    this.ErrorTimestamp == input.ErrorTimestamp ||
                    this.ErrorTimestamp.Equals(input.ErrorTimestamp)
                ) && 
                (
                    this.SizeTotal == input.SizeTotal ||
                    this.SizeTotal.Equals(input.SizeTotal)
                ) && 
                (
                    this.SizeUsed == input.SizeUsed ||
                    this.SizeUsed.Equals(input.SizeUsed)
                ) && 
                (
                    this.SizeFree == input.SizeFree ||
                    this.SizeFree.Equals(input.SizeFree)
                ) && 
                (
                    this.Chunks == input.Chunks ||
                    this.Chunks.Equals(input.Chunks)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Node != null)
                    hashCode = hashCode * 59 + this.Node.GetHashCode();
                if (this.Host != null)
                    hashCode = hashCode * 59 + this.Host.GetHashCode();
                if (this.Mountpoint != null)
                    hashCode = hashCode * 59 + this.Mountpoint.GetHashCode();
                hashCode = hashCode * 59 + this.ToDelete.GetHashCode();
                hashCode = hashCode * 59 + this.Damaged.GetHashCode();
                hashCode = hashCode * 59 + this.Scanning.GetHashCode();
                hashCode = hashCode * 59 + this.ErrorChunk.GetHashCode();
                hashCode = hashCode * 59 + this.ErrorTimestamp.GetHashCode();
                hashCode = hashCode * 59 + this.SizeTotal.GetHashCode();
                hashCode = hashCode * 59 + this.SizeUsed.GetHashCode();
                hashCode = hashCode * 59 + this.SizeFree.GetHashCode();
                hashCode = hashCode * 59 + this.Chunks.GetHashCode();
                return hashCode;
            }
        }

    }

}
