/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// Production
    /// </summary>
    [DataContract(Name = "Production")]
    public partial class Production : IEquatable<Production>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Production" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Production() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Production" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="obscureName">obscureName.</param>
        /// <param name="description">description.</param>
        /// <param name="longDescription">longDescription.</param>
        /// <param name="active">active.</param>
        /// <param name="template">template.</param>
        /// <param name="defaultGroup">defaultGroup.</param>
        public Production(string name = default(string), bool obscureName = default(bool), string description = default(string), string longDescription = default(string), bool active = default(bool), int? template = default(int?), int? defaultGroup = default(int?))
        {
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for Production and cannot be null");
            this.ObscureName = obscureName;
            this.Description = description;
            this.LongDescription = longDescription;
            this.Active = active;
            this.Template = template;
            this.DefaultGroup = defaultGroup;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets IsSpecial
        /// </summary>
        [DataMember(Name = "is_special", EmitDefaultValue = true)]
        public bool IsSpecial { get; private set; }

        /// <summary>
        /// Returns false as IsSpecial should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsSpecial()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets SpecialType
        /// </summary>
        [DataMember(Name = "special_type", EmitDefaultValue = true)]
        public int? SpecialType { get; private set; }

        /// <summary>
        /// Returns false as SpecialType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSpecialType()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets TotalSize
        /// </summary>
        [DataMember(Name = "total_size", EmitDefaultValue = false)]
        public int TotalSize { get; private set; }

        /// <summary>
        /// Returns false as TotalSize should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotalSize()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ObscureName
        /// </summary>
        [DataMember(Name = "obscure_name", EmitDefaultValue = true)]
        public bool ObscureName { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets LongDescription
        /// </summary>
        [DataMember(Name = "long_description", EmitDefaultValue = false)]
        public string LongDescription { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// Gets or Sets Template
        /// </summary>
        [DataMember(Name = "template", EmitDefaultValue = true)]
        public int? Template { get; set; }

        /// <summary>
        /// Gets or Sets DefaultGroup
        /// </summary>
        [DataMember(Name = "default_group", EmitDefaultValue = true)]
        public int? DefaultGroup { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Production {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsSpecial: ").Append(IsSpecial).Append("\n");
            sb.Append("  SpecialType: ").Append(SpecialType).Append("\n");
            sb.Append("  TotalSize: ").Append(TotalSize).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ObscureName: ").Append(ObscureName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  LongDescription: ").Append(LongDescription).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  DefaultGroup: ").Append(DefaultGroup).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Production);
        }

        /// <summary>
        /// Returns true if Production instances are equal
        /// </summary>
        /// <param name="input">Instance of Production to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Production input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.IsSpecial == input.IsSpecial ||
                    this.IsSpecial.Equals(input.IsSpecial)
                ) && 
                (
                    this.SpecialType == input.SpecialType ||
                    (this.SpecialType != null &&
                    this.SpecialType.Equals(input.SpecialType))
                ) && 
                (
                    this.TotalSize == input.TotalSize ||
                    this.TotalSize.Equals(input.TotalSize)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ObscureName == input.ObscureName ||
                    this.ObscureName.Equals(input.ObscureName)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.LongDescription == input.LongDescription ||
                    (this.LongDescription != null &&
                    this.LongDescription.Equals(input.LongDescription))
                ) && 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.Template == input.Template ||
                    (this.Template != null &&
                    this.Template.Equals(input.Template))
                ) && 
                (
                    this.DefaultGroup == input.DefaultGroup ||
                    (this.DefaultGroup != null &&
                    this.DefaultGroup.Equals(input.DefaultGroup))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.IsSpecial.GetHashCode();
                if (this.SpecialType != null)
                    hashCode = hashCode * 59 + this.SpecialType.GetHashCode();
                hashCode = hashCode * 59 + this.TotalSize.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                hashCode = hashCode * 59 + this.ObscureName.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.LongDescription != null)
                    hashCode = hashCode * 59 + this.LongDescription.GetHashCode();
                hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.Template != null)
                    hashCode = hashCode * 59 + this.Template.GetHashCode();
                if (this.DefaultGroup != null)
                    hashCode = hashCode * 59 + this.DefaultGroup.GetHashCode();
                return hashCode;
            }
        }

    }

}
