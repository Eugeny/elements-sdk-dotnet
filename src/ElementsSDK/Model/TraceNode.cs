/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// TraceNode
    /// </summary>
    [DataContract(Name = "TraceNode")]
    public partial class TraceNode : IEquatable<TraceNode>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TraceNode" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TraceNode() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TraceNode" /> class.
        /// </summary>
        /// <param name="children">children (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="r">r.</param>
        /// <param name="w">w.</param>
        /// <param name="totalChildren">totalChildren.</param>
        public TraceNode(List<Object> children = default(List<Object>), string name = default(string), int r = default(int), int w = default(int), int totalChildren = default(int))
        {
            // to ensure "children" is required (not null)
            this.Children = children ?? throw new ArgumentNullException("children is a required property for TraceNode and cannot be null");
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for TraceNode and cannot be null");
            this.R = r;
            this.W = w;
            this.TotalChildren = totalChildren;
        }

        /// <summary>
        /// Gets or Sets Children
        /// </summary>
        [DataMember(Name = "children", IsRequired = true, EmitDefaultValue = false)]
        public List<Object> Children { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets R
        /// </summary>
        [DataMember(Name = "r", EmitDefaultValue = false)]
        public int R { get; set; }

        /// <summary>
        /// Gets or Sets W
        /// </summary>
        [DataMember(Name = "w", EmitDefaultValue = false)]
        public int W { get; set; }

        /// <summary>
        /// Gets or Sets TotalChildren
        /// </summary>
        [DataMember(Name = "total_children", EmitDefaultValue = false)]
        public int TotalChildren { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TraceNode {\n");
            sb.Append("  Children: ").Append(Children).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  R: ").Append(R).Append("\n");
            sb.Append("  W: ").Append(W).Append("\n");
            sb.Append("  TotalChildren: ").Append(TotalChildren).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TraceNode);
        }

        /// <summary>
        /// Returns true if TraceNode instances are equal
        /// </summary>
        /// <param name="input">Instance of TraceNode to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TraceNode input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Children == input.Children ||
                    this.Children != null &&
                    input.Children != null &&
                    this.Children.SequenceEqual(input.Children)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.R == input.R ||
                    this.R.Equals(input.R)
                ) && 
                (
                    this.W == input.W ||
                    this.W.Equals(input.W)
                ) && 
                (
                    this.TotalChildren == input.TotalChildren ||
                    this.TotalChildren.Equals(input.TotalChildren)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Children != null)
                    hashCode = hashCode * 59 + this.Children.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                hashCode = hashCode * 59 + this.R.GetHashCode();
                hashCode = hashCode * 59 + this.W.GetHashCode();
                hashCode = hashCode * 59 + this.TotalChildren.GetHashCode();
                return hashCode;
            }
        }

    }

}
