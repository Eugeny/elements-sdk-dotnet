/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// TimeEndpointResponse
    /// </summary>
    [DataContract(Name = "TimeEndpointResponse")]
    public partial class TimeEndpointResponse : IEquatable<TimeEndpointResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeEndpointResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TimeEndpointResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeEndpointResponse" /> class.
        /// </summary>
        /// <param name="time">time (required).</param>
        /// <param name="timezone">timezone (required).</param>
        /// <param name="timezones">timezones (required).</param>
        public TimeEndpointResponse(decimal time = default(decimal), Timezone timezone = default(Timezone), List<Timezone> timezones = default(List<Timezone>))
        {
            this.Time = time;
            // to ensure "timezone" is required (not null)
            this.Timezone = timezone ?? throw new ArgumentNullException("timezone is a required property for TimeEndpointResponse and cannot be null");
            // to ensure "timezones" is required (not null)
            this.Timezones = timezones ?? throw new ArgumentNullException("timezones is a required property for TimeEndpointResponse and cannot be null");
        }

        /// <summary>
        /// Gets or Sets Time
        /// </summary>
        [DataMember(Name = "time", IsRequired = true, EmitDefaultValue = false)]
        public decimal Time { get; set; }

        /// <summary>
        /// Gets or Sets Timezone
        /// </summary>
        [DataMember(Name = "timezone", IsRequired = true, EmitDefaultValue = false)]
        public Timezone Timezone { get; set; }

        /// <summary>
        /// Gets or Sets Timezones
        /// </summary>
        [DataMember(Name = "timezones", IsRequired = true, EmitDefaultValue = false)]
        public List<Timezone> Timezones { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TimeEndpointResponse {\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  Timezones: ").Append(Timezones).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TimeEndpointResponse);
        }

        /// <summary>
        /// Returns true if TimeEndpointResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of TimeEndpointResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimeEndpointResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Time == input.Time ||
                    this.Time.Equals(input.Time)
                ) && 
                (
                    this.Timezone == input.Timezone ||
                    (this.Timezone != null &&
                    this.Timezone.Equals(input.Timezone))
                ) && 
                (
                    this.Timezones == input.Timezones ||
                    this.Timezones != null &&
                    input.Timezones != null &&
                    this.Timezones.SequenceEqual(input.Timezones)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Time.GetHashCode();
                if (this.Timezone != null)
                    hashCode = hashCode * 59 + this.Timezone.GetHashCode();
                if (this.Timezones != null)
                    hashCode = hashCode * 59 + this.Timezones.GetHashCode();
                return hashCode;
            }
        }

    }

}
