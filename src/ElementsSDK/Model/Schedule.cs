/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// Schedule
    /// </summary>
    [DataContract(Name = "Schedule")]
    public partial class Schedule : IEquatable<Schedule>
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            NUMBER_2 = 2

        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Defines Period
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PeriodEnum
        {
            /// <summary>
            /// Enum Minutes for value: minutes
            /// </summary>
            [EnumMember(Value = "minutes")]
            Minutes = 1,

            /// <summary>
            /// Enum Hours for value: hours
            /// </summary>
            [EnumMember(Value = "hours")]
            Hours = 2,

            /// <summary>
            /// Enum Days for value: days
            /// </summary>
            [EnumMember(Value = "days")]
            Days = 3

        }


        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name = "period", EmitDefaultValue = false)]
        public PeriodEnum? Period { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Schedule" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Schedule() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Schedule" /> class.
        /// </summary>
        /// <param name="variables">variables.</param>
        /// <param name="type">type.</param>
        /// <param name="enabled">enabled.</param>
        /// <param name="lastRun">lastRun.</param>
        /// <param name="every">every.</param>
        /// <param name="period">period.</param>
        /// <param name="crontabDayOfMonth">crontabDayOfMonth.</param>
        /// <param name="crontabDayOfWeek">crontabDayOfWeek.</param>
        /// <param name="crontabHour">crontabHour.</param>
        /// <param name="crontabMinute">crontabMinute.</param>
        /// <param name="crontabMonthOfYear">crontabMonthOfYear.</param>
        /// <param name="job">job (required).</param>
        public Schedule(Dictionary<string, string> variables = default(Dictionary<string, string>), TypeEnum? type = default(TypeEnum?), bool enabled = default(bool), DateTime? lastRun = default(DateTime?), int every = default(int), PeriodEnum? period = default(PeriodEnum?), string crontabDayOfMonth = default(string), string crontabDayOfWeek = default(string), string crontabHour = default(string), string crontabMinute = default(string), string crontabMonthOfYear = default(string), int job = default(int))
        {
            this.Job = job;
            this.Variables = variables;
            this.Type = type;
            this.Enabled = enabled;
            this.LastRun = lastRun;
            this.Every = every;
            this.Period = period;
            this.CrontabDayOfMonth = crontabDayOfMonth;
            this.CrontabDayOfWeek = crontabDayOfWeek;
            this.CrontabHour = crontabHour;
            this.CrontabMinute = crontabMinute;
            this.CrontabMonthOfYear = crontabMonthOfYear;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Variables
        /// </summary>
        [DataMember(Name = "variables", EmitDefaultValue = false)]
        public Dictionary<string, string> Variables { get; set; }

        /// <summary>
        /// Gets or Sets NextRun
        /// </summary>
        [DataMember(Name = "next_run", EmitDefaultValue = false)]
        public DateTime NextRun { get; private set; }

        /// <summary>
        /// Returns false as NextRun should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNextRun()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name = "enabled", EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Gets or Sets LastRun
        /// </summary>
        [DataMember(Name = "last_run", EmitDefaultValue = true)]
        public DateTime? LastRun { get; set; }

        /// <summary>
        /// Gets or Sets Every
        /// </summary>
        [DataMember(Name = "every", EmitDefaultValue = false)]
        public int Every { get; set; }

        /// <summary>
        /// Gets or Sets CrontabDayOfMonth
        /// </summary>
        [DataMember(Name = "crontab_day_of_month", EmitDefaultValue = false)]
        public string CrontabDayOfMonth { get; set; }

        /// <summary>
        /// Gets or Sets CrontabDayOfWeek
        /// </summary>
        [DataMember(Name = "crontab_day_of_week", EmitDefaultValue = false)]
        public string CrontabDayOfWeek { get; set; }

        /// <summary>
        /// Gets or Sets CrontabHour
        /// </summary>
        [DataMember(Name = "crontab_hour", EmitDefaultValue = false)]
        public string CrontabHour { get; set; }

        /// <summary>
        /// Gets or Sets CrontabMinute
        /// </summary>
        [DataMember(Name = "crontab_minute", EmitDefaultValue = false)]
        public string CrontabMinute { get; set; }

        /// <summary>
        /// Gets or Sets CrontabMonthOfYear
        /// </summary>
        [DataMember(Name = "crontab_month_of_year", EmitDefaultValue = false)]
        public string CrontabMonthOfYear { get; set; }

        /// <summary>
        /// Gets or Sets Job
        /// </summary>
        [DataMember(Name = "job", IsRequired = true, EmitDefaultValue = false)]
        public int Job { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Schedule {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Variables: ").Append(Variables).Append("\n");
            sb.Append("  NextRun: ").Append(NextRun).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  LastRun: ").Append(LastRun).Append("\n");
            sb.Append("  Every: ").Append(Every).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  CrontabDayOfMonth: ").Append(CrontabDayOfMonth).Append("\n");
            sb.Append("  CrontabDayOfWeek: ").Append(CrontabDayOfWeek).Append("\n");
            sb.Append("  CrontabHour: ").Append(CrontabHour).Append("\n");
            sb.Append("  CrontabMinute: ").Append(CrontabMinute).Append("\n");
            sb.Append("  CrontabMonthOfYear: ").Append(CrontabMonthOfYear).Append("\n");
            sb.Append("  Job: ").Append(Job).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Schedule);
        }

        /// <summary>
        /// Returns true if Schedule instances are equal
        /// </summary>
        /// <param name="input">Instance of Schedule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Schedule input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Variables == input.Variables ||
                    this.Variables != null &&
                    input.Variables != null &&
                    this.Variables.SequenceEqual(input.Variables)
                ) && 
                (
                    this.NextRun == input.NextRun ||
                    (this.NextRun != null &&
                    this.NextRun.Equals(input.NextRun))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    this.Enabled.Equals(input.Enabled)
                ) && 
                (
                    this.LastRun == input.LastRun ||
                    (this.LastRun != null &&
                    this.LastRun.Equals(input.LastRun))
                ) && 
                (
                    this.Every == input.Every ||
                    this.Every.Equals(input.Every)
                ) && 
                (
                    this.Period == input.Period ||
                    this.Period.Equals(input.Period)
                ) && 
                (
                    this.CrontabDayOfMonth == input.CrontabDayOfMonth ||
                    (this.CrontabDayOfMonth != null &&
                    this.CrontabDayOfMonth.Equals(input.CrontabDayOfMonth))
                ) && 
                (
                    this.CrontabDayOfWeek == input.CrontabDayOfWeek ||
                    (this.CrontabDayOfWeek != null &&
                    this.CrontabDayOfWeek.Equals(input.CrontabDayOfWeek))
                ) && 
                (
                    this.CrontabHour == input.CrontabHour ||
                    (this.CrontabHour != null &&
                    this.CrontabHour.Equals(input.CrontabHour))
                ) && 
                (
                    this.CrontabMinute == input.CrontabMinute ||
                    (this.CrontabMinute != null &&
                    this.CrontabMinute.Equals(input.CrontabMinute))
                ) && 
                (
                    this.CrontabMonthOfYear == input.CrontabMonthOfYear ||
                    (this.CrontabMonthOfYear != null &&
                    this.CrontabMonthOfYear.Equals(input.CrontabMonthOfYear))
                ) && 
                (
                    this.Job == input.Job ||
                    this.Job.Equals(input.Job)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Variables != null)
                    hashCode = hashCode * 59 + this.Variables.GetHashCode();
                if (this.NextRun != null)
                    hashCode = hashCode * 59 + this.NextRun.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.LastRun != null)
                    hashCode = hashCode * 59 + this.LastRun.GetHashCode();
                hashCode = hashCode * 59 + this.Every.GetHashCode();
                hashCode = hashCode * 59 + this.Period.GetHashCode();
                if (this.CrontabDayOfMonth != null)
                    hashCode = hashCode * 59 + this.CrontabDayOfMonth.GetHashCode();
                if (this.CrontabDayOfWeek != null)
                    hashCode = hashCode * 59 + this.CrontabDayOfWeek.GetHashCode();
                if (this.CrontabHour != null)
                    hashCode = hashCode * 59 + this.CrontabHour.GetHashCode();
                if (this.CrontabMinute != null)
                    hashCode = hashCode * 59 + this.CrontabMinute.GetHashCode();
                if (this.CrontabMonthOfYear != null)
                    hashCode = hashCode * 59 + this.CrontabMonthOfYear.GetHashCode();
                hashCode = hashCode * 59 + this.Job.GetHashCode();
                return hashCode;
            }
        }

    }

}
