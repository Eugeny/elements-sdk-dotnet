/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// StorageNodeStatus
    /// </summary>
    [DataContract(Name = "StorageNodeStatus")]
    public partial class StorageNodeStatus : IEquatable<StorageNodeStatus>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StorageNodeStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StorageNodeStatus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StorageNodeStatus" /> class.
        /// </summary>
        /// <param name="online">online (required).</param>
        /// <param name="report">report (required).</param>
        /// <param name="haOnline">haOnline (required).</param>
        /// <param name="haStatus">haStatus (required).</param>
        /// <param name="haIps">haIps (required).</param>
        public StorageNodeStatus(bool online = default(bool), Dictionary<string, string> report = default(Dictionary<string, string>), bool? haOnline = default(bool?), string haStatus = default(string), List<string> haIps = default(List<string>))
        {
            this.Online = online;
            // to ensure "report" is required (not null)
            this.Report = report ?? throw new ArgumentNullException("report is a required property for StorageNodeStatus and cannot be null");
            // to ensure "haOnline" is required (not null)
            this.HaOnline = haOnline ?? throw new ArgumentNullException("haOnline is a required property for StorageNodeStatus and cannot be null");
            // to ensure "haStatus" is required (not null)
            this.HaStatus = haStatus ?? throw new ArgumentNullException("haStatus is a required property for StorageNodeStatus and cannot be null");
            // to ensure "haIps" is required (not null)
            this.HaIps = haIps ?? throw new ArgumentNullException("haIps is a required property for StorageNodeStatus and cannot be null");
        }

        /// <summary>
        /// Gets or Sets Online
        /// </summary>
        [DataMember(Name = "online", IsRequired = true, EmitDefaultValue = true)]
        public bool Online { get; set; }

        /// <summary>
        /// Gets or Sets Report
        /// </summary>
        [DataMember(Name = "report", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, string> Report { get; set; }

        /// <summary>
        /// Gets or Sets HaOnline
        /// </summary>
        [DataMember(Name = "ha_online", IsRequired = true, EmitDefaultValue = true)]
        public bool? HaOnline { get; set; }

        /// <summary>
        /// Gets or Sets HaStatus
        /// </summary>
        [DataMember(Name = "ha_status", IsRequired = true, EmitDefaultValue = true)]
        public string HaStatus { get; set; }

        /// <summary>
        /// Gets or Sets HaIps
        /// </summary>
        [DataMember(Name = "ha_ips", IsRequired = true, EmitDefaultValue = false)]
        public List<string> HaIps { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StorageNodeStatus {\n");
            sb.Append("  Online: ").Append(Online).Append("\n");
            sb.Append("  Report: ").Append(Report).Append("\n");
            sb.Append("  HaOnline: ").Append(HaOnline).Append("\n");
            sb.Append("  HaStatus: ").Append(HaStatus).Append("\n");
            sb.Append("  HaIps: ").Append(HaIps).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StorageNodeStatus);
        }

        /// <summary>
        /// Returns true if StorageNodeStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of StorageNodeStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StorageNodeStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Online == input.Online ||
                    this.Online.Equals(input.Online)
                ) && 
                (
                    this.Report == input.Report ||
                    this.Report != null &&
                    input.Report != null &&
                    this.Report.SequenceEqual(input.Report)
                ) && 
                (
                    this.HaOnline == input.HaOnline ||
                    (this.HaOnline != null &&
                    this.HaOnline.Equals(input.HaOnline))
                ) && 
                (
                    this.HaStatus == input.HaStatus ||
                    (this.HaStatus != null &&
                    this.HaStatus.Equals(input.HaStatus))
                ) && 
                (
                    this.HaIps == input.HaIps ||
                    this.HaIps != null &&
                    input.HaIps != null &&
                    this.HaIps.SequenceEqual(input.HaIps)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Online.GetHashCode();
                if (this.Report != null)
                    hashCode = hashCode * 59 + this.Report.GetHashCode();
                if (this.HaOnline != null)
                    hashCode = hashCode * 59 + this.HaOnline.GetHashCode();
                if (this.HaStatus != null)
                    hashCode = hashCode * 59 + this.HaStatus.GetHashCode();
                if (this.HaIps != null)
                    hashCode = hashCode * 59 + this.HaIps.GetHashCode();
                return hashCode;
            }
        }

    }

}
