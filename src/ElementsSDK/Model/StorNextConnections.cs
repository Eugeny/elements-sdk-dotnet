/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// StorNextConnections
    /// </summary>
    [DataContract(Name = "StorNextConnections")]
    public partial class StorNextConnections : IEquatable<StorNextConnections>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StorNextConnections" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StorNextConnections() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StorNextConnections" /> class.
        /// </summary>
        /// <param name="list">list (required).</param>
        /// <param name="normal">normal (required).</param>
        /// <param name="proxy">proxy (required).</param>
        /// <param name="gateway">gateway (required).</param>
        public StorNextConnections(List<StorNextConnection> list = default(List<StorNextConnection>), Dictionary<string, string> normal = default(Dictionary<string, string>), Dictionary<string, string> proxy = default(Dictionary<string, string>), Dictionary<string, string> gateway = default(Dictionary<string, string>))
        {
            // to ensure "list" is required (not null)
            this.List = list ?? throw new ArgumentNullException("list is a required property for StorNextConnections and cannot be null");
            // to ensure "normal" is required (not null)
            this.Normal = normal ?? throw new ArgumentNullException("normal is a required property for StorNextConnections and cannot be null");
            // to ensure "proxy" is required (not null)
            this.Proxy = proxy ?? throw new ArgumentNullException("proxy is a required property for StorNextConnections and cannot be null");
            // to ensure "gateway" is required (not null)
            this.Gateway = gateway ?? throw new ArgumentNullException("gateway is a required property for StorNextConnections and cannot be null");
        }

        /// <summary>
        /// Gets or Sets List
        /// </summary>
        [DataMember(Name = "list", IsRequired = true, EmitDefaultValue = false)]
        public List<StorNextConnection> List { get; set; }

        /// <summary>
        /// Gets or Sets Normal
        /// </summary>
        [DataMember(Name = "normal", IsRequired = true, EmitDefaultValue = false)]
        public Dictionary<string, string> Normal { get; set; }

        /// <summary>
        /// Gets or Sets Proxy
        /// </summary>
        [DataMember(Name = "proxy", IsRequired = true, EmitDefaultValue = false)]
        public Dictionary<string, string> Proxy { get; set; }

        /// <summary>
        /// Gets or Sets Gateway
        /// </summary>
        [DataMember(Name = "gateway", IsRequired = true, EmitDefaultValue = false)]
        public Dictionary<string, string> Gateway { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StorNextConnections {\n");
            sb.Append("  List: ").Append(List).Append("\n");
            sb.Append("  Normal: ").Append(Normal).Append("\n");
            sb.Append("  Proxy: ").Append(Proxy).Append("\n");
            sb.Append("  Gateway: ").Append(Gateway).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StorNextConnections);
        }

        /// <summary>
        /// Returns true if StorNextConnections instances are equal
        /// </summary>
        /// <param name="input">Instance of StorNextConnections to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StorNextConnections input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.List == input.List ||
                    this.List != null &&
                    input.List != null &&
                    this.List.SequenceEqual(input.List)
                ) && 
                (
                    this.Normal == input.Normal ||
                    this.Normal != null &&
                    input.Normal != null &&
                    this.Normal.SequenceEqual(input.Normal)
                ) && 
                (
                    this.Proxy == input.Proxy ||
                    this.Proxy != null &&
                    input.Proxy != null &&
                    this.Proxy.SequenceEqual(input.Proxy)
                ) && 
                (
                    this.Gateway == input.Gateway ||
                    this.Gateway != null &&
                    input.Gateway != null &&
                    this.Gateway.SequenceEqual(input.Gateway)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.List != null)
                    hashCode = hashCode * 59 + this.List.GetHashCode();
                if (this.Normal != null)
                    hashCode = hashCode * 59 + this.Normal.GetHashCode();
                if (this.Proxy != null)
                    hashCode = hashCode * 59 + this.Proxy.GetHashCode();
                if (this.Gateway != null)
                    hashCode = hashCode * 59 + this.Gateway.GetHashCode();
                return hashCode;
            }
        }

    }

}
