/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// Sensors
    /// </summary>
    [DataContract(Name = "Sensors")]
    public partial class Sensors : IEquatable<Sensors>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Sensors" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Sensors() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Sensors" /> class.
        /// </summary>
        /// <param name="sensors">sensors (required).</param>
        public Sensors(List<Sensor> sensors = default(List<Sensor>))
        {
            // to ensure "sensors" is required (not null)
            this._Sensors = sensors ?? throw new ArgumentNullException("sensors is a required property for Sensors and cannot be null");
        }

        /// <summary>
        /// Gets or Sets _Sensors
        /// </summary>
        [DataMember(Name = "sensors", IsRequired = true, EmitDefaultValue = false)]
        public List<Sensor> _Sensors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Sensors {\n");
            sb.Append("  _Sensors: ").Append(_Sensors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Sensors);
        }

        /// <summary>
        /// Returns true if Sensors instances are equal
        /// </summary>
        /// <param name="input">Instance of Sensors to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Sensors input)
        {
            if (input == null)
                return false;

            return 
                (
                    this._Sensors == input._Sensors ||
                    this._Sensors != null &&
                    input._Sensors != null &&
                    this._Sensors.SequenceEqual(input._Sensors)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._Sensors != null)
                    hashCode = hashCode * 59 + this._Sensors.GetHashCode();
                return hashCode;
            }
        }

    }

}
