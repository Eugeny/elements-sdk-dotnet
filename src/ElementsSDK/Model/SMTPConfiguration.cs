/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// SMTPConfiguration
    /// </summary>
    [DataContract(Name = "SMTPConfiguration")]
    public partial class SMTPConfiguration : IEquatable<SMTPConfiguration>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SMTPConfiguration" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SMTPConfiguration() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SMTPConfiguration" /> class.
        /// </summary>
        /// <param name="fromAddress">fromAddress (required).</param>
        /// <param name="server">server (required).</param>
        /// <param name="port">port (required).</param>
        /// <param name="tls">tls (required).</param>
        /// <param name="username">username (required).</param>
        /// <param name="password">password (required).</param>
        public SMTPConfiguration(string fromAddress = default(string), string server = default(string), int port = default(int), string tls = default(string), string username = default(string), string password = default(string))
        {
            // to ensure "fromAddress" is required (not null)
            this.FromAddress = fromAddress ?? throw new ArgumentNullException("fromAddress is a required property for SMTPConfiguration and cannot be null");
            // to ensure "server" is required (not null)
            this.Server = server ?? throw new ArgumentNullException("server is a required property for SMTPConfiguration and cannot be null");
            this.Port = port;
            // to ensure "tls" is required (not null)
            this.Tls = tls ?? throw new ArgumentNullException("tls is a required property for SMTPConfiguration and cannot be null");
            // to ensure "username" is required (not null)
            this.Username = username ?? throw new ArgumentNullException("username is a required property for SMTPConfiguration and cannot be null");
            // to ensure "password" is required (not null)
            this.Password = password ?? throw new ArgumentNullException("password is a required property for SMTPConfiguration and cannot be null");
        }

        /// <summary>
        /// Gets or Sets FromAddress
        /// </summary>
        [DataMember(Name = "from_address", IsRequired = true, EmitDefaultValue = false)]
        public string FromAddress { get; set; }

        /// <summary>
        /// Gets or Sets Server
        /// </summary>
        [DataMember(Name = "server", IsRequired = true, EmitDefaultValue = false)]
        public string Server { get; set; }

        /// <summary>
        /// Gets or Sets Port
        /// </summary>
        [DataMember(Name = "port", IsRequired = true, EmitDefaultValue = false)]
        public int Port { get; set; }

        /// <summary>
        /// Gets or Sets Tls
        /// </summary>
        [DataMember(Name = "tls", IsRequired = true, EmitDefaultValue = false)]
        public string Tls { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name = "username", IsRequired = true, EmitDefaultValue = true)]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name = "password", IsRequired = true, EmitDefaultValue = true)]
        public string Password { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SMTPConfiguration {\n");
            sb.Append("  FromAddress: ").Append(FromAddress).Append("\n");
            sb.Append("  Server: ").Append(Server).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  Tls: ").Append(Tls).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SMTPConfiguration);
        }

        /// <summary>
        /// Returns true if SMTPConfiguration instances are equal
        /// </summary>
        /// <param name="input">Instance of SMTPConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SMTPConfiguration input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FromAddress == input.FromAddress ||
                    (this.FromAddress != null &&
                    this.FromAddress.Equals(input.FromAddress))
                ) && 
                (
                    this.Server == input.Server ||
                    (this.Server != null &&
                    this.Server.Equals(input.Server))
                ) && 
                (
                    this.Port == input.Port ||
                    this.Port.Equals(input.Port)
                ) && 
                (
                    this.Tls == input.Tls ||
                    (this.Tls != null &&
                    this.Tls.Equals(input.Tls))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FromAddress != null)
                    hashCode = hashCode * 59 + this.FromAddress.GetHashCode();
                if (this.Server != null)
                    hashCode = hashCode * 59 + this.Server.GetHashCode();
                hashCode = hashCode * 59 + this.Port.GetHashCode();
                if (this.Tls != null)
                    hashCode = hashCode * 59 + this.Tls.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                return hashCode;
            }
        }

    }

}
