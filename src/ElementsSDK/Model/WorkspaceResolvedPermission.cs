/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// WorkspaceResolvedPermission
    /// </summary>
    [DataContract(Name = "WorkspaceResolvedPermission")]
    public partial class WorkspaceResolvedPermission : IEquatable<WorkspaceResolvedPermission>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkspaceResolvedPermission" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WorkspaceResolvedPermission() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkspaceResolvedPermission" /> class.
        /// </summary>
        /// <param name="readOnly">readOnly.</param>
        /// <param name="workspace">workspace (required).</param>
        /// <param name="user">user.</param>
        /// <param name="group">group.</param>
        public WorkspaceResolvedPermission(bool readOnly = default(bool), int workspace = default(int), int? user = default(int?), int? group = default(int?))
        {
            this.Workspace = workspace;
            this.ReadOnly = readOnly;
            this.User = user;
            this.Group = group;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets ReadOnly
        /// </summary>
        [DataMember(Name = "read_only", EmitDefaultValue = true)]
        public bool ReadOnly { get; set; }

        /// <summary>
        /// Gets or Sets Workspace
        /// </summary>
        [DataMember(Name = "workspace", IsRequired = true, EmitDefaultValue = false)]
        public int Workspace { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "user", EmitDefaultValue = true)]
        public int? User { get; set; }

        /// <summary>
        /// Gets or Sets Group
        /// </summary>
        [DataMember(Name = "group", EmitDefaultValue = true)]
        public int? Group { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkspaceResolvedPermission {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ReadOnly: ").Append(ReadOnly).Append("\n");
            sb.Append("  Workspace: ").Append(Workspace).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WorkspaceResolvedPermission);
        }

        /// <summary>
        /// Returns true if WorkspaceResolvedPermission instances are equal
        /// </summary>
        /// <param name="input">Instance of WorkspaceResolvedPermission to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkspaceResolvedPermission input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.ReadOnly == input.ReadOnly ||
                    this.ReadOnly.Equals(input.ReadOnly)
                ) && 
                (
                    this.Workspace == input.Workspace ||
                    this.Workspace.Equals(input.Workspace)
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.Group == input.Group ||
                    (this.Group != null &&
                    this.Group.Equals(input.Group))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.ReadOnly.GetHashCode();
                hashCode = hashCode * 59 + this.Workspace.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.Group != null)
                    hashCode = hashCode * 59 + this.Group.GetHashCode();
                return hashCode;
            }
        }

    }

}
