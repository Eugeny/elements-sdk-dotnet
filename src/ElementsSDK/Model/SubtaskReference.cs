/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// SubtaskReference
    /// </summary>
    [DataContract(Name = "SubtaskReference")]
    public partial class SubtaskReference : IEquatable<SubtaskReference>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubtaskReference" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        public SubtaskReference(int id = default(int))
        {
            this.Id = id;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Kwargs
        /// </summary>
        [DataMember(Name = "kwargs", EmitDefaultValue = false)]
        public Dictionary<string, string> Kwargs { get; private set; }

        /// <summary>
        /// Returns false as Kwargs should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeKwargs()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets GraphLayout
        /// </summary>
        [DataMember(Name = "graph_layout", EmitDefaultValue = false)]
        public Dictionary<string, string> GraphLayout { get; private set; }

        /// <summary>
        /// Returns false as GraphLayout should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeGraphLayout()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets ValidationError
        /// </summary>
        [DataMember(Name = "validation_error", EmitDefaultValue = false)]
        public string ValidationError { get; private set; }

        /// <summary>
        /// Returns false as ValidationError should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeValidationError()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Trigger
        /// </summary>
        [DataMember(Name = "trigger", EmitDefaultValue = true)]
        public string Trigger { get; private set; }

        /// <summary>
        /// Returns false as Trigger should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTrigger()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; private set; }

        /// <summary>
        /// Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets NoopDontSave
        /// </summary>
        [DataMember(Name = "noop_dont_save", EmitDefaultValue = true)]
        public bool NoopDontSave { get; private set; }

        /// <summary>
        /// Returns false as NoopDontSave should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNoopDontSave()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets NoConcurrency
        /// </summary>
        [DataMember(Name = "no_concurrency", EmitDefaultValue = true)]
        public bool NoConcurrency { get; private set; }

        /// <summary>
        /// Returns false as NoConcurrency should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNoConcurrency()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Timeout
        /// </summary>
        [DataMember(Name = "timeout", EmitDefaultValue = true)]
        public int? Timeout { get; private set; }

        /// <summary>
        /// Returns false as Timeout should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTimeout()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets LogVariable
        /// </summary>
        [DataMember(Name = "log_variable", EmitDefaultValue = true)]
        public bool LogVariable { get; private set; }

        /// <summary>
        /// Returns false as LogVariable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLogVariable()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Task
        /// </summary>
        [DataMember(Name = "task", EmitDefaultValue = true)]
        public string Task { get; private set; }

        /// <summary>
        /// Returns false as Task should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTask()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets ConditionVariable
        /// </summary>
        [DataMember(Name = "condition_variable", EmitDefaultValue = true)]
        public string ConditionVariable { get; private set; }

        /// <summary>
        /// Returns false as ConditionVariable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeConditionVariable()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets ConditionValue
        /// </summary>
        [DataMember(Name = "condition_value", EmitDefaultValue = true)]
        public string ConditionValue { get; private set; }

        /// <summary>
        /// Returns false as ConditionValue should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeConditionValue()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Sync
        /// </summary>
        [DataMember(Name = "sync", EmitDefaultValue = true)]
        public bool Sync { get; private set; }

        /// <summary>
        /// Returns false as Sync should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSync()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Queue
        /// </summary>
        [DataMember(Name = "queue", EmitDefaultValue = true)]
        public string Queue { get; private set; }

        /// <summary>
        /// Returns false as Queue should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeQueue()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets EnqueueAtFront
        /// </summary>
        [DataMember(Name = "enqueue_at_front", EmitDefaultValue = true)]
        public bool EnqueueAtFront { get; private set; }

        /// <summary>
        /// Returns false as EnqueueAtFront should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEnqueueAtFront()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Parent
        /// </summary>
        [DataMember(Name = "parent", EmitDefaultValue = false)]
        public int Parent { get; private set; }

        /// <summary>
        /// Returns false as Parent should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeParent()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets RelativeTo
        /// </summary>
        [DataMember(Name = "relative_to", EmitDefaultValue = true)]
        public int? RelativeTo { get; private set; }

        /// <summary>
        /// Returns false as RelativeTo should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRelativeTo()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubtaskReference {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Kwargs: ").Append(Kwargs).Append("\n");
            sb.Append("  GraphLayout: ").Append(GraphLayout).Append("\n");
            sb.Append("  ValidationError: ").Append(ValidationError).Append("\n");
            sb.Append("  Trigger: ").Append(Trigger).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NoopDontSave: ").Append(NoopDontSave).Append("\n");
            sb.Append("  NoConcurrency: ").Append(NoConcurrency).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("  LogVariable: ").Append(LogVariable).Append("\n");
            sb.Append("  Task: ").Append(Task).Append("\n");
            sb.Append("  ConditionVariable: ").Append(ConditionVariable).Append("\n");
            sb.Append("  ConditionValue: ").Append(ConditionValue).Append("\n");
            sb.Append("  Sync: ").Append(Sync).Append("\n");
            sb.Append("  Queue: ").Append(Queue).Append("\n");
            sb.Append("  EnqueueAtFront: ").Append(EnqueueAtFront).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  RelativeTo: ").Append(RelativeTo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubtaskReference);
        }

        /// <summary>
        /// Returns true if SubtaskReference instances are equal
        /// </summary>
        /// <param name="input">Instance of SubtaskReference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubtaskReference input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Kwargs == input.Kwargs ||
                    this.Kwargs != null &&
                    input.Kwargs != null &&
                    this.Kwargs.SequenceEqual(input.Kwargs)
                ) && 
                (
                    this.GraphLayout == input.GraphLayout ||
                    this.GraphLayout != null &&
                    input.GraphLayout != null &&
                    this.GraphLayout.SequenceEqual(input.GraphLayout)
                ) && 
                (
                    this.ValidationError == input.ValidationError ||
                    (this.ValidationError != null &&
                    this.ValidationError.Equals(input.ValidationError))
                ) && 
                (
                    this.Trigger == input.Trigger ||
                    (this.Trigger != null &&
                    this.Trigger.Equals(input.Trigger))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.NoopDontSave == input.NoopDontSave ||
                    this.NoopDontSave.Equals(input.NoopDontSave)
                ) && 
                (
                    this.NoConcurrency == input.NoConcurrency ||
                    this.NoConcurrency.Equals(input.NoConcurrency)
                ) && 
                (
                    this.Timeout == input.Timeout ||
                    (this.Timeout != null &&
                    this.Timeout.Equals(input.Timeout))
                ) && 
                (
                    this.LogVariable == input.LogVariable ||
                    this.LogVariable.Equals(input.LogVariable)
                ) && 
                (
                    this.Task == input.Task ||
                    (this.Task != null &&
                    this.Task.Equals(input.Task))
                ) && 
                (
                    this.ConditionVariable == input.ConditionVariable ||
                    (this.ConditionVariable != null &&
                    this.ConditionVariable.Equals(input.ConditionVariable))
                ) && 
                (
                    this.ConditionValue == input.ConditionValue ||
                    (this.ConditionValue != null &&
                    this.ConditionValue.Equals(input.ConditionValue))
                ) && 
                (
                    this.Sync == input.Sync ||
                    this.Sync.Equals(input.Sync)
                ) && 
                (
                    this.Queue == input.Queue ||
                    (this.Queue != null &&
                    this.Queue.Equals(input.Queue))
                ) && 
                (
                    this.EnqueueAtFront == input.EnqueueAtFront ||
                    this.EnqueueAtFront.Equals(input.EnqueueAtFront)
                ) && 
                (
                    this.Parent == input.Parent ||
                    this.Parent.Equals(input.Parent)
                ) && 
                (
                    this.RelativeTo == input.RelativeTo ||
                    (this.RelativeTo != null &&
                    this.RelativeTo.Equals(input.RelativeTo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Kwargs != null)
                    hashCode = hashCode * 59 + this.Kwargs.GetHashCode();
                if (this.GraphLayout != null)
                    hashCode = hashCode * 59 + this.GraphLayout.GetHashCode();
                if (this.ValidationError != null)
                    hashCode = hashCode * 59 + this.ValidationError.GetHashCode();
                if (this.Trigger != null)
                    hashCode = hashCode * 59 + this.Trigger.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                hashCode = hashCode * 59 + this.NoopDontSave.GetHashCode();
                hashCode = hashCode * 59 + this.NoConcurrency.GetHashCode();
                if (this.Timeout != null)
                    hashCode = hashCode * 59 + this.Timeout.GetHashCode();
                hashCode = hashCode * 59 + this.LogVariable.GetHashCode();
                if (this.Task != null)
                    hashCode = hashCode * 59 + this.Task.GetHashCode();
                if (this.ConditionVariable != null)
                    hashCode = hashCode * 59 + this.ConditionVariable.GetHashCode();
                if (this.ConditionValue != null)
                    hashCode = hashCode * 59 + this.ConditionValue.GetHashCode();
                hashCode = hashCode * 59 + this.Sync.GetHashCode();
                if (this.Queue != null)
                    hashCode = hashCode * 59 + this.Queue.GetHashCode();
                hashCode = hashCode * 59 + this.EnqueueAtFront.GetHashCode();
                hashCode = hashCode * 59 + this.Parent.GetHashCode();
                if (this.RelativeTo != null)
                    hashCode = hashCode * 59 + this.RelativeTo.GetHashCode();
                return hashCode;
            }
        }

    }

}
