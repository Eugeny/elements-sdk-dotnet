/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// Proxy
    /// </summary>
    [DataContract(Name = "Proxy")]
    public partial class Proxy : IEquatable<Proxy>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Proxy" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Proxy() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Proxy" /> class.
        /// </summary>
        /// <param name="profile">profile.</param>
        /// <param name="generated">generated.</param>
        /// <param name="failed">failed.</param>
        /// <param name="name">name.</param>
        /// <param name="variantId">variantId (default to &quot;default&quot;).</param>
        /// <param name="variantConfig">variantConfig.</param>
        /// <param name="asset">asset (required).</param>
        public Proxy(ProxyProfileMini profile = default(ProxyProfileMini), bool generated = default(bool), bool failed = default(bool), string name = default(string), string variantId = "default", string variantConfig = default(string), int asset = default(int))
        {
            this.Asset = asset;
            this.Profile = profile;
            this.Generated = generated;
            this.Failed = failed;
            this.Name = name;
            // use default value if no "variantId" provided
            this.VariantId = variantId ?? "default";
            this.VariantConfig = variantConfig;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets Urls
        /// </summary>
        [DataMember(Name = "urls", EmitDefaultValue = false)]
        public Dictionary<string, string> Urls { get; private set; }

        /// <summary>
        /// Returns false as Urls should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUrls()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets Profile
        /// </summary>
        [DataMember(Name = "profile", EmitDefaultValue = false)]
        public ProxyProfileMini Profile { get; set; }

        /// <summary>
        /// Gets or Sets FailedReason
        /// </summary>
        [DataMember(Name = "failed_reason", EmitDefaultValue = false)]
        public string FailedReason { get; private set; }

        /// <summary>
        /// Returns false as FailedReason should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFailedReason()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets Transforms
        /// </summary>
        [DataMember(Name = "transforms", EmitDefaultValue = false)]
        public string Transforms { get; private set; }

        /// <summary>
        /// Returns false as Transforms should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTransforms()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets Generated
        /// </summary>
        [DataMember(Name = "generated", EmitDefaultValue = true)]
        public bool Generated { get; set; }

        /// <summary>
        /// Gets or Sets Failed
        /// </summary>
        [DataMember(Name = "failed", EmitDefaultValue = true)]
        public bool Failed { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets VariantId
        /// </summary>
        [DataMember(Name = "variant_id", EmitDefaultValue = false)]
        public string VariantId { get; set; }

        /// <summary>
        /// Gets or Sets VariantConfig
        /// </summary>
        [DataMember(Name = "variant_config", EmitDefaultValue = false)]
        public string VariantConfig { get; set; }

        /// <summary>
        /// Gets or Sets Asset
        /// </summary>
        [DataMember(Name = "asset", IsRequired = true, EmitDefaultValue = false)]
        public int Asset { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Proxy {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Urls: ").Append(Urls).Append("\n");
            sb.Append("  Profile: ").Append(Profile).Append("\n");
            sb.Append("  FailedReason: ").Append(FailedReason).Append("\n");
            sb.Append("  Transforms: ").Append(Transforms).Append("\n");
            sb.Append("  Generated: ").Append(Generated).Append("\n");
            sb.Append("  Failed: ").Append(Failed).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  VariantId: ").Append(VariantId).Append("\n");
            sb.Append("  VariantConfig: ").Append(VariantConfig).Append("\n");
            sb.Append("  Asset: ").Append(Asset).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Proxy);
        }

        /// <summary>
        /// Returns true if Proxy instances are equal
        /// </summary>
        /// <param name="input">Instance of Proxy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Proxy input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Urls == input.Urls ||
                    this.Urls != null &&
                    input.Urls != null &&
                    this.Urls.SequenceEqual(input.Urls)
                ) && 
                (
                    this.Profile == input.Profile ||
                    (this.Profile != null &&
                    this.Profile.Equals(input.Profile))
                ) && 
                (
                    this.FailedReason == input.FailedReason ||
                    (this.FailedReason != null &&
                    this.FailedReason.Equals(input.FailedReason))
                ) && 
                (
                    this.Transforms == input.Transforms ||
                    (this.Transforms != null &&
                    this.Transforms.Equals(input.Transforms))
                ) && 
                (
                    this.Generated == input.Generated ||
                    this.Generated.Equals(input.Generated)
                ) && 
                (
                    this.Failed == input.Failed ||
                    this.Failed.Equals(input.Failed)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.VariantId == input.VariantId ||
                    (this.VariantId != null &&
                    this.VariantId.Equals(input.VariantId))
                ) && 
                (
                    this.VariantConfig == input.VariantConfig ||
                    (this.VariantConfig != null &&
                    this.VariantConfig.Equals(input.VariantConfig))
                ) && 
                (
                    this.Asset == input.Asset ||
                    this.Asset.Equals(input.Asset)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Urls != null)
                    hashCode = hashCode * 59 + this.Urls.GetHashCode();
                if (this.Profile != null)
                    hashCode = hashCode * 59 + this.Profile.GetHashCode();
                if (this.FailedReason != null)
                    hashCode = hashCode * 59 + this.FailedReason.GetHashCode();
                if (this.Transforms != null)
                    hashCode = hashCode * 59 + this.Transforms.GetHashCode();
                hashCode = hashCode * 59 + this.Generated.GetHashCode();
                hashCode = hashCode * 59 + this.Failed.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.VariantId != null)
                    hashCode = hashCode * 59 + this.VariantId.GetHashCode();
                if (this.VariantConfig != null)
                    hashCode = hashCode * 59 + this.VariantConfig.GetHashCode();
                hashCode = hashCode * 59 + this.Asset.GetHashCode();
                return hashCode;
            }
        }

    }

}
