/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// License
    /// </summary>
    [DataContract(Name = "License")]
    public partial class License : IEquatable<License>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="License" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected License() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="License" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="product">product (required).</param>
        /// <param name="serial">serial (required).</param>
        /// <param name="partner">partner (required).</param>
        /// <param name="hardware">hardware.</param>
        /// <param name="hardwareKey">hardwareKey.</param>
        /// <param name="expiry">expiry (required).</param>
        /// <param name="components">components (required).</param>
        /// <param name="componentsExpiry">componentsExpiry (required).</param>
        /// <param name="componentsEnabled">componentsEnabled (required).</param>
        /// <param name="rdcSlots">rdcSlots (required).</param>
        /// <param name="users">users (required).</param>
        /// <param name="thirdPartyCapacity">thirdPartyCapacity (required).</param>
        public License(string name = default(string), string product = default(string), string serial = default(string), string partner = default(string), string hardware = default(string), string hardwareKey = default(string), DateTime? expiry = default(DateTime?), Dictionary<string, bool> components = default(Dictionary<string, bool>), Dictionary<string, DateTime?> componentsExpiry = default(Dictionary<string, DateTime?>), Dictionary<string, bool> componentsEnabled = default(Dictionary<string, bool>), int rdcSlots = default(int), int users = default(int), int? thirdPartyCapacity = default(int?))
        {
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for License and cannot be null");
            // to ensure "product" is required (not null)
            this.Product = product ?? throw new ArgumentNullException("product is a required property for License and cannot be null");
            // to ensure "serial" is required (not null)
            this.Serial = serial ?? throw new ArgumentNullException("serial is a required property for License and cannot be null");
            // to ensure "partner" is required (not null)
            this.Partner = partner ?? throw new ArgumentNullException("partner is a required property for License and cannot be null");
            // to ensure "expiry" is required (not null)
            this.Expiry = expiry ?? throw new ArgumentNullException("expiry is a required property for License and cannot be null");
            // to ensure "components" is required (not null)
            this.Components = components ?? throw new ArgumentNullException("components is a required property for License and cannot be null");
            // to ensure "componentsExpiry" is required (not null)
            this.ComponentsExpiry = componentsExpiry ?? throw new ArgumentNullException("componentsExpiry is a required property for License and cannot be null");
            // to ensure "componentsEnabled" is required (not null)
            this.ComponentsEnabled = componentsEnabled ?? throw new ArgumentNullException("componentsEnabled is a required property for License and cannot be null");
            this.RdcSlots = rdcSlots;
            this.Users = users;
            // to ensure "thirdPartyCapacity" is required (not null)
            this.ThirdPartyCapacity = thirdPartyCapacity ?? throw new ArgumentNullException("thirdPartyCapacity is a required property for License and cannot be null");
            this.Hardware = hardware;
            this.HardwareKey = hardwareKey;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Product
        /// </summary>
        [DataMember(Name = "product", IsRequired = true, EmitDefaultValue = false)]
        public string Product { get; set; }

        /// <summary>
        /// Gets or Sets Serial
        /// </summary>
        [DataMember(Name = "serial", IsRequired = true, EmitDefaultValue = true)]
        public string Serial { get; set; }

        /// <summary>
        /// Gets or Sets Partner
        /// </summary>
        [DataMember(Name = "partner", IsRequired = true, EmitDefaultValue = true)]
        public string Partner { get; set; }

        /// <summary>
        /// Gets or Sets Hardware
        /// </summary>
        [DataMember(Name = "hardware", EmitDefaultValue = false)]
        public string Hardware { get; set; }

        /// <summary>
        /// Gets or Sets HardwareKey
        /// </summary>
        [DataMember(Name = "hardware_key", EmitDefaultValue = false)]
        public string HardwareKey { get; set; }

        /// <summary>
        /// Gets or Sets Expiry
        /// </summary>
        [DataMember(Name = "expiry", IsRequired = true, EmitDefaultValue = true)]
        public DateTime? Expiry { get; set; }

        /// <summary>
        /// Gets or Sets Components
        /// </summary>
        [DataMember(Name = "components", IsRequired = true, EmitDefaultValue = false)]
        public Dictionary<string, bool> Components { get; set; }

        /// <summary>
        /// Gets or Sets ComponentsExpiry
        /// </summary>
        [DataMember(Name = "components_expiry", IsRequired = true, EmitDefaultValue = false)]
        public Dictionary<string, DateTime?> ComponentsExpiry { get; set; }

        /// <summary>
        /// Gets or Sets ComponentsEnabled
        /// </summary>
        [DataMember(Name = "components_enabled", IsRequired = true, EmitDefaultValue = false)]
        public Dictionary<string, bool> ComponentsEnabled { get; set; }

        /// <summary>
        /// Gets or Sets RdcSlots
        /// </summary>
        [DataMember(Name = "rdc_slots", IsRequired = true, EmitDefaultValue = false)]
        public int RdcSlots { get; set; }

        /// <summary>
        /// Gets or Sets Users
        /// </summary>
        [DataMember(Name = "users", IsRequired = true, EmitDefaultValue = false)]
        public int Users { get; set; }

        /// <summary>
        /// Gets or Sets ThirdPartyCapacity
        /// </summary>
        [DataMember(Name = "third_party_capacity", IsRequired = true, EmitDefaultValue = true)]
        public int? ThirdPartyCapacity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class License {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  Serial: ").Append(Serial).Append("\n");
            sb.Append("  Partner: ").Append(Partner).Append("\n");
            sb.Append("  Hardware: ").Append(Hardware).Append("\n");
            sb.Append("  HardwareKey: ").Append(HardwareKey).Append("\n");
            sb.Append("  Expiry: ").Append(Expiry).Append("\n");
            sb.Append("  Components: ").Append(Components).Append("\n");
            sb.Append("  ComponentsExpiry: ").Append(ComponentsExpiry).Append("\n");
            sb.Append("  ComponentsEnabled: ").Append(ComponentsEnabled).Append("\n");
            sb.Append("  RdcSlots: ").Append(RdcSlots).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("  ThirdPartyCapacity: ").Append(ThirdPartyCapacity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as License);
        }

        /// <summary>
        /// Returns true if License instances are equal
        /// </summary>
        /// <param name="input">Instance of License to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(License input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Product == input.Product ||
                    (this.Product != null &&
                    this.Product.Equals(input.Product))
                ) && 
                (
                    this.Serial == input.Serial ||
                    (this.Serial != null &&
                    this.Serial.Equals(input.Serial))
                ) && 
                (
                    this.Partner == input.Partner ||
                    (this.Partner != null &&
                    this.Partner.Equals(input.Partner))
                ) && 
                (
                    this.Hardware == input.Hardware ||
                    (this.Hardware != null &&
                    this.Hardware.Equals(input.Hardware))
                ) && 
                (
                    this.HardwareKey == input.HardwareKey ||
                    (this.HardwareKey != null &&
                    this.HardwareKey.Equals(input.HardwareKey))
                ) && 
                (
                    this.Expiry == input.Expiry ||
                    (this.Expiry != null &&
                    this.Expiry.Equals(input.Expiry))
                ) && 
                (
                    this.Components == input.Components ||
                    this.Components != null &&
                    input.Components != null &&
                    this.Components.SequenceEqual(input.Components)
                ) && 
                (
                    this.ComponentsExpiry == input.ComponentsExpiry ||
                    this.ComponentsExpiry != null &&
                    input.ComponentsExpiry != null &&
                    this.ComponentsExpiry.SequenceEqual(input.ComponentsExpiry)
                ) && 
                (
                    this.ComponentsEnabled == input.ComponentsEnabled ||
                    this.ComponentsEnabled != null &&
                    input.ComponentsEnabled != null &&
                    this.ComponentsEnabled.SequenceEqual(input.ComponentsEnabled)
                ) && 
                (
                    this.RdcSlots == input.RdcSlots ||
                    this.RdcSlots.Equals(input.RdcSlots)
                ) && 
                (
                    this.Users == input.Users ||
                    this.Users.Equals(input.Users)
                ) && 
                (
                    this.ThirdPartyCapacity == input.ThirdPartyCapacity ||
                    (this.ThirdPartyCapacity != null &&
                    this.ThirdPartyCapacity.Equals(input.ThirdPartyCapacity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Product != null)
                    hashCode = hashCode * 59 + this.Product.GetHashCode();
                if (this.Serial != null)
                    hashCode = hashCode * 59 + this.Serial.GetHashCode();
                if (this.Partner != null)
                    hashCode = hashCode * 59 + this.Partner.GetHashCode();
                if (this.Hardware != null)
                    hashCode = hashCode * 59 + this.Hardware.GetHashCode();
                if (this.HardwareKey != null)
                    hashCode = hashCode * 59 + this.HardwareKey.GetHashCode();
                if (this.Expiry != null)
                    hashCode = hashCode * 59 + this.Expiry.GetHashCode();
                if (this.Components != null)
                    hashCode = hashCode * 59 + this.Components.GetHashCode();
                if (this.ComponentsExpiry != null)
                    hashCode = hashCode * 59 + this.ComponentsExpiry.GetHashCode();
                if (this.ComponentsEnabled != null)
                    hashCode = hashCode * 59 + this.ComponentsEnabled.GetHashCode();
                hashCode = hashCode * 59 + this.RdcSlots.GetHashCode();
                hashCode = hashCode * 59 + this.Users.GetHashCode();
                if (this.ThirdPartyCapacity != null)
                    hashCode = hashCode * 59 + this.ThirdPartyCapacity.GetHashCode();
                return hashCode;
            }
        }

    }

}
