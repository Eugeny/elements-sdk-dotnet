/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// TimelineExportRequest
    /// </summary>
    [DataContract(Name = "TimelineExportRequest")]
    public partial class TimelineExportRequest : IEquatable<TimelineExportRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TimelineExportRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TimelineExportRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TimelineExportRequest" /> class.
        /// </summary>
        /// <param name="project">project (required).</param>
        /// <param name="sequence">sequence (required).</param>
        /// <param name="format">format (required).</param>
        public TimelineExportRequest(Object project = default(Object), string sequence = default(string), string format = default(string))
        {
            // to ensure "project" is required (not null)
            this.Project = project ?? throw new ArgumentNullException("project is a required property for TimelineExportRequest and cannot be null");
            // to ensure "sequence" is required (not null)
            this.Sequence = sequence ?? throw new ArgumentNullException("sequence is a required property for TimelineExportRequest and cannot be null");
            // to ensure "format" is required (not null)
            this.Format = format ?? throw new ArgumentNullException("format is a required property for TimelineExportRequest and cannot be null");
        }

        /// <summary>
        /// Gets or Sets Project
        /// </summary>
        [DataMember(Name = "project", IsRequired = true, EmitDefaultValue = false)]
        public Object Project { get; set; }

        /// <summary>
        /// Gets or Sets Sequence
        /// </summary>
        [DataMember(Name = "sequence", IsRequired = true, EmitDefaultValue = false)]
        public string Sequence { get; set; }

        /// <summary>
        /// Gets or Sets Format
        /// </summary>
        [DataMember(Name = "format", IsRequired = true, EmitDefaultValue = false)]
        public string Format { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TimelineExportRequest {\n");
            sb.Append("  Project: ").Append(Project).Append("\n");
            sb.Append("  Sequence: ").Append(Sequence).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TimelineExportRequest);
        }

        /// <summary>
        /// Returns true if TimelineExportRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TimelineExportRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimelineExportRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Project == input.Project ||
                    (this.Project != null &&
                    this.Project.Equals(input.Project))
                ) && 
                (
                    this.Sequence == input.Sequence ||
                    (this.Sequence != null &&
                    this.Sequence.Equals(input.Sequence))
                ) && 
                (
                    this.Format == input.Format ||
                    (this.Format != null &&
                    this.Format.Equals(input.Format))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Project != null)
                    hashCode = hashCode * 59 + this.Project.GetHashCode();
                if (this.Sequence != null)
                    hashCode = hashCode * 59 + this.Sequence.GetHashCode();
                if (this.Format != null)
                    hashCode = hashCode * 59 + this.Format.GetHashCode();
                return hashCode;
            }
        }

    }

}
