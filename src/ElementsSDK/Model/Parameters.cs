/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// Parameters
    /// </summary>
    [DataContract(Name = "Parameters")]
    public partial class Parameters : IEquatable<Parameters>
    {
        /// <summary>
        /// Defines MediaProxyH264Preset
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MediaProxyH264PresetEnum
        {
            /// <summary>
            /// Enum Ultrafast for value: ultrafast
            /// </summary>
            [EnumMember(Value = "ultrafast")]
            Ultrafast = 1,

            /// <summary>
            /// Enum Superfast for value: superfast
            /// </summary>
            [EnumMember(Value = "superfast")]
            Superfast = 2,

            /// <summary>
            /// Enum Veryfast for value: veryfast
            /// </summary>
            [EnumMember(Value = "veryfast")]
            Veryfast = 3,

            /// <summary>
            /// Enum Faster for value: faster
            /// </summary>
            [EnumMember(Value = "faster")]
            Faster = 4,

            /// <summary>
            /// Enum Fast for value: fast
            /// </summary>
            [EnumMember(Value = "fast")]
            Fast = 5,

            /// <summary>
            /// Enum Medium for value: medium
            /// </summary>
            [EnumMember(Value = "medium")]
            Medium = 6,

            /// <summary>
            /// Enum Slow for value: slow
            /// </summary>
            [EnumMember(Value = "slow")]
            Slow = 7,

            /// <summary>
            /// Enum Slower for value: slower
            /// </summary>
            [EnumMember(Value = "slower")]
            Slower = 8,

            /// <summary>
            /// Enum Veryslow for value: veryslow
            /// </summary>
            [EnumMember(Value = "veryslow")]
            Veryslow = 9

        }


        /// <summary>
        /// Gets or Sets MediaProxyH264Preset
        /// </summary>
        [DataMember(Name = "media_proxy_h264_preset", EmitDefaultValue = false)]
        public MediaProxyH264PresetEnum? MediaProxyH264Preset { get; set; }
        /// <summary>
        /// Defines MediaDefaultCustomFieldType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MediaDefaultCustomFieldTypeEnum
        {
            /// <summary>
            /// Enum File for value: file
            /// </summary>
            [EnumMember(Value = "file")]
            File = 1,

            /// <summary>
            /// Enum Asset for value: asset
            /// </summary>
            [EnumMember(Value = "asset")]
            Asset = 2

        }


        /// <summary>
        /// Gets or Sets MediaDefaultCustomFieldType
        /// </summary>
        [DataMember(Name = "media_default_custom_field_type", EmitDefaultValue = false)]
        public MediaDefaultCustomFieldTypeEnum? MediaDefaultCustomFieldType { get; set; }
        /// <summary>
        /// Defines MediaForceShowDeleted
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MediaForceShowDeletedEnum
        {
            /// <summary>
            /// Enum True for value: true
            /// </summary>
            True = true,

            /// <summary>
            /// Enum False for value: false
            /// </summary>
            False = false

        }


        /// <summary>
        /// Gets or Sets MediaForceShowDeleted
        /// </summary>
        [DataMember(Name = "media_force_show_deleted", EmitDefaultValue = true)]
        public MediaForceShowDeletedEnum? MediaForceShowDeleted { get; set; }
        /// <summary>
        /// Defines MediaDefaultDeleteBehaviour
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MediaDefaultDeleteBehaviourEnum
        {
            /// <summary>
            /// Enum Disk for value: disk
            /// </summary>
            [EnumMember(Value = "disk")]
            Disk = 1,

            /// <summary>
            /// Enum Database for value: database
            /// </summary>
            [EnumMember(Value = "database")]
            Database = 2,

            /// <summary>
            /// Enum Completely for value: completely
            /// </summary>
            [EnumMember(Value = "completely")]
            Completely = 3

        }


        /// <summary>
        /// Gets or Sets MediaDefaultDeleteBehaviour
        /// </summary>
        [DataMember(Name = "media_default_delete_behaviour", EmitDefaultValue = false)]
        public MediaDefaultDeleteBehaviourEnum? MediaDefaultDeleteBehaviour { get; set; }
        /// <summary>
        /// Defines SmtpTls
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SmtpTlsEnum
        {
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,

            /// <summary>
            /// Enum Ssl for value: ssl
            /// </summary>
            [EnumMember(Value = "ssl")]
            Ssl = 2,

            /// <summary>
            /// Enum Starttls for value: starttls
            /// </summary>
            [EnumMember(Value = "starttls")]
            Starttls = 3

        }


        /// <summary>
        /// Gets or Sets SmtpTls
        /// </summary>
        [DataMember(Name = "smtp_tls", EmitDefaultValue = false)]
        public SmtpTlsEnum? SmtpTls { get; set; }
        /// <summary>
        /// Defines Language
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LanguageEnum
        {
            /// <summary>
            /// Enum En for value: en
            /// </summary>
            [EnumMember(Value = "en")]
            En = 1,

            /// <summary>
            /// Enum Fr for value: fr
            /// </summary>
            [EnumMember(Value = "fr")]
            Fr = 2,

            /// <summary>
            /// Enum De for value: de
            /// </summary>
            [EnumMember(Value = "de")]
            De = 3,

            /// <summary>
            /// Enum Ru for value: ru
            /// </summary>
            [EnumMember(Value = "ru")]
            Ru = 4

        }


        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public LanguageEnum? Language { get; set; }
        /// <summary>
        /// Defines HttpsRedirect
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HttpsRedirectEnum
        {
            /// <summary>
            /// Enum Domain for value: domain
            /// </summary>
            [EnumMember(Value = "domain")]
            Domain = 1,

            /// <summary>
            /// Enum On for value: on
            /// </summary>
            [EnumMember(Value = "on")]
            On = 2

        }


        /// <summary>
        /// Gets or Sets HttpsRedirect
        /// </summary>
        [DataMember(Name = "https_redirect", EmitDefaultValue = true)]
        public HttpsRedirectEnum? HttpsRedirect { get; set; }
        /// <summary>
        /// Defines OtpPolicy
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OtpPolicyEnum
        {
            /// <summary>
            /// Enum AdminOnly for value: admin-only
            /// </summary>
            [EnumMember(Value = "admin-only")]
            AdminOnly = 1,

            /// <summary>
            /// Enum SelfServiceSetupOnly for value: self-service-setup-only
            /// </summary>
            [EnumMember(Value = "self-service-setup-only")]
            SelfServiceSetupOnly = 2,

            /// <summary>
            /// Enum SelfServiceAll for value: self-service-all
            /// </summary>
            [EnumMember(Value = "self-service-all")]
            SelfServiceAll = 3

        }


        /// <summary>
        /// Gets or Sets OtpPolicy
        /// </summary>
        [DataMember(Name = "otp_policy", EmitDefaultValue = false)]
        public OtpPolicyEnum? OtpPolicy { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Parameters" /> class.
        /// </summary>
        /// <param name="analytics">analytics.</param>
        /// <param name="identifyCommand">identifyCommand.</param>
        /// <param name="externalUrl">http://host/.</param>
        /// <param name="brandingCss">brandingCss.</param>
        /// <param name="brandingLogo">brandingLogo.</param>
        /// <param name="fmNewDirectoryMode">fmNewDirectoryMode.</param>
        /// <param name="icapServer">icapServer.</param>
        /// <param name="icapPort">icapPort.</param>
        /// <param name="icapService">icapService.</param>
        /// <param name="icapScanUploads">icapScanUploads.</param>
        /// <param name="ltfsDefaultRestoreToOriginalLocation">ltfsDefaultRestoreToOriginalLocation.</param>
        /// <param name="ltfsDefaultSearchDirectories">ltfsDefaultSearchDirectories.</param>
        /// <param name="ltfsLibraryAddress">ltfsLibraryAddress.</param>
        /// <param name="mediaAutoPlay">mediaAutoPlay.</param>
        /// <param name="mediaAutoTransport">mediaAutoTransport.</param>
        /// <param name="mediaAutoScan">mediaAutoScan.</param>
        /// <param name="mediaAutoProxy">mediaAutoProxy.</param>
        /// <param name="mediaAutoVeritoneUpload">mediaAutoVeritoneUpload.</param>
        /// <param name="mediaProxyH264Preset">mediaProxyH264Preset.</param>
        /// <param name="mediaDefaultCustomFieldType">mediaDefaultCustomFieldType.</param>
        /// <param name="mediaForceShowDeleted">mediaForceShowDeleted.</param>
        /// <param name="mediaDefaultDeleteBehaviour">mediaDefaultDeleteBehaviour.</param>
        /// <param name="mediaRecycleBin">Recycle bin is usually in the .recycle-bin folder in the volume root.</param>
        /// <param name="fileManagerRecycleBin">Recycle bins are usually either in Workspace/Share or Volume folder.</param>
        /// <param name="ntpOfferSync">ntpOfferSync.</param>
        /// <param name="slugifyWorkspacePath">Affects new workspaces only.</param>
        /// <param name="slugifyShares">Requires.</param>
        /// <param name="smtpFrom">smtpFrom.</param>
        /// <param name="smtpServer">smtpServer.</param>
        /// <param name="smtpPort">smtpPort.</param>
        /// <param name="smtpTls">smtpTls.</param>
        /// <param name="smtpUsername">smtpUsername.</param>
        /// <param name="smtpEhlo">smtpEhlo.</param>
        /// <param name="mailStyling">mailStyling.</param>
        /// <param name="tasksLimit">tasksLimit.</param>
        /// <param name="tasksHardLimit">tasksHardLimit.</param>
        /// <param name="umaskAfp">umaskAfp.</param>
        /// <param name="umaskSmb">umaskSmb.</param>
        /// <param name="usersDefaultPermissions">Copy this value from an existing user.</param>
        /// <param name="workspacesFolderTemplatePath">workspacesFolderTemplatePath.</param>
        /// <param name="workspacesMode">workspacesMode.</param>
        /// <param name="workspacesPath">workspacesPath.</param>
        /// <param name="language">language.</param>
        /// <param name="emailLogoUrl">emailLogoUrl.</param>
        /// <param name="mediaKeepSelectionWhenBrowsing">mediaKeepSelectionWhenBrowsing.</param>
        /// <param name="tasksRunScheduled">tasksRunScheduled.</param>
        /// <param name="httpsRedirect">httpsRedirect.</param>
        /// <param name="sslCertificate">sslCertificate.</param>
        /// <param name="sslCertificateKey">sslCertificateKey.</param>
        /// <param name="otpPolicy">otpPolicy.</param>
        public Parameters(bool analytics = default(bool), string identifyCommand = default(string), string externalUrl = default(string), string brandingCss = default(string), string brandingLogo = default(string), string fmNewDirectoryMode = default(string), string icapServer = default(string), int icapPort = default(int), string icapService = default(string), bool icapScanUploads = default(bool), bool ltfsDefaultRestoreToOriginalLocation = default(bool), bool ltfsDefaultSearchDirectories = default(bool), string ltfsLibraryAddress = default(string), bool mediaAutoPlay = default(bool), bool mediaAutoTransport = default(bool), bool mediaAutoScan = default(bool), bool mediaAutoProxy = default(bool), bool mediaAutoVeritoneUpload = default(bool), MediaProxyH264PresetEnum? mediaProxyH264Preset = default(MediaProxyH264PresetEnum?), MediaDefaultCustomFieldTypeEnum? mediaDefaultCustomFieldType = default(MediaDefaultCustomFieldTypeEnum?), MediaForceShowDeletedEnum? mediaForceShowDeleted = default(MediaForceShowDeletedEnum?), MediaDefaultDeleteBehaviourEnum? mediaDefaultDeleteBehaviour = default(MediaDefaultDeleteBehaviourEnum?), bool mediaRecycleBin = default(bool), bool fileManagerRecycleBin = default(bool), bool ntpOfferSync = default(bool), bool slugifyWorkspacePath = default(bool), bool slugifyShares = default(bool), string smtpFrom = default(string), string smtpServer = default(string), int smtpPort = default(int), SmtpTlsEnum? smtpTls = default(SmtpTlsEnum?), string smtpUsername = default(string), string smtpEhlo = default(string), string mailStyling = default(string), int tasksLimit = default(int), int tasksHardLimit = default(int), string umaskAfp = default(string), string umaskSmb = default(string), string usersDefaultPermissions = default(string), string workspacesFolderTemplatePath = default(string), string workspacesMode = default(string), string workspacesPath = default(string), LanguageEnum? language = default(LanguageEnum?), string emailLogoUrl = default(string), bool mediaKeepSelectionWhenBrowsing = default(bool), bool tasksRunScheduled = default(bool), HttpsRedirectEnum? httpsRedirect = default(HttpsRedirectEnum?), string sslCertificate = default(string), string sslCertificateKey = default(string), OtpPolicyEnum? otpPolicy = default(OtpPolicyEnum?))
        {
            this.Analytics = analytics;
            this.IdentifyCommand = identifyCommand;
            this.ExternalUrl = externalUrl;
            this.BrandingCss = brandingCss;
            this.BrandingLogo = brandingLogo;
            this.FmNewDirectoryMode = fmNewDirectoryMode;
            this.IcapServer = icapServer;
            this.IcapPort = icapPort;
            this.IcapService = icapService;
            this.IcapScanUploads = icapScanUploads;
            this.LtfsDefaultRestoreToOriginalLocation = ltfsDefaultRestoreToOriginalLocation;
            this.LtfsDefaultSearchDirectories = ltfsDefaultSearchDirectories;
            this.LtfsLibraryAddress = ltfsLibraryAddress;
            this.MediaAutoPlay = mediaAutoPlay;
            this.MediaAutoTransport = mediaAutoTransport;
            this.MediaAutoScan = mediaAutoScan;
            this.MediaAutoProxy = mediaAutoProxy;
            this.MediaAutoVeritoneUpload = mediaAutoVeritoneUpload;
            this.MediaProxyH264Preset = mediaProxyH264Preset;
            this.MediaDefaultCustomFieldType = mediaDefaultCustomFieldType;
            this.MediaForceShowDeleted = mediaForceShowDeleted;
            this.MediaDefaultDeleteBehaviour = mediaDefaultDeleteBehaviour;
            this.MediaRecycleBin = mediaRecycleBin;
            this.FileManagerRecycleBin = fileManagerRecycleBin;
            this.NtpOfferSync = ntpOfferSync;
            this.SlugifyWorkspacePath = slugifyWorkspacePath;
            this.SlugifyShares = slugifyShares;
            this.SmtpFrom = smtpFrom;
            this.SmtpServer = smtpServer;
            this.SmtpPort = smtpPort;
            this.SmtpTls = smtpTls;
            this.SmtpUsername = smtpUsername;
            this.SmtpEhlo = smtpEhlo;
            this.MailStyling = mailStyling;
            this.TasksLimit = tasksLimit;
            this.TasksHardLimit = tasksHardLimit;
            this.UmaskAfp = umaskAfp;
            this.UmaskSmb = umaskSmb;
            this.UsersDefaultPermissions = usersDefaultPermissions;
            this.WorkspacesFolderTemplatePath = workspacesFolderTemplatePath;
            this.WorkspacesMode = workspacesMode;
            this.WorkspacesPath = workspacesPath;
            this.Language = language;
            this.EmailLogoUrl = emailLogoUrl;
            this.MediaKeepSelectionWhenBrowsing = mediaKeepSelectionWhenBrowsing;
            this.TasksRunScheduled = tasksRunScheduled;
            this.HttpsRedirect = httpsRedirect;
            this.SslCertificate = sslCertificate;
            this.SslCertificateKey = sslCertificateKey;
            this.OtpPolicy = otpPolicy;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets Analytics
        /// </summary>
        [DataMember(Name = "analytics", EmitDefaultValue = true)]
        public bool Analytics { get; set; }

        /// <summary>
        /// Gets or Sets IdentifyCommand
        /// </summary>
        [DataMember(Name = "identify_command", EmitDefaultValue = false)]
        public string IdentifyCommand { get; set; }

        /// <summary>
        /// http://host/
        /// </summary>
        /// <value>http://host/</value>
        [DataMember(Name = "external_url", EmitDefaultValue = true)]
        public string ExternalUrl { get; set; }

        /// <summary>
        /// Gets or Sets BrandingCss
        /// </summary>
        [DataMember(Name = "branding_css", EmitDefaultValue = false)]
        public string BrandingCss { get; set; }

        /// <summary>
        /// Gets or Sets BrandingLogo
        /// </summary>
        [DataMember(Name = "branding_logo", EmitDefaultValue = false)]
        public string BrandingLogo { get; set; }

        /// <summary>
        /// Gets or Sets FmNewDirectoryMode
        /// </summary>
        [DataMember(Name = "fm_new_directory_mode", EmitDefaultValue = false)]
        public string FmNewDirectoryMode { get; set; }

        /// <summary>
        /// Gets or Sets IcapServer
        /// </summary>
        [DataMember(Name = "icap_server", EmitDefaultValue = false)]
        public string IcapServer { get; set; }

        /// <summary>
        /// Gets or Sets IcapPort
        /// </summary>
        [DataMember(Name = "icap_port", EmitDefaultValue = false)]
        public int IcapPort { get; set; }

        /// <summary>
        /// Gets or Sets IcapService
        /// </summary>
        [DataMember(Name = "icap_service", EmitDefaultValue = false)]
        public string IcapService { get; set; }

        /// <summary>
        /// Gets or Sets IcapScanUploads
        /// </summary>
        [DataMember(Name = "icap_scan_uploads", EmitDefaultValue = true)]
        public bool IcapScanUploads { get; set; }

        /// <summary>
        /// Gets or Sets LtfsDefaultRestoreToOriginalLocation
        /// </summary>
        [DataMember(Name = "ltfs_default_restore_to_original_location", EmitDefaultValue = true)]
        public bool LtfsDefaultRestoreToOriginalLocation { get; set; }

        /// <summary>
        /// Gets or Sets LtfsDefaultSearchDirectories
        /// </summary>
        [DataMember(Name = "ltfs_default_search_directories", EmitDefaultValue = true)]
        public bool LtfsDefaultSearchDirectories { get; set; }

        /// <summary>
        /// Gets or Sets LtfsLibraryAddress
        /// </summary>
        [DataMember(Name = "ltfs_library_address", EmitDefaultValue = true)]
        public string LtfsLibraryAddress { get; set; }

        /// <summary>
        /// Gets or Sets MediaAutoPlay
        /// </summary>
        [DataMember(Name = "media_auto_play", EmitDefaultValue = true)]
        public bool MediaAutoPlay { get; set; }

        /// <summary>
        /// Gets or Sets MediaAutoTransport
        /// </summary>
        [DataMember(Name = "media_auto_transport", EmitDefaultValue = true)]
        public bool MediaAutoTransport { get; set; }

        /// <summary>
        /// Gets or Sets MediaAutoScan
        /// </summary>
        [DataMember(Name = "media_auto_scan", EmitDefaultValue = true)]
        public bool MediaAutoScan { get; set; }

        /// <summary>
        /// Gets or Sets MediaAutoProxy
        /// </summary>
        [DataMember(Name = "media_auto_proxy", EmitDefaultValue = true)]
        public bool MediaAutoProxy { get; set; }

        /// <summary>
        /// Gets or Sets MediaAutoVeritoneUpload
        /// </summary>
        [DataMember(Name = "media_auto_veritone_upload", EmitDefaultValue = true)]
        public bool MediaAutoVeritoneUpload { get; set; }

        /// <summary>
        /// Recycle bin is usually in the .recycle-bin folder in the volume root
        /// </summary>
        /// <value>Recycle bin is usually in the .recycle-bin folder in the volume root</value>
        [DataMember(Name = "media_recycle_bin", EmitDefaultValue = true)]
        public bool MediaRecycleBin { get; set; }

        /// <summary>
        /// Recycle bins are usually either in Workspace/Share or Volume folder
        /// </summary>
        /// <value>Recycle bins are usually either in Workspace/Share or Volume folder</value>
        [DataMember(Name = "file_manager_recycle_bin", EmitDefaultValue = true)]
        public bool FileManagerRecycleBin { get; set; }

        /// <summary>
        /// Gets or Sets NtpOfferSync
        /// </summary>
        [DataMember(Name = "ntp_offer_sync", EmitDefaultValue = true)]
        public bool NtpOfferSync { get; set; }

        /// <summary>
        /// Affects new workspaces only
        /// </summary>
        /// <value>Affects new workspaces only</value>
        [DataMember(Name = "slugify_workspace_path", EmitDefaultValue = true)]
        public bool SlugifyWorkspacePath { get; set; }

        /// <summary>
        /// Requires
        /// </summary>
        /// <value>Requires</value>
        [DataMember(Name = "slugify_shares", EmitDefaultValue = true)]
        public bool SlugifyShares { get; set; }

        /// <summary>
        /// Gets or Sets SmtpFrom
        /// </summary>
        [DataMember(Name = "smtp_from", EmitDefaultValue = false)]
        public string SmtpFrom { get; set; }

        /// <summary>
        /// Gets or Sets SmtpServer
        /// </summary>
        [DataMember(Name = "smtp_server", EmitDefaultValue = false)]
        public string SmtpServer { get; set; }

        /// <summary>
        /// Gets or Sets SmtpPort
        /// </summary>
        [DataMember(Name = "smtp_port", EmitDefaultValue = false)]
        public int SmtpPort { get; set; }

        /// <summary>
        /// Gets or Sets SmtpUsername
        /// </summary>
        [DataMember(Name = "smtp_username", EmitDefaultValue = false)]
        public string SmtpUsername { get; set; }

        /// <summary>
        /// Gets or Sets SmtpEhlo
        /// </summary>
        [DataMember(Name = "smtp_ehlo", EmitDefaultValue = false)]
        public string SmtpEhlo { get; set; }

        /// <summary>
        /// Gets or Sets MailStyling
        /// </summary>
        [DataMember(Name = "mail_styling", EmitDefaultValue = false)]
        public string MailStyling { get; set; }

        /// <summary>
        /// Gets or Sets TasksLimit
        /// </summary>
        [DataMember(Name = "tasks_limit", EmitDefaultValue = false)]
        public int TasksLimit { get; set; }

        /// <summary>
        /// Gets or Sets TasksHardLimit
        /// </summary>
        [DataMember(Name = "tasks_hard_limit", EmitDefaultValue = false)]
        public int TasksHardLimit { get; set; }

        /// <summary>
        /// Gets or Sets UmaskAfp
        /// </summary>
        [DataMember(Name = "umask_afp", EmitDefaultValue = false)]
        public string UmaskAfp { get; set; }

        /// <summary>
        /// Gets or Sets UmaskSmb
        /// </summary>
        [DataMember(Name = "umask_smb", EmitDefaultValue = false)]
        public string UmaskSmb { get; set; }

        /// <summary>
        /// Copy this value from an existing user
        /// </summary>
        /// <value>Copy this value from an existing user</value>
        [DataMember(Name = "users_default_permissions", EmitDefaultValue = false)]
        public string UsersDefaultPermissions { get; set; }

        /// <summary>
        /// Gets or Sets WorkspacesFolderTemplatePath
        /// </summary>
        [DataMember(Name = "workspaces_folder_template_path", EmitDefaultValue = false)]
        public string WorkspacesFolderTemplatePath { get; set; }

        /// <summary>
        /// Gets or Sets WorkspacesMode
        /// </summary>
        [DataMember(Name = "workspaces_mode", EmitDefaultValue = false)]
        public string WorkspacesMode { get; set; }

        /// <summary>
        /// Gets or Sets WorkspacesPath
        /// </summary>
        [DataMember(Name = "workspaces_path", EmitDefaultValue = false)]
        public string WorkspacesPath { get; set; }

        /// <summary>
        /// Gets or Sets EmailLogoUrl
        /// </summary>
        [DataMember(Name = "email_logo_url", EmitDefaultValue = true)]
        public string EmailLogoUrl { get; set; }

        /// <summary>
        /// Gets or Sets MediaKeepSelectionWhenBrowsing
        /// </summary>
        [DataMember(Name = "media_keep_selection_when_browsing", EmitDefaultValue = true)]
        public bool MediaKeepSelectionWhenBrowsing { get; set; }

        /// <summary>
        /// Gets or Sets TasksRunScheduled
        /// </summary>
        [DataMember(Name = "tasks_run_scheduled", EmitDefaultValue = true)]
        public bool TasksRunScheduled { get; set; }

        /// <summary>
        /// Gets or Sets SslCertificate
        /// </summary>
        [DataMember(Name = "ssl_certificate", EmitDefaultValue = true)]
        public string SslCertificate { get; set; }

        /// <summary>
        /// Gets or Sets SslCertificateKey
        /// </summary>
        [DataMember(Name = "ssl_certificate_key", EmitDefaultValue = true)]
        public string SslCertificateKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Parameters {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Analytics: ").Append(Analytics).Append("\n");
            sb.Append("  IdentifyCommand: ").Append(IdentifyCommand).Append("\n");
            sb.Append("  ExternalUrl: ").Append(ExternalUrl).Append("\n");
            sb.Append("  BrandingCss: ").Append(BrandingCss).Append("\n");
            sb.Append("  BrandingLogo: ").Append(BrandingLogo).Append("\n");
            sb.Append("  FmNewDirectoryMode: ").Append(FmNewDirectoryMode).Append("\n");
            sb.Append("  IcapServer: ").Append(IcapServer).Append("\n");
            sb.Append("  IcapPort: ").Append(IcapPort).Append("\n");
            sb.Append("  IcapService: ").Append(IcapService).Append("\n");
            sb.Append("  IcapScanUploads: ").Append(IcapScanUploads).Append("\n");
            sb.Append("  LtfsDefaultRestoreToOriginalLocation: ").Append(LtfsDefaultRestoreToOriginalLocation).Append("\n");
            sb.Append("  LtfsDefaultSearchDirectories: ").Append(LtfsDefaultSearchDirectories).Append("\n");
            sb.Append("  LtfsLibraryAddress: ").Append(LtfsLibraryAddress).Append("\n");
            sb.Append("  MediaAutoPlay: ").Append(MediaAutoPlay).Append("\n");
            sb.Append("  MediaAutoTransport: ").Append(MediaAutoTransport).Append("\n");
            sb.Append("  MediaAutoScan: ").Append(MediaAutoScan).Append("\n");
            sb.Append("  MediaAutoProxy: ").Append(MediaAutoProxy).Append("\n");
            sb.Append("  MediaAutoVeritoneUpload: ").Append(MediaAutoVeritoneUpload).Append("\n");
            sb.Append("  MediaProxyH264Preset: ").Append(MediaProxyH264Preset).Append("\n");
            sb.Append("  MediaDefaultCustomFieldType: ").Append(MediaDefaultCustomFieldType).Append("\n");
            sb.Append("  MediaForceShowDeleted: ").Append(MediaForceShowDeleted).Append("\n");
            sb.Append("  MediaDefaultDeleteBehaviour: ").Append(MediaDefaultDeleteBehaviour).Append("\n");
            sb.Append("  MediaRecycleBin: ").Append(MediaRecycleBin).Append("\n");
            sb.Append("  FileManagerRecycleBin: ").Append(FileManagerRecycleBin).Append("\n");
            sb.Append("  NtpOfferSync: ").Append(NtpOfferSync).Append("\n");
            sb.Append("  SlugifyWorkspacePath: ").Append(SlugifyWorkspacePath).Append("\n");
            sb.Append("  SlugifyShares: ").Append(SlugifyShares).Append("\n");
            sb.Append("  SmtpFrom: ").Append(SmtpFrom).Append("\n");
            sb.Append("  SmtpServer: ").Append(SmtpServer).Append("\n");
            sb.Append("  SmtpPort: ").Append(SmtpPort).Append("\n");
            sb.Append("  SmtpTls: ").Append(SmtpTls).Append("\n");
            sb.Append("  SmtpUsername: ").Append(SmtpUsername).Append("\n");
            sb.Append("  SmtpEhlo: ").Append(SmtpEhlo).Append("\n");
            sb.Append("  MailStyling: ").Append(MailStyling).Append("\n");
            sb.Append("  TasksLimit: ").Append(TasksLimit).Append("\n");
            sb.Append("  TasksHardLimit: ").Append(TasksHardLimit).Append("\n");
            sb.Append("  UmaskAfp: ").Append(UmaskAfp).Append("\n");
            sb.Append("  UmaskSmb: ").Append(UmaskSmb).Append("\n");
            sb.Append("  UsersDefaultPermissions: ").Append(UsersDefaultPermissions).Append("\n");
            sb.Append("  WorkspacesFolderTemplatePath: ").Append(WorkspacesFolderTemplatePath).Append("\n");
            sb.Append("  WorkspacesMode: ").Append(WorkspacesMode).Append("\n");
            sb.Append("  WorkspacesPath: ").Append(WorkspacesPath).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  EmailLogoUrl: ").Append(EmailLogoUrl).Append("\n");
            sb.Append("  MediaKeepSelectionWhenBrowsing: ").Append(MediaKeepSelectionWhenBrowsing).Append("\n");
            sb.Append("  TasksRunScheduled: ").Append(TasksRunScheduled).Append("\n");
            sb.Append("  HttpsRedirect: ").Append(HttpsRedirect).Append("\n");
            sb.Append("  SslCertificate: ").Append(SslCertificate).Append("\n");
            sb.Append("  SslCertificateKey: ").Append(SslCertificateKey).Append("\n");
            sb.Append("  OtpPolicy: ").Append(OtpPolicy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Parameters);
        }

        /// <summary>
        /// Returns true if Parameters instances are equal
        /// </summary>
        /// <param name="input">Instance of Parameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Parameters input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Analytics == input.Analytics ||
                    this.Analytics.Equals(input.Analytics)
                ) && 
                (
                    this.IdentifyCommand == input.IdentifyCommand ||
                    (this.IdentifyCommand != null &&
                    this.IdentifyCommand.Equals(input.IdentifyCommand))
                ) && 
                (
                    this.ExternalUrl == input.ExternalUrl ||
                    (this.ExternalUrl != null &&
                    this.ExternalUrl.Equals(input.ExternalUrl))
                ) && 
                (
                    this.BrandingCss == input.BrandingCss ||
                    (this.BrandingCss != null &&
                    this.BrandingCss.Equals(input.BrandingCss))
                ) && 
                (
                    this.BrandingLogo == input.BrandingLogo ||
                    (this.BrandingLogo != null &&
                    this.BrandingLogo.Equals(input.BrandingLogo))
                ) && 
                (
                    this.FmNewDirectoryMode == input.FmNewDirectoryMode ||
                    (this.FmNewDirectoryMode != null &&
                    this.FmNewDirectoryMode.Equals(input.FmNewDirectoryMode))
                ) && 
                (
                    this.IcapServer == input.IcapServer ||
                    (this.IcapServer != null &&
                    this.IcapServer.Equals(input.IcapServer))
                ) && 
                (
                    this.IcapPort == input.IcapPort ||
                    this.IcapPort.Equals(input.IcapPort)
                ) && 
                (
                    this.IcapService == input.IcapService ||
                    (this.IcapService != null &&
                    this.IcapService.Equals(input.IcapService))
                ) && 
                (
                    this.IcapScanUploads == input.IcapScanUploads ||
                    this.IcapScanUploads.Equals(input.IcapScanUploads)
                ) && 
                (
                    this.LtfsDefaultRestoreToOriginalLocation == input.LtfsDefaultRestoreToOriginalLocation ||
                    this.LtfsDefaultRestoreToOriginalLocation.Equals(input.LtfsDefaultRestoreToOriginalLocation)
                ) && 
                (
                    this.LtfsDefaultSearchDirectories == input.LtfsDefaultSearchDirectories ||
                    this.LtfsDefaultSearchDirectories.Equals(input.LtfsDefaultSearchDirectories)
                ) && 
                (
                    this.LtfsLibraryAddress == input.LtfsLibraryAddress ||
                    (this.LtfsLibraryAddress != null &&
                    this.LtfsLibraryAddress.Equals(input.LtfsLibraryAddress))
                ) && 
                (
                    this.MediaAutoPlay == input.MediaAutoPlay ||
                    this.MediaAutoPlay.Equals(input.MediaAutoPlay)
                ) && 
                (
                    this.MediaAutoTransport == input.MediaAutoTransport ||
                    this.MediaAutoTransport.Equals(input.MediaAutoTransport)
                ) && 
                (
                    this.MediaAutoScan == input.MediaAutoScan ||
                    this.MediaAutoScan.Equals(input.MediaAutoScan)
                ) && 
                (
                    this.MediaAutoProxy == input.MediaAutoProxy ||
                    this.MediaAutoProxy.Equals(input.MediaAutoProxy)
                ) && 
                (
                    this.MediaAutoVeritoneUpload == input.MediaAutoVeritoneUpload ||
                    this.MediaAutoVeritoneUpload.Equals(input.MediaAutoVeritoneUpload)
                ) && 
                (
                    this.MediaProxyH264Preset == input.MediaProxyH264Preset ||
                    this.MediaProxyH264Preset.Equals(input.MediaProxyH264Preset)
                ) && 
                (
                    this.MediaDefaultCustomFieldType == input.MediaDefaultCustomFieldType ||
                    this.MediaDefaultCustomFieldType.Equals(input.MediaDefaultCustomFieldType)
                ) && 
                (
                    this.MediaForceShowDeleted == input.MediaForceShowDeleted ||
                    this.MediaForceShowDeleted.Equals(input.MediaForceShowDeleted)
                ) && 
                (
                    this.MediaDefaultDeleteBehaviour == input.MediaDefaultDeleteBehaviour ||
                    this.MediaDefaultDeleteBehaviour.Equals(input.MediaDefaultDeleteBehaviour)
                ) && 
                (
                    this.MediaRecycleBin == input.MediaRecycleBin ||
                    this.MediaRecycleBin.Equals(input.MediaRecycleBin)
                ) && 
                (
                    this.FileManagerRecycleBin == input.FileManagerRecycleBin ||
                    this.FileManagerRecycleBin.Equals(input.FileManagerRecycleBin)
                ) && 
                (
                    this.NtpOfferSync == input.NtpOfferSync ||
                    this.NtpOfferSync.Equals(input.NtpOfferSync)
                ) && 
                (
                    this.SlugifyWorkspacePath == input.SlugifyWorkspacePath ||
                    this.SlugifyWorkspacePath.Equals(input.SlugifyWorkspacePath)
                ) && 
                (
                    this.SlugifyShares == input.SlugifyShares ||
                    this.SlugifyShares.Equals(input.SlugifyShares)
                ) && 
                (
                    this.SmtpFrom == input.SmtpFrom ||
                    (this.SmtpFrom != null &&
                    this.SmtpFrom.Equals(input.SmtpFrom))
                ) && 
                (
                    this.SmtpServer == input.SmtpServer ||
                    (this.SmtpServer != null &&
                    this.SmtpServer.Equals(input.SmtpServer))
                ) && 
                (
                    this.SmtpPort == input.SmtpPort ||
                    this.SmtpPort.Equals(input.SmtpPort)
                ) && 
                (
                    this.SmtpTls == input.SmtpTls ||
                    this.SmtpTls.Equals(input.SmtpTls)
                ) && 
                (
                    this.SmtpUsername == input.SmtpUsername ||
                    (this.SmtpUsername != null &&
                    this.SmtpUsername.Equals(input.SmtpUsername))
                ) && 
                (
                    this.SmtpEhlo == input.SmtpEhlo ||
                    (this.SmtpEhlo != null &&
                    this.SmtpEhlo.Equals(input.SmtpEhlo))
                ) && 
                (
                    this.MailStyling == input.MailStyling ||
                    (this.MailStyling != null &&
                    this.MailStyling.Equals(input.MailStyling))
                ) && 
                (
                    this.TasksLimit == input.TasksLimit ||
                    this.TasksLimit.Equals(input.TasksLimit)
                ) && 
                (
                    this.TasksHardLimit == input.TasksHardLimit ||
                    this.TasksHardLimit.Equals(input.TasksHardLimit)
                ) && 
                (
                    this.UmaskAfp == input.UmaskAfp ||
                    (this.UmaskAfp != null &&
                    this.UmaskAfp.Equals(input.UmaskAfp))
                ) && 
                (
                    this.UmaskSmb == input.UmaskSmb ||
                    (this.UmaskSmb != null &&
                    this.UmaskSmb.Equals(input.UmaskSmb))
                ) && 
                (
                    this.UsersDefaultPermissions == input.UsersDefaultPermissions ||
                    (this.UsersDefaultPermissions != null &&
                    this.UsersDefaultPermissions.Equals(input.UsersDefaultPermissions))
                ) && 
                (
                    this.WorkspacesFolderTemplatePath == input.WorkspacesFolderTemplatePath ||
                    (this.WorkspacesFolderTemplatePath != null &&
                    this.WorkspacesFolderTemplatePath.Equals(input.WorkspacesFolderTemplatePath))
                ) && 
                (
                    this.WorkspacesMode == input.WorkspacesMode ||
                    (this.WorkspacesMode != null &&
                    this.WorkspacesMode.Equals(input.WorkspacesMode))
                ) && 
                (
                    this.WorkspacesPath == input.WorkspacesPath ||
                    (this.WorkspacesPath != null &&
                    this.WorkspacesPath.Equals(input.WorkspacesPath))
                ) && 
                (
                    this.Language == input.Language ||
                    this.Language.Equals(input.Language)
                ) && 
                (
                    this.EmailLogoUrl == input.EmailLogoUrl ||
                    (this.EmailLogoUrl != null &&
                    this.EmailLogoUrl.Equals(input.EmailLogoUrl))
                ) && 
                (
                    this.MediaKeepSelectionWhenBrowsing == input.MediaKeepSelectionWhenBrowsing ||
                    this.MediaKeepSelectionWhenBrowsing.Equals(input.MediaKeepSelectionWhenBrowsing)
                ) && 
                (
                    this.TasksRunScheduled == input.TasksRunScheduled ||
                    this.TasksRunScheduled.Equals(input.TasksRunScheduled)
                ) && 
                (
                    this.HttpsRedirect == input.HttpsRedirect ||
                    this.HttpsRedirect.Equals(input.HttpsRedirect)
                ) && 
                (
                    this.SslCertificate == input.SslCertificate ||
                    (this.SslCertificate != null &&
                    this.SslCertificate.Equals(input.SslCertificate))
                ) && 
                (
                    this.SslCertificateKey == input.SslCertificateKey ||
                    (this.SslCertificateKey != null &&
                    this.SslCertificateKey.Equals(input.SslCertificateKey))
                ) && 
                (
                    this.OtpPolicy == input.OtpPolicy ||
                    this.OtpPolicy.Equals(input.OtpPolicy)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.Analytics.GetHashCode();
                if (this.IdentifyCommand != null)
                    hashCode = hashCode * 59 + this.IdentifyCommand.GetHashCode();
                if (this.ExternalUrl != null)
                    hashCode = hashCode * 59 + this.ExternalUrl.GetHashCode();
                if (this.BrandingCss != null)
                    hashCode = hashCode * 59 + this.BrandingCss.GetHashCode();
                if (this.BrandingLogo != null)
                    hashCode = hashCode * 59 + this.BrandingLogo.GetHashCode();
                if (this.FmNewDirectoryMode != null)
                    hashCode = hashCode * 59 + this.FmNewDirectoryMode.GetHashCode();
                if (this.IcapServer != null)
                    hashCode = hashCode * 59 + this.IcapServer.GetHashCode();
                hashCode = hashCode * 59 + this.IcapPort.GetHashCode();
                if (this.IcapService != null)
                    hashCode = hashCode * 59 + this.IcapService.GetHashCode();
                hashCode = hashCode * 59 + this.IcapScanUploads.GetHashCode();
                hashCode = hashCode * 59 + this.LtfsDefaultRestoreToOriginalLocation.GetHashCode();
                hashCode = hashCode * 59 + this.LtfsDefaultSearchDirectories.GetHashCode();
                if (this.LtfsLibraryAddress != null)
                    hashCode = hashCode * 59 + this.LtfsLibraryAddress.GetHashCode();
                hashCode = hashCode * 59 + this.MediaAutoPlay.GetHashCode();
                hashCode = hashCode * 59 + this.MediaAutoTransport.GetHashCode();
                hashCode = hashCode * 59 + this.MediaAutoScan.GetHashCode();
                hashCode = hashCode * 59 + this.MediaAutoProxy.GetHashCode();
                hashCode = hashCode * 59 + this.MediaAutoVeritoneUpload.GetHashCode();
                hashCode = hashCode * 59 + this.MediaProxyH264Preset.GetHashCode();
                hashCode = hashCode * 59 + this.MediaDefaultCustomFieldType.GetHashCode();
                hashCode = hashCode * 59 + this.MediaForceShowDeleted.GetHashCode();
                hashCode = hashCode * 59 + this.MediaDefaultDeleteBehaviour.GetHashCode();
                hashCode = hashCode * 59 + this.MediaRecycleBin.GetHashCode();
                hashCode = hashCode * 59 + this.FileManagerRecycleBin.GetHashCode();
                hashCode = hashCode * 59 + this.NtpOfferSync.GetHashCode();
                hashCode = hashCode * 59 + this.SlugifyWorkspacePath.GetHashCode();
                hashCode = hashCode * 59 + this.SlugifyShares.GetHashCode();
                if (this.SmtpFrom != null)
                    hashCode = hashCode * 59 + this.SmtpFrom.GetHashCode();
                if (this.SmtpServer != null)
                    hashCode = hashCode * 59 + this.SmtpServer.GetHashCode();
                hashCode = hashCode * 59 + this.SmtpPort.GetHashCode();
                hashCode = hashCode * 59 + this.SmtpTls.GetHashCode();
                if (this.SmtpUsername != null)
                    hashCode = hashCode * 59 + this.SmtpUsername.GetHashCode();
                if (this.SmtpEhlo != null)
                    hashCode = hashCode * 59 + this.SmtpEhlo.GetHashCode();
                if (this.MailStyling != null)
                    hashCode = hashCode * 59 + this.MailStyling.GetHashCode();
                hashCode = hashCode * 59 + this.TasksLimit.GetHashCode();
                hashCode = hashCode * 59 + this.TasksHardLimit.GetHashCode();
                if (this.UmaskAfp != null)
                    hashCode = hashCode * 59 + this.UmaskAfp.GetHashCode();
                if (this.UmaskSmb != null)
                    hashCode = hashCode * 59 + this.UmaskSmb.GetHashCode();
                if (this.UsersDefaultPermissions != null)
                    hashCode = hashCode * 59 + this.UsersDefaultPermissions.GetHashCode();
                if (this.WorkspacesFolderTemplatePath != null)
                    hashCode = hashCode * 59 + this.WorkspacesFolderTemplatePath.GetHashCode();
                if (this.WorkspacesMode != null)
                    hashCode = hashCode * 59 + this.WorkspacesMode.GetHashCode();
                if (this.WorkspacesPath != null)
                    hashCode = hashCode * 59 + this.WorkspacesPath.GetHashCode();
                hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.EmailLogoUrl != null)
                    hashCode = hashCode * 59 + this.EmailLogoUrl.GetHashCode();
                hashCode = hashCode * 59 + this.MediaKeepSelectionWhenBrowsing.GetHashCode();
                hashCode = hashCode * 59 + this.TasksRunScheduled.GetHashCode();
                hashCode = hashCode * 59 + this.HttpsRedirect.GetHashCode();
                if (this.SslCertificate != null)
                    hashCode = hashCode * 59 + this.SslCertificate.GetHashCode();
                if (this.SslCertificateKey != null)
                    hashCode = hashCode * 59 + this.SslCertificateKey.GetHashCode();
                hashCode = hashCode * 59 + this.OtpPolicy.GetHashCode();
                return hashCode;
            }
        }

    }

}
