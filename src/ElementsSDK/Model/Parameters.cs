/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// Parameters
    /// </summary>
    [DataContract(Name = "Parameters")]
    public partial class Parameters : IEquatable<Parameters>
    {
        /// <summary>
        /// Defines HttpsRedirect
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HttpsRedirectEnum
        {
            /// <summary>
            /// Enum Domain for value: domain
            /// </summary>
            [EnumMember(Value = "domain")]
            Domain = 1,

            /// <summary>
            /// Enum On for value: on
            /// </summary>
            [EnumMember(Value = "on")]
            On = 2

        }


        /// <summary>
        /// Gets or Sets HttpsRedirect
        /// </summary>
        [DataMember(Name = "https_redirect", EmitDefaultValue = true)]
        public HttpsRedirectEnum? HttpsRedirect { get; set; }
        /// <summary>
        /// Defines Language
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LanguageEnum
        {
            /// <summary>
            /// Enum En for value: en
            /// </summary>
            [EnumMember(Value = "en")]
            En = 1,

            /// <summary>
            /// Enum Fr for value: fr
            /// </summary>
            [EnumMember(Value = "fr")]
            Fr = 2,

            /// <summary>
            /// Enum De for value: de
            /// </summary>
            [EnumMember(Value = "de")]
            De = 3,

            /// <summary>
            /// Enum Ru for value: ru
            /// </summary>
            [EnumMember(Value = "ru")]
            Ru = 4

        }


        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public LanguageEnum? Language { get; set; }
        /// <summary>
        /// Defines MediaDefaultCustomFieldType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MediaDefaultCustomFieldTypeEnum
        {
            /// <summary>
            /// Enum File for value: file
            /// </summary>
            [EnumMember(Value = "file")]
            File = 1,

            /// <summary>
            /// Enum Asset for value: asset
            /// </summary>
            [EnumMember(Value = "asset")]
            Asset = 2

        }


        /// <summary>
        /// Gets or Sets MediaDefaultCustomFieldType
        /// </summary>
        [DataMember(Name = "media_default_custom_field_type", EmitDefaultValue = false)]
        public MediaDefaultCustomFieldTypeEnum? MediaDefaultCustomFieldType { get; set; }
        /// <summary>
        /// Defines MediaDefaultDeleteBehaviour
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MediaDefaultDeleteBehaviourEnum
        {
            /// <summary>
            /// Enum Disk for value: disk
            /// </summary>
            [EnumMember(Value = "disk")]
            Disk = 1,

            /// <summary>
            /// Enum Database for value: database
            /// </summary>
            [EnumMember(Value = "database")]
            Database = 2,

            /// <summary>
            /// Enum Completely for value: completely
            /// </summary>
            [EnumMember(Value = "completely")]
            Completely = 3

        }


        /// <summary>
        /// Gets or Sets MediaDefaultDeleteBehaviour
        /// </summary>
        [DataMember(Name = "media_default_delete_behaviour", EmitDefaultValue = false)]
        public MediaDefaultDeleteBehaviourEnum? MediaDefaultDeleteBehaviour { get; set; }
        /// <summary>
        /// Defines OtpPolicy
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OtpPolicyEnum
        {
            /// <summary>
            /// Enum AdminOnly for value: admin-only
            /// </summary>
            [EnumMember(Value = "admin-only")]
            AdminOnly = 1,

            /// <summary>
            /// Enum SelfServiceSetupOnly for value: self-service-setup-only
            /// </summary>
            [EnumMember(Value = "self-service-setup-only")]
            SelfServiceSetupOnly = 2,

            /// <summary>
            /// Enum SelfServiceAll for value: self-service-all
            /// </summary>
            [EnumMember(Value = "self-service-all")]
            SelfServiceAll = 3

        }


        /// <summary>
        /// Gets or Sets OtpPolicy
        /// </summary>
        [DataMember(Name = "otp_policy", EmitDefaultValue = false)]
        public OtpPolicyEnum? OtpPolicy { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Parameters" /> class.
        /// </summary>
        /// <param name="analytics">analytics.</param>
        /// <param name="brandingCss">brandingCss.</param>
        /// <param name="brandingLogo">brandingLogo.</param>
        /// <param name="externalUrl">http://host/.</param>
        /// <param name="fileManagerRecycleBin">Recycle bins are usually either in Workspace/Share or Volume folder.</param>
        /// <param name="httpsRedirect">httpsRedirect.</param>
        /// <param name="language">language.</param>
        /// <param name="ltfsDefaultRestoreToOriginalLocation">ltfsDefaultRestoreToOriginalLocation.</param>
        /// <param name="ltfsDefaultSearchDirectories">ltfsDefaultSearchDirectories.</param>
        /// <param name="ltfsLibraryAddress">ltfsLibraryAddress.</param>
        /// <param name="mailStyling">mailStyling.</param>
        /// <param name="mediaAutoPlay">mediaAutoPlay.</param>
        /// <param name="mediaAutoProxy">mediaAutoProxy.</param>
        /// <param name="mediaAutoScan">mediaAutoScan.</param>
        /// <param name="mediaAutoTransport">mediaAutoTransport.</param>
        /// <param name="mediaAutoVeritoneUpload">mediaAutoVeritoneUpload.</param>
        /// <param name="mediaDefaultCustomFieldType">mediaDefaultCustomFieldType.</param>
        /// <param name="mediaDefaultDeleteBehaviour">mediaDefaultDeleteBehaviour.</param>
        /// <param name="mediaForceShowDeleted">mediaForceShowDeleted.</param>
        /// <param name="mediaKeepSelectionWhenBrowsing">mediaKeepSelectionWhenBrowsing.</param>
        /// <param name="mediaRecycleBin">Recycle bin is usually in the .recycle-bin folder in the volume root.</param>
        /// <param name="ntpOfferSync">ntpOfferSync.</param>
        /// <param name="otpPolicy">otpPolicy.</param>
        /// <param name="tasksRunScheduled">tasksRunScheduled.</param>
        /// <param name="usersDefaultPermissions">Copy this value from an existing user.</param>
        /// <param name="workspacesFolderTemplatePath">workspacesFolderTemplatePath.</param>
        /// <param name="workspacesPath">workspacesPath.</param>
        public Parameters(bool analytics = default(bool), string brandingCss = default(string), string brandingLogo = default(string), string externalUrl = default(string), bool fileManagerRecycleBin = default(bool), HttpsRedirectEnum? httpsRedirect = default(HttpsRedirectEnum?), LanguageEnum? language = default(LanguageEnum?), bool ltfsDefaultRestoreToOriginalLocation = default(bool), bool ltfsDefaultSearchDirectories = default(bool), string ltfsLibraryAddress = default(string), Dictionary<string, string> mailStyling = default(Dictionary<string, string>), bool mediaAutoPlay = default(bool), bool mediaAutoProxy = default(bool), bool mediaAutoScan = default(bool), bool mediaAutoTransport = default(bool), bool mediaAutoVeritoneUpload = default(bool), MediaDefaultCustomFieldTypeEnum? mediaDefaultCustomFieldType = default(MediaDefaultCustomFieldTypeEnum?), MediaDefaultDeleteBehaviourEnum? mediaDefaultDeleteBehaviour = default(MediaDefaultDeleteBehaviourEnum?), bool? mediaForceShowDeleted = default(bool?), bool mediaKeepSelectionWhenBrowsing = default(bool), bool mediaRecycleBin = default(bool), bool ntpOfferSync = default(bool), OtpPolicyEnum? otpPolicy = default(OtpPolicyEnum?), bool tasksRunScheduled = default(bool), string usersDefaultPermissions = default(string), string workspacesFolderTemplatePath = default(string), string workspacesPath = default(string))
        {
            this.Analytics = analytics;
            this.BrandingCss = brandingCss;
            this.BrandingLogo = brandingLogo;
            this.ExternalUrl = externalUrl;
            this.FileManagerRecycleBin = fileManagerRecycleBin;
            this.HttpsRedirect = httpsRedirect;
            this.Language = language;
            this.LtfsDefaultRestoreToOriginalLocation = ltfsDefaultRestoreToOriginalLocation;
            this.LtfsDefaultSearchDirectories = ltfsDefaultSearchDirectories;
            this.LtfsLibraryAddress = ltfsLibraryAddress;
            this.MailStyling = mailStyling;
            this.MediaAutoPlay = mediaAutoPlay;
            this.MediaAutoProxy = mediaAutoProxy;
            this.MediaAutoScan = mediaAutoScan;
            this.MediaAutoTransport = mediaAutoTransport;
            this.MediaAutoVeritoneUpload = mediaAutoVeritoneUpload;
            this.MediaDefaultCustomFieldType = mediaDefaultCustomFieldType;
            this.MediaDefaultDeleteBehaviour = mediaDefaultDeleteBehaviour;
            this.MediaForceShowDeleted = mediaForceShowDeleted;
            this.MediaKeepSelectionWhenBrowsing = mediaKeepSelectionWhenBrowsing;
            this.MediaRecycleBin = mediaRecycleBin;
            this.NtpOfferSync = ntpOfferSync;
            this.OtpPolicy = otpPolicy;
            this.TasksRunScheduled = tasksRunScheduled;
            this.UsersDefaultPermissions = usersDefaultPermissions;
            this.WorkspacesFolderTemplatePath = workspacesFolderTemplatePath;
            this.WorkspacesPath = workspacesPath;
        }

        /// <summary>
        /// Gets or Sets Analytics
        /// </summary>
        [DataMember(Name = "analytics", EmitDefaultValue = true)]
        public bool Analytics { get; set; }

        /// <summary>
        /// Gets or Sets BrandingCss
        /// </summary>
        [DataMember(Name = "branding_css", EmitDefaultValue = false)]
        public string BrandingCss { get; set; }

        /// <summary>
        /// Gets or Sets BrandingLogo
        /// </summary>
        [DataMember(Name = "branding_logo", EmitDefaultValue = false)]
        public string BrandingLogo { get; set; }

        /// <summary>
        /// http://host/
        /// </summary>
        /// <value>http://host/</value>
        [DataMember(Name = "external_url", EmitDefaultValue = true)]
        public string ExternalUrl { get; set; }

        /// <summary>
        /// Recycle bins are usually either in Workspace/Share or Volume folder
        /// </summary>
        /// <value>Recycle bins are usually either in Workspace/Share or Volume folder</value>
        [DataMember(Name = "file_manager_recycle_bin", EmitDefaultValue = true)]
        public bool FileManagerRecycleBin { get; set; }

        /// <summary>
        /// Gets or Sets LtfsDefaultRestoreToOriginalLocation
        /// </summary>
        [DataMember(Name = "ltfs_default_restore_to_original_location", EmitDefaultValue = true)]
        public bool LtfsDefaultRestoreToOriginalLocation { get; set; }

        /// <summary>
        /// Gets or Sets LtfsDefaultSearchDirectories
        /// </summary>
        [DataMember(Name = "ltfs_default_search_directories", EmitDefaultValue = true)]
        public bool LtfsDefaultSearchDirectories { get; set; }

        /// <summary>
        /// Gets or Sets LtfsLibraryAddress
        /// </summary>
        [DataMember(Name = "ltfs_library_address", EmitDefaultValue = true)]
        public string LtfsLibraryAddress { get; set; }

        /// <summary>
        /// Gets or Sets MailStyling
        /// </summary>
        [DataMember(Name = "mail_styling", EmitDefaultValue = false)]
        public Dictionary<string, string> MailStyling { get; set; }

        /// <summary>
        /// Gets or Sets MediaAutoPlay
        /// </summary>
        [DataMember(Name = "media_auto_play", EmitDefaultValue = true)]
        public bool MediaAutoPlay { get; set; }

        /// <summary>
        /// Gets or Sets MediaAutoProxy
        /// </summary>
        [DataMember(Name = "media_auto_proxy", EmitDefaultValue = true)]
        public bool MediaAutoProxy { get; set; }

        /// <summary>
        /// Gets or Sets MediaAutoScan
        /// </summary>
        [DataMember(Name = "media_auto_scan", EmitDefaultValue = true)]
        public bool MediaAutoScan { get; set; }

        /// <summary>
        /// Gets or Sets MediaAutoTransport
        /// </summary>
        [DataMember(Name = "media_auto_transport", EmitDefaultValue = true)]
        public bool MediaAutoTransport { get; set; }

        /// <summary>
        /// Gets or Sets MediaAutoVeritoneUpload
        /// </summary>
        [DataMember(Name = "media_auto_veritone_upload", EmitDefaultValue = true)]
        public bool MediaAutoVeritoneUpload { get; set; }

        /// <summary>
        /// Gets or Sets MediaForceShowDeleted
        /// </summary>
        [DataMember(Name = "media_force_show_deleted", EmitDefaultValue = true)]
        public bool? MediaForceShowDeleted { get; set; }

        /// <summary>
        /// Gets or Sets MediaKeepSelectionWhenBrowsing
        /// </summary>
        [DataMember(Name = "media_keep_selection_when_browsing", EmitDefaultValue = true)]
        public bool MediaKeepSelectionWhenBrowsing { get; set; }

        /// <summary>
        /// Recycle bin is usually in the .recycle-bin folder in the volume root
        /// </summary>
        /// <value>Recycle bin is usually in the .recycle-bin folder in the volume root</value>
        [DataMember(Name = "media_recycle_bin", EmitDefaultValue = true)]
        public bool MediaRecycleBin { get; set; }

        /// <summary>
        /// Gets or Sets NtpOfferSync
        /// </summary>
        [DataMember(Name = "ntp_offer_sync", EmitDefaultValue = true)]
        public bool NtpOfferSync { get; set; }

        /// <summary>
        /// Gets or Sets TasksRunScheduled
        /// </summary>
        [DataMember(Name = "tasks_run_scheduled", EmitDefaultValue = true)]
        public bool TasksRunScheduled { get; set; }

        /// <summary>
        /// Copy this value from an existing user
        /// </summary>
        /// <value>Copy this value from an existing user</value>
        [DataMember(Name = "users_default_permissions", EmitDefaultValue = false)]
        public string UsersDefaultPermissions { get; set; }

        /// <summary>
        /// Gets or Sets WorkspacesFolderTemplatePath
        /// </summary>
        [DataMember(Name = "workspaces_folder_template_path", EmitDefaultValue = false)]
        public string WorkspacesFolderTemplatePath { get; set; }

        /// <summary>
        /// Gets or Sets WorkspacesPath
        /// </summary>
        [DataMember(Name = "workspaces_path", EmitDefaultValue = false)]
        public string WorkspacesPath { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Parameters {\n");
            sb.Append("  Analytics: ").Append(Analytics).Append("\n");
            sb.Append("  BrandingCss: ").Append(BrandingCss).Append("\n");
            sb.Append("  BrandingLogo: ").Append(BrandingLogo).Append("\n");
            sb.Append("  ExternalUrl: ").Append(ExternalUrl).Append("\n");
            sb.Append("  FileManagerRecycleBin: ").Append(FileManagerRecycleBin).Append("\n");
            sb.Append("  HttpsRedirect: ").Append(HttpsRedirect).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  LtfsDefaultRestoreToOriginalLocation: ").Append(LtfsDefaultRestoreToOriginalLocation).Append("\n");
            sb.Append("  LtfsDefaultSearchDirectories: ").Append(LtfsDefaultSearchDirectories).Append("\n");
            sb.Append("  LtfsLibraryAddress: ").Append(LtfsLibraryAddress).Append("\n");
            sb.Append("  MailStyling: ").Append(MailStyling).Append("\n");
            sb.Append("  MediaAutoPlay: ").Append(MediaAutoPlay).Append("\n");
            sb.Append("  MediaAutoProxy: ").Append(MediaAutoProxy).Append("\n");
            sb.Append("  MediaAutoScan: ").Append(MediaAutoScan).Append("\n");
            sb.Append("  MediaAutoTransport: ").Append(MediaAutoTransport).Append("\n");
            sb.Append("  MediaAutoVeritoneUpload: ").Append(MediaAutoVeritoneUpload).Append("\n");
            sb.Append("  MediaDefaultCustomFieldType: ").Append(MediaDefaultCustomFieldType).Append("\n");
            sb.Append("  MediaDefaultDeleteBehaviour: ").Append(MediaDefaultDeleteBehaviour).Append("\n");
            sb.Append("  MediaForceShowDeleted: ").Append(MediaForceShowDeleted).Append("\n");
            sb.Append("  MediaKeepSelectionWhenBrowsing: ").Append(MediaKeepSelectionWhenBrowsing).Append("\n");
            sb.Append("  MediaRecycleBin: ").Append(MediaRecycleBin).Append("\n");
            sb.Append("  NtpOfferSync: ").Append(NtpOfferSync).Append("\n");
            sb.Append("  OtpPolicy: ").Append(OtpPolicy).Append("\n");
            sb.Append("  TasksRunScheduled: ").Append(TasksRunScheduled).Append("\n");
            sb.Append("  UsersDefaultPermissions: ").Append(UsersDefaultPermissions).Append("\n");
            sb.Append("  WorkspacesFolderTemplatePath: ").Append(WorkspacesFolderTemplatePath).Append("\n");
            sb.Append("  WorkspacesPath: ").Append(WorkspacesPath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Parameters);
        }

        /// <summary>
        /// Returns true if Parameters instances are equal
        /// </summary>
        /// <param name="input">Instance of Parameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Parameters input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Analytics == input.Analytics ||
                    this.Analytics.Equals(input.Analytics)
                ) && 
                (
                    this.BrandingCss == input.BrandingCss ||
                    (this.BrandingCss != null &&
                    this.BrandingCss.Equals(input.BrandingCss))
                ) && 
                (
                    this.BrandingLogo == input.BrandingLogo ||
                    (this.BrandingLogo != null &&
                    this.BrandingLogo.Equals(input.BrandingLogo))
                ) && 
                (
                    this.ExternalUrl == input.ExternalUrl ||
                    (this.ExternalUrl != null &&
                    this.ExternalUrl.Equals(input.ExternalUrl))
                ) && 
                (
                    this.FileManagerRecycleBin == input.FileManagerRecycleBin ||
                    this.FileManagerRecycleBin.Equals(input.FileManagerRecycleBin)
                ) && 
                (
                    this.HttpsRedirect == input.HttpsRedirect ||
                    this.HttpsRedirect.Equals(input.HttpsRedirect)
                ) && 
                (
                    this.Language == input.Language ||
                    this.Language.Equals(input.Language)
                ) && 
                (
                    this.LtfsDefaultRestoreToOriginalLocation == input.LtfsDefaultRestoreToOriginalLocation ||
                    this.LtfsDefaultRestoreToOriginalLocation.Equals(input.LtfsDefaultRestoreToOriginalLocation)
                ) && 
                (
                    this.LtfsDefaultSearchDirectories == input.LtfsDefaultSearchDirectories ||
                    this.LtfsDefaultSearchDirectories.Equals(input.LtfsDefaultSearchDirectories)
                ) && 
                (
                    this.LtfsLibraryAddress == input.LtfsLibraryAddress ||
                    (this.LtfsLibraryAddress != null &&
                    this.LtfsLibraryAddress.Equals(input.LtfsLibraryAddress))
                ) && 
                (
                    this.MailStyling == input.MailStyling ||
                    this.MailStyling != null &&
                    input.MailStyling != null &&
                    this.MailStyling.SequenceEqual(input.MailStyling)
                ) && 
                (
                    this.MediaAutoPlay == input.MediaAutoPlay ||
                    this.MediaAutoPlay.Equals(input.MediaAutoPlay)
                ) && 
                (
                    this.MediaAutoProxy == input.MediaAutoProxy ||
                    this.MediaAutoProxy.Equals(input.MediaAutoProxy)
                ) && 
                (
                    this.MediaAutoScan == input.MediaAutoScan ||
                    this.MediaAutoScan.Equals(input.MediaAutoScan)
                ) && 
                (
                    this.MediaAutoTransport == input.MediaAutoTransport ||
                    this.MediaAutoTransport.Equals(input.MediaAutoTransport)
                ) && 
                (
                    this.MediaAutoVeritoneUpload == input.MediaAutoVeritoneUpload ||
                    this.MediaAutoVeritoneUpload.Equals(input.MediaAutoVeritoneUpload)
                ) && 
                (
                    this.MediaDefaultCustomFieldType == input.MediaDefaultCustomFieldType ||
                    this.MediaDefaultCustomFieldType.Equals(input.MediaDefaultCustomFieldType)
                ) && 
                (
                    this.MediaDefaultDeleteBehaviour == input.MediaDefaultDeleteBehaviour ||
                    this.MediaDefaultDeleteBehaviour.Equals(input.MediaDefaultDeleteBehaviour)
                ) && 
                (
                    this.MediaForceShowDeleted == input.MediaForceShowDeleted ||
                    (this.MediaForceShowDeleted != null &&
                    this.MediaForceShowDeleted.Equals(input.MediaForceShowDeleted))
                ) && 
                (
                    this.MediaKeepSelectionWhenBrowsing == input.MediaKeepSelectionWhenBrowsing ||
                    this.MediaKeepSelectionWhenBrowsing.Equals(input.MediaKeepSelectionWhenBrowsing)
                ) && 
                (
                    this.MediaRecycleBin == input.MediaRecycleBin ||
                    this.MediaRecycleBin.Equals(input.MediaRecycleBin)
                ) && 
                (
                    this.NtpOfferSync == input.NtpOfferSync ||
                    this.NtpOfferSync.Equals(input.NtpOfferSync)
                ) && 
                (
                    this.OtpPolicy == input.OtpPolicy ||
                    this.OtpPolicy.Equals(input.OtpPolicy)
                ) && 
                (
                    this.TasksRunScheduled == input.TasksRunScheduled ||
                    this.TasksRunScheduled.Equals(input.TasksRunScheduled)
                ) && 
                (
                    this.UsersDefaultPermissions == input.UsersDefaultPermissions ||
                    (this.UsersDefaultPermissions != null &&
                    this.UsersDefaultPermissions.Equals(input.UsersDefaultPermissions))
                ) && 
                (
                    this.WorkspacesFolderTemplatePath == input.WorkspacesFolderTemplatePath ||
                    (this.WorkspacesFolderTemplatePath != null &&
                    this.WorkspacesFolderTemplatePath.Equals(input.WorkspacesFolderTemplatePath))
                ) && 
                (
                    this.WorkspacesPath == input.WorkspacesPath ||
                    (this.WorkspacesPath != null &&
                    this.WorkspacesPath.Equals(input.WorkspacesPath))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Analytics.GetHashCode();
                if (this.BrandingCss != null)
                    hashCode = hashCode * 59 + this.BrandingCss.GetHashCode();
                if (this.BrandingLogo != null)
                    hashCode = hashCode * 59 + this.BrandingLogo.GetHashCode();
                if (this.ExternalUrl != null)
                    hashCode = hashCode * 59 + this.ExternalUrl.GetHashCode();
                hashCode = hashCode * 59 + this.FileManagerRecycleBin.GetHashCode();
                hashCode = hashCode * 59 + this.HttpsRedirect.GetHashCode();
                hashCode = hashCode * 59 + this.Language.GetHashCode();
                hashCode = hashCode * 59 + this.LtfsDefaultRestoreToOriginalLocation.GetHashCode();
                hashCode = hashCode * 59 + this.LtfsDefaultSearchDirectories.GetHashCode();
                if (this.LtfsLibraryAddress != null)
                    hashCode = hashCode * 59 + this.LtfsLibraryAddress.GetHashCode();
                if (this.MailStyling != null)
                    hashCode = hashCode * 59 + this.MailStyling.GetHashCode();
                hashCode = hashCode * 59 + this.MediaAutoPlay.GetHashCode();
                hashCode = hashCode * 59 + this.MediaAutoProxy.GetHashCode();
                hashCode = hashCode * 59 + this.MediaAutoScan.GetHashCode();
                hashCode = hashCode * 59 + this.MediaAutoTransport.GetHashCode();
                hashCode = hashCode * 59 + this.MediaAutoVeritoneUpload.GetHashCode();
                hashCode = hashCode * 59 + this.MediaDefaultCustomFieldType.GetHashCode();
                hashCode = hashCode * 59 + this.MediaDefaultDeleteBehaviour.GetHashCode();
                if (this.MediaForceShowDeleted != null)
                    hashCode = hashCode * 59 + this.MediaForceShowDeleted.GetHashCode();
                hashCode = hashCode * 59 + this.MediaKeepSelectionWhenBrowsing.GetHashCode();
                hashCode = hashCode * 59 + this.MediaRecycleBin.GetHashCode();
                hashCode = hashCode * 59 + this.NtpOfferSync.GetHashCode();
                hashCode = hashCode * 59 + this.OtpPolicy.GetHashCode();
                hashCode = hashCode * 59 + this.TasksRunScheduled.GetHashCode();
                if (this.UsersDefaultPermissions != null)
                    hashCode = hashCode * 59 + this.UsersDefaultPermissions.GetHashCode();
                if (this.WorkspacesFolderTemplatePath != null)
                    hashCode = hashCode * 59 + this.WorkspacesFolderTemplatePath.GetHashCode();
                if (this.WorkspacesPath != null)
                    hashCode = hashCode * 59 + this.WorkspacesPath.GetHashCode();
                return hashCode;
            }
        }

    }

}
