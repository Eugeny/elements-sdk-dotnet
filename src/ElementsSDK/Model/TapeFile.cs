/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = ElementsSDK.Client.OpenAPIDateConverter;

namespace ElementsSDK.Model
{
    /// <summary>
    /// TapeFile
    /// </summary>
    [DataContract(Name = "TapeFile")]
    public partial class TapeFile : IEquatable<TapeFile>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TapeFile" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TapeFile() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TapeFile" /> class.
        /// </summary>
        /// <param name="tape">tape.</param>
        /// <param name="path">path (required).</param>
        /// <param name="uid">uid (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="isDir">isDir.</param>
        /// <param name="readOnly">readOnly.</param>
        /// <param name="length">length.</param>
        /// <param name="checksum">checksum.</param>
        /// <param name="fullpath">fullpath.</param>
        /// <param name="parent">parent.</param>
        public TapeFile(Tape tape = default(Tape), string path = default(string), int uid = default(int), string name = default(string), bool isDir = default(bool), bool readOnly = default(bool), int length = default(int), string checksum = default(string), string fullpath = default(string), int? parent = default(int?))
        {
            // to ensure "path" is required (not null)
            this.Path = path ?? throw new ArgumentNullException("path is a required property for TapeFile and cannot be null");
            this.Uid = uid;
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for TapeFile and cannot be null");
            this.Tape = tape;
            this.IsDir = isDir;
            this.ReadOnly = readOnly;
            this.Length = length;
            this.Checksum = checksum;
            this.Fullpath = fullpath;
            this.Parent = parent;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Tape
        /// </summary>
        [DataMember(Name = "tape", EmitDefaultValue = false)]
        public Tape Tape { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name = "path", IsRequired = true, EmitDefaultValue = false)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets SearchHighlight
        /// </summary>
        [DataMember(Name = "search_highlight", EmitDefaultValue = false)]
        public string SearchHighlight { get; private set; }

        /// <summary>
        /// Returns false as SearchHighlight should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSearchHighlight()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Uid
        /// </summary>
        [DataMember(Name = "uid", IsRequired = true, EmitDefaultValue = false)]
        public int Uid { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets IsDir
        /// </summary>
        [DataMember(Name = "is_dir", EmitDefaultValue = true)]
        public bool IsDir { get; set; }

        /// <summary>
        /// Gets or Sets ReadOnly
        /// </summary>
        [DataMember(Name = "read_only", EmitDefaultValue = true)]
        public bool ReadOnly { get; set; }

        /// <summary>
        /// Gets or Sets Length
        /// </summary>
        [DataMember(Name = "length", EmitDefaultValue = false)]
        public int Length { get; set; }

        /// <summary>
        /// Gets or Sets Checksum
        /// </summary>
        [DataMember(Name = "checksum", EmitDefaultValue = true)]
        public string Checksum { get; set; }

        /// <summary>
        /// Gets or Sets Fullpath
        /// </summary>
        [DataMember(Name = "fullpath", EmitDefaultValue = true)]
        public string Fullpath { get; set; }

        /// <summary>
        /// Gets or Sets Parent
        /// </summary>
        [DataMember(Name = "parent", EmitDefaultValue = true)]
        public int? Parent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TapeFile {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Tape: ").Append(Tape).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  SearchHighlight: ").Append(SearchHighlight).Append("\n");
            sb.Append("  Uid: ").Append(Uid).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IsDir: ").Append(IsDir).Append("\n");
            sb.Append("  ReadOnly: ").Append(ReadOnly).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  Checksum: ").Append(Checksum).Append("\n");
            sb.Append("  Fullpath: ").Append(Fullpath).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TapeFile);
        }

        /// <summary>
        /// Returns true if TapeFile instances are equal
        /// </summary>
        /// <param name="input">Instance of TapeFile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TapeFile input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Tape == input.Tape ||
                    (this.Tape != null &&
                    this.Tape.Equals(input.Tape))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.SearchHighlight == input.SearchHighlight ||
                    (this.SearchHighlight != null &&
                    this.SearchHighlight.Equals(input.SearchHighlight))
                ) && 
                (
                    this.Uid == input.Uid ||
                    this.Uid.Equals(input.Uid)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.IsDir == input.IsDir ||
                    this.IsDir.Equals(input.IsDir)
                ) && 
                (
                    this.ReadOnly == input.ReadOnly ||
                    this.ReadOnly.Equals(input.ReadOnly)
                ) && 
                (
                    this.Length == input.Length ||
                    this.Length.Equals(input.Length)
                ) && 
                (
                    this.Checksum == input.Checksum ||
                    (this.Checksum != null &&
                    this.Checksum.Equals(input.Checksum))
                ) && 
                (
                    this.Fullpath == input.Fullpath ||
                    (this.Fullpath != null &&
                    this.Fullpath.Equals(input.Fullpath))
                ) && 
                (
                    this.Parent == input.Parent ||
                    (this.Parent != null &&
                    this.Parent.Equals(input.Parent))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Tape != null)
                    hashCode = hashCode * 59 + this.Tape.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.SearchHighlight != null)
                    hashCode = hashCode * 59 + this.SearchHighlight.GetHashCode();
                hashCode = hashCode * 59 + this.Uid.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                hashCode = hashCode * 59 + this.IsDir.GetHashCode();
                hashCode = hashCode * 59 + this.ReadOnly.GetHashCode();
                hashCode = hashCode * 59 + this.Length.GetHashCode();
                if (this.Checksum != null)
                    hashCode = hashCode * 59 + this.Checksum.GetHashCode();
                if (this.Fullpath != null)
                    hashCode = hashCode * 59 + this.Fullpath.GetHashCode();
                if (this.Parent != null)
                    hashCode = hashCode * 59 + this.Parent.GetHashCode();
                return hashCode;
            }
        }

    }

}
