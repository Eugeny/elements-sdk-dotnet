/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ElementsSDK.Client;
using ElementsSDK.Model;

namespace ElementsSDK.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMainApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void ApplyConfiguration();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApplyConfigurationWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void Beep();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BeepWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificate"></param>
        /// <returns></returns>
        void CheckCertificate(Certificate certificate);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificate"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CheckCertificateWithHttpInfo(Certificate certificate);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadId"> (optional)</param>
        /// <param name="chunkNumber"> (optional)</param>
        /// <returns></returns>
        void CheckChunkUploaded(string uploadId = default(string), string chunkNumber = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadId"> (optional)</param>
        /// <param name="chunkNumber"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CheckChunkUploadedWithHttpInfo(string uploadId = default(string), string chunkNumber = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CheckConnectivityEndpointResponse</returns>
        CheckConnectivityEndpointResponse CheckInternetConnectivity();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CheckConnectivityEndpointResponse</returns>
        ApiResponse<CheckConnectivityEndpointResponse> CheckInternetConnectivityWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60;   * License component: stornext_mdc 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stornextLicense"></param>
        /// <returns>List&lt;StorNextLicenseCheckEndpointResponse&gt;</returns>
        List<StorNextLicenseCheckEndpointResponse> CheckStorNextLicense(StornextLicense stornextLicense);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60;   * License component: stornext_mdc 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stornextLicense"></param>
        /// <returns>ApiResponse of List&lt;StorNextLicenseCheckEndpointResponse&gt;</returns>
        ApiResponse<List<StorNextLicenseCheckEndpointResponse>> CheckStorNextLicenseWithHttpInfo(StornextLicense stornextLicense);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>DownloadArchive</returns>
        DownloadArchive CollectDiagnostics();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of DownloadArchive</returns>
        ApiResponse<DownloadArchive> CollectDiagnosticsWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDownloadArchive"></param>
        /// <returns>DownloadArchive</returns>
        DownloadArchive CreateArchive(CreateDownloadArchive createDownloadArchive);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDownloadArchive"></param>
        /// <returns>ApiResponse of DownloadArchive</returns>
        ApiResponse<DownloadArchive> CreateArchiveWithHttpInfo(CreateDownloadArchive createDownloadArchive);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:view&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="elementsGroupDetail"></param>
        /// <returns>ElementsGroupDetail</returns>
        ElementsGroupDetail CreateGroup(ElementsGroupDetail elementsGroupDetail);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:view&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="elementsGroupDetail"></param>
        /// <returns>ApiResponse of ElementsGroupDetail</returns>
        ApiResponse<ElementsGroupDetail> CreateGroupWithHttpInfo(ElementsGroupDetail elementsGroupDetail);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="createHomeWorkspaceRequest"></param>
        /// <returns>Workspace</returns>
        Workspace CreateHomeWorkspace(int id, CreateHomeWorkspaceRequest createHomeWorkspaceRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="createHomeWorkspaceRequest"></param>
        /// <returns>ApiResponse of Workspace</returns>
        ApiResponse<Workspace> CreateHomeWorkspaceWithHttpInfo(int id, CreateHomeWorkspaceRequest createHomeWorkspaceRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nTPServer"></param>
        /// <returns>NTPServer</returns>
        NTPServer CreateNTPServer(NTPServer nTPServer);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nTPServer"></param>
        /// <returns>ApiResponse of NTPServer</returns>
        ApiResponse<NTPServer> CreateNTPServerWithHttpInfo(NTPServer nTPServer);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="elementsUserDetail"></param>
        /// <returns>ElementsUserDetail</returns>
        ElementsUserDetail CreateUser(ElementsUserDetail elementsUserDetail);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="elementsUserDetail"></param>
        /// <returns>ApiResponse of ElementsUserDetail</returns>
        ApiResponse<ElementsUserDetail> CreateUserWithHttpInfo(ElementsUserDetail elementsUserDetail);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user   * Own workstation or User account permission: &#x60;workstations:view&#x60; (read) / &#x60;workstations:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workstation"></param>
        /// <returns>Workstation</returns>
        Workstation CreateWorkstation(Workstation workstation);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user   * Own workstation or User account permission: &#x60;workstations:view&#x60; (read) / &#x60;workstations:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workstation"></param>
        /// <returns>ApiResponse of Workstation</returns>
        ApiResponse<Workstation> CreateWorkstationWithHttpInfo(Workstation workstation);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this download archive.</param>
        /// <returns></returns>
        void DeleteDownloadArchive(Guid id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this download archive.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteDownloadArchiveWithHttpInfo(Guid id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:view&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Group.</param>
        /// <returns></returns>
        void DeleteGroup(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:view&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Group.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteGroupWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <returns></returns>
        void DeleteHomeWorkspace(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteHomeWorkspaceWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this NTP Server.</param>
        /// <returns></returns>
        void DeleteNTPServer(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this NTP Server.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteNTPServerWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <returns></returns>
        void DeleteUser(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteUserWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user   * Own workstation or User account permission: &#x60;workstations:view&#x60; (read) / &#x60;workstations:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this workstation.</param>
        /// <returns></returns>
        void DeleteWorkstation(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user   * Own workstation or User account permission: &#x60;workstations:view&#x60; (read) / &#x60;workstations:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this workstation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWorkstationWithHttpInfo(string id);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <returns></returns>
        void DisableUserTOTP(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DisableUserTOTPWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="enableTOTPRequest"></param>
        /// <returns></returns>
        void EnableUserTOTP(int id, EnableTOTPRequest enableTOTPRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="enableTOTPRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EnableUserTOTPWithHttpInfo(int id, EnableTOTPRequest enableTOTPRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="finishUploadEndpointRequest"></param>
        /// <returns></returns>
        void FinishUpload(FinishUploadEndpointRequest finishUploadEndpointRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="finishUploadEndpointRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FinishUploadWithHttpInfo(FinishUploadEndpointRequest finishUploadEndpointRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this LDAP Server.</param>
        /// <returns></returns>
        void FixLDAPGroupMemberships(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this LDAP Server.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FixLDAPGroupMembershipsWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:status:view&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">Filter the returned list by &#x60;user&#x60;. (optional)</param>
        /// <param name="mountedWorkspacesMountNode">Filter the returned list by &#x60;mounted_workspaces__mount_node&#x60;. (optional)</param>
        /// <param name="workstation">Filter the returned list by &#x60;workstation&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>List&lt;ClientSession&gt;</returns>
        List<ClientSession> GetAllClientSessions(string user = default(string), string mountedWorkspacesMountNode = default(string), string workstation = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:status:view&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">Filter the returned list by &#x60;user&#x60;. (optional)</param>
        /// <param name="mountedWorkspacesMountNode">Filter the returned list by &#x60;mounted_workspaces__mount_node&#x60;. (optional)</param>
        /// <param name="workstation">Filter the returned list by &#x60;workstation&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;ClientSession&gt;</returns>
        ApiResponse<List<ClientSession>> GetAllClientSessionsWithHttpInfo(string user = default(string), string mountedWorkspacesMountNode = default(string), string workstation = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>List&lt;DownloadArchive&gt;</returns>
        List<DownloadArchive> GetAllDownloadArchives(string ordering = default(string), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;DownloadArchive&gt;</returns>
        ApiResponse<List<DownloadArchive>> GetAllDownloadArchivesWithHttpInfo(string ordering = default(string), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;downloads:view&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>List&lt;Download&gt;</returns>
        List<Download> GetAllDownloads(string name = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;downloads:view&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;Download&gt;</returns>
        ApiResponse<List<Download>> GetAllDownloadsWithHttpInfo(string name = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:view&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>List&lt;ElementsGroup&gt;</returns>
        List<ElementsGroup> GetAllGroups(string name = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:view&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;ElementsGroup&gt;</returns>
        ApiResponse<List<ElementsGroup>> GetAllGroupsWithHttpInfo(string name = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>List&lt;LDAPServer&gt;</returns>
        List<LDAPServer> GetAllLDAPServers(string ordering = default(string), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;LDAPServer&gt;</returns>
        ApiResponse<List<LDAPServer>> GetAllLDAPServersWithHttpInfo(string ordering = default(string), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter the returned list by &#x60;address&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>List&lt;NTPServer&gt;</returns>
        List<NTPServer> GetAllNTPServers(string address = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter the returned list by &#x60;address&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;NTPServer&gt;</returns>
        ApiResponse<List<NTPServer>> GetAllNTPServersWithHttpInfo(string address = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Filter the returned list by &#x60;type&#x60;. (optional)</param>
        /// <param name="backend">Filter the returned list by &#x60;backend&#x60;. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="address">Filter the returned list by &#x60;address&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="includeStatus"> (optional)</param>
        /// <returns>List&lt;StorageNode&gt;</returns>
        List<StorageNode> GetAllStorageNodes(string type = default(string), string backend = default(string), string name = default(string), string address = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), bool? includeStatus = default(bool?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Filter the returned list by &#x60;type&#x60;. (optional)</param>
        /// <param name="backend">Filter the returned list by &#x60;backend&#x60;. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="address">Filter the returned list by &#x60;address&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="includeStatus"> (optional)</param>
        /// <returns>ApiResponse of List&lt;StorageNode&gt;</returns>
        ApiResponse<List<StorageNode>> GetAllStorageNodesWithHttpInfo(string type = default(string), string backend = default(string), string name = default(string), string address = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), bool? includeStatus = default(bool?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Filter the returned list by &#x60;username&#x60;. (optional)</param>
        /// <param name="home">Filter the returned list by &#x60;home&#x60;. (optional)</param>
        /// <param name="fullName">Filter the returned list by &#x60;full_name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="includeAllowedFsPaths"> (optional)</param>
        /// <returns>List&lt;ElementsUser&gt;</returns>
        List<ElementsUser> GetAllUsers(string username = default(string), string home = default(string), string fullName = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), bool? includeAllowedFsPaths = default(bool?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Filter the returned list by &#x60;username&#x60;. (optional)</param>
        /// <param name="home">Filter the returned list by &#x60;home&#x60;. (optional)</param>
        /// <param name="fullName">Filter the returned list by &#x60;full_name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="includeAllowedFsPaths"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ElementsUser&gt;</returns>
        ApiResponse<List<ElementsUser>> GetAllUsersWithHttpInfo(string username = default(string), string home = default(string), string fullName = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), bool? includeAllowedFsPaths = default(bool?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user   * Own workstation or User account permission: &#x60;workstations:view&#x60; (read) / &#x60;workstations:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostname">Filter the returned list by &#x60;hostname&#x60;. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>List&lt;Workstation&gt;</returns>
        List<Workstation> GetAllWorkstations(string hostname = default(string), string name = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user   * Own workstation or User account permission: &#x60;workstations:view&#x60; (read) / &#x60;workstations:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostname">Filter the returned list by &#x60;hostname&#x60;. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;Workstation&gt;</returns>
        ApiResponse<List<Workstation>> GetAllWorkstationsWithHttpInfo(string hostname = default(string), string name = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Certificate</returns>
        Certificate GetCertificateConfiguration();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Certificate</returns>
        ApiResponse<Certificate> GetCertificateConfigurationWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <returns></returns>
        void GetClientDownloadFile(string file);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetClientDownloadFileWithHttpInfo(string file);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ClientsEndpointResponse&gt;</returns>
        List<ClientsEndpointResponse> GetClientDownloads();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ClientsEndpointResponse&gt;</returns>
        ApiResponse<List<ClientsEndpointResponse>> GetClientDownloadsWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:status:view&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this client session.</param>
        /// <returns>ClientSession</returns>
        ClientSession GetClientSession(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:status:view&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this client session.</param>
        /// <returns>ApiResponse of ClientSession</returns>
        ApiResponse<ClientSession> GetClientSessionWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>Workstation</returns>
        Workstation GetCurrentWorkstation(string ordering = default(string), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of Workstation</returns>
        ApiResponse<Workstation> GetCurrentWorkstationWithHttpInfo(string ordering = default(string), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;downloads:view&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this download.</param>
        /// <returns>Download</returns>
        Download GetDownload(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;downloads:view&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this download.</param>
        /// <returns>ApiResponse of Download</returns>
        ApiResponse<Download> GetDownloadWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this download archive.</param>
        /// <returns>DownloadArchive</returns>
        DownloadArchive GetDownloadArchive(Guid id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this download archive.</param>
        /// <returns>ApiResponse of DownloadArchive</returns>
        ApiResponse<DownloadArchive> GetDownloadArchiveWithHttpInfo(Guid id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this download archive.</param>
        /// <returns></returns>
        void GetDownloadArchiveFile(Guid id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this download archive.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetDownloadArchiveFileWithHttpInfo(Guid id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;downloads:view&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this download.</param>
        /// <returns></returns>
        void GetDownloadFile(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;downloads:view&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this download.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetDownloadFileWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;downloads:view&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this download.</param>
        /// <returns></returns>
        void GetDownloadIcon(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;downloads:view&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this download.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetDownloadIconWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:view&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Group.</param>
        /// <returns>ElementsGroupDetail</returns>
        ElementsGroupDetail GetGroup(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:view&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Group.</param>
        /// <returns>ApiResponse of ElementsGroupDetail</returns>
        ApiResponse<ElementsGroupDetail> GetGroupWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <returns>Workspace</returns>
        Workspace GetHomeWorkspace(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <returns>ApiResponse of Workspace</returns>
        ApiResponse<Workspace> GetHomeWorkspaceWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <returns>Ipmi</returns>
        Ipmi GetIPMIConfiguration(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <returns>ApiResponse of Ipmi</returns>
        ApiResponse<Ipmi> GetIPMIConfigurationWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this LDAP Server.</param>
        /// <returns>LDAPServer</returns>
        LDAPServer GetLDAPServer(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this LDAP Server.</param>
        /// <returns>ApiResponse of LDAPServer</returns>
        ApiResponse<LDAPServer> GetLDAPServerWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this LDAP Server.</param>
        /// <returns>LDAPServerGroups</returns>
        LDAPServerGroups GetLDAPServerGroups(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this LDAP Server.</param>
        /// <returns>ApiResponse of LDAPServerGroups</returns>
        ApiResponse<LDAPServerGroups> GetLDAPServerGroupsWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this LDAP Server.</param>
        /// <returns>LDAPServerUsers</returns>
        LDAPServerUsers GetLDAPServerUsers(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this LDAP Server.</param>
        /// <returns>ApiResponse of LDAPServerUsers</returns>
        ApiResponse<LDAPServerUsers> GetLDAPServerUsersWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>License</returns>
        License GetLicense();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of License</returns>
        ApiResponse<License> GetLicenseWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TimeEndpointResponse</returns>
        TimeEndpointResponse GetLocalTime();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TimeEndpointResponse</returns>
        ApiResponse<TimeEndpointResponse> GetLocalTimeWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="offset"> (optional)</param>
        /// <returns></returns>
        void GetLog(string path, int? offset = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="offset"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetLogWithHttpInfo(string path, int? offset = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this NTP Server.</param>
        /// <returns>NTPServer</returns>
        NTPServer GetNTPServer(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this NTP Server.</param>
        /// <returns>ApiResponse of NTPServer</returns>
        ApiResponse<NTPServer> GetNTPServerWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:status:view&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <returns>Sensors</returns>
        Sensors GetNodeIPMISensors(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:status:view&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <returns>ApiResponse of Sensors</returns>
        ApiResponse<Sensors> GetNodeIPMISensorsWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:status:view&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <returns>Stats</returns>
        Stats GetNodeStats(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:status:view&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <returns>ApiResponse of Stats</returns>
        ApiResponse<Stats> GetNodeStatsWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>Parameters</returns>
        Parameters GetParameters(string ordering = default(string), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of Parameters</returns>
        ApiResponse<Parameters> GetParametersWithHttpInfo(string ordering = default(string), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ElementsUserProfile</returns>
        ElementsUserProfile GetProfile(string ordering = default(string), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of ElementsUserProfile</returns>
        ApiResponse<ElementsUserProfile> GetProfileWithHttpInfo(string ordering = default(string), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ReleaseNotesEndpointResponse&gt;</returns>
        List<ReleaseNotesEndpointResponse> GetReleaseNotes();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ReleaseNotesEndpointResponse&gt;</returns>
        ApiResponse<List<ReleaseNotesEndpointResponse>> GetReleaseNotesWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SMTPConfiguration</returns>
        SMTPConfiguration GetSMTPConfiguration();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SMTPConfiguration</returns>
        ApiResponse<SMTPConfiguration> GetSMTPConfigurationWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <param name="service"></param>
        /// <returns>ServiceStatus</returns>
        ServiceStatus GetServiceStatus(int id, string service);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <param name="service"></param>
        /// <returns>ApiResponse of ServiceStatus</returns>
        ApiResponse<ServiceStatus> GetServiceStatusWithHttpInfo(int id, string service);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60;   * License component: stornext_mdc 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>StorNextLicenseEndpointResponse</returns>
        StorNextLicenseEndpointResponse GetStorNextLicense();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60;   * License component: stornext_mdc 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of StorNextLicenseEndpointResponse</returns>
        ApiResponse<StorNextLicenseEndpointResponse> GetStorNextLicenseWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <param name="includeStatus"> (optional)</param>
        /// <returns>StorageNode</returns>
        StorageNode GetStorageNode(int id, bool? includeStatus = default(bool?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <param name="includeStatus"> (optional)</param>
        /// <returns>ApiResponse of StorageNode</returns>
        ApiResponse<StorageNode> GetStorageNodeWithHttpInfo(int id, bool? includeStatus = default(bool?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SystemInfoEndpointResponse</returns>
        SystemInfoEndpointResponse GetSystemInfo();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SystemInfoEndpointResponse</returns>
        ApiResponse<SystemInfoEndpointResponse> GetSystemInfoWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <returns>ElementsUserDetail</returns>
        ElementsUserDetail GetUser(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <returns>ApiResponse of ElementsUserDetail</returns>
        ApiResponse<ElementsUserDetail> GetUserWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user   * Own workstation or User account permission: &#x60;workstations:view&#x60; (read) / &#x60;workstations:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this workstation.</param>
        /// <returns>Workstation</returns>
        Workstation GetWorkstation(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user   * Own workstation or User account permission: &#x60;workstations:view&#x60; (read) / &#x60;workstations:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this workstation.</param>
        /// <returns>ApiResponse of Workstation</returns>
        ApiResponse<Workstation> GetWorkstationWithHttpInfo(string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60;   * License component: stornext_mdc 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stornextLicense"></param>
        /// <returns>StorNextLicenseEndpointResponse</returns>
        StorNextLicenseEndpointResponse InstallStorNextLicense(StornextLicense stornextLicense);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60;   * License component: stornext_mdc 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stornextLicense"></param>
        /// <returns>ApiResponse of StorNextLicenseEndpointResponse</returns>
        ApiResponse<StorNextLicenseEndpointResponse> InstallStorNextLicenseWithHttpInfo(StornextLicense stornextLicense);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workstationPartialUpdate"></param>
        /// <returns>Workstation</returns>
        Workstation PatchCurrentWorkstation(WorkstationPartialUpdate workstationPartialUpdate);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workstationPartialUpdate"></param>
        /// <returns>ApiResponse of Workstation</returns>
        ApiResponse<Workstation> PatchCurrentWorkstationWithHttpInfo(WorkstationPartialUpdate workstationPartialUpdate);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this download archive.</param>
        /// <param name="downloadArchivePartialUpdate"></param>
        /// <returns>DownloadArchive</returns>
        DownloadArchive PatchDownloadArchive(Guid id, DownloadArchivePartialUpdate downloadArchivePartialUpdate);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this download archive.</param>
        /// <param name="downloadArchivePartialUpdate"></param>
        /// <returns>ApiResponse of DownloadArchive</returns>
        ApiResponse<DownloadArchive> PatchDownloadArchiveWithHttpInfo(Guid id, DownloadArchivePartialUpdate downloadArchivePartialUpdate);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:view&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Group.</param>
        /// <param name="elementsGroupDetailPartialUpdate"></param>
        /// <returns>ElementsGroupDetail</returns>
        ElementsGroupDetail PatchGroup(int id, ElementsGroupDetailPartialUpdate elementsGroupDetailPartialUpdate);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:view&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Group.</param>
        /// <param name="elementsGroupDetailPartialUpdate"></param>
        /// <returns>ApiResponse of ElementsGroupDetail</returns>
        ApiResponse<ElementsGroupDetail> PatchGroupWithHttpInfo(int id, ElementsGroupDetailPartialUpdate elementsGroupDetailPartialUpdate);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this NTP Server.</param>
        /// <param name="nTPServerPartialUpdate"></param>
        /// <returns>NTPServer</returns>
        NTPServer PatchNTPServer(int id, NTPServerPartialUpdate nTPServerPartialUpdate);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this NTP Server.</param>
        /// <param name="nTPServerPartialUpdate"></param>
        /// <returns>ApiResponse of NTPServer</returns>
        ApiResponse<NTPServer> PatchNTPServerWithHttpInfo(int id, NTPServerPartialUpdate nTPServerPartialUpdate);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="elementsUserProfilePartialUpdate"></param>
        /// <returns>ElementsUserProfile</returns>
        ElementsUserProfile PatchProfile(ElementsUserProfilePartialUpdate elementsUserProfilePartialUpdate);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="elementsUserProfilePartialUpdate"></param>
        /// <returns>ApiResponse of ElementsUserProfile</returns>
        ApiResponse<ElementsUserProfile> PatchProfileWithHttpInfo(ElementsUserProfilePartialUpdate elementsUserProfilePartialUpdate);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="elementsUserDetailPartialUpdate"></param>
        /// <returns>ElementsUserDetail</returns>
        ElementsUserDetail PatchUser(int id, ElementsUserDetailPartialUpdate elementsUserDetailPartialUpdate);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="elementsUserDetailPartialUpdate"></param>
        /// <returns>ApiResponse of ElementsUserDetail</returns>
        ApiResponse<ElementsUserDetail> PatchUserWithHttpInfo(int id, ElementsUserDetailPartialUpdate elementsUserDetailPartialUpdate);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user   * Own workstation or User account permission: &#x60;workstations:view&#x60; (read) / &#x60;workstations:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this workstation.</param>
        /// <param name="workstationPartialUpdate"></param>
        /// <returns>Workstation</returns>
        Workstation PatchWorkstation(string id, WorkstationPartialUpdate workstationPartialUpdate);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user   * Own workstation or User account permission: &#x60;workstations:view&#x60; (read) / &#x60;workstations:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this workstation.</param>
        /// <param name="workstationPartialUpdate"></param>
        /// <returns>ApiResponse of Workstation</returns>
        ApiResponse<Workstation> PatchWorkstationWithHttpInfo(string id, WorkstationPartialUpdate workstationPartialUpdate);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userPreviewRequest"></param>
        /// <returns>UserPreviewResponse</returns>
        UserPreviewResponse PreviewUser(UserPreviewRequest userPreviewRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userPreviewRequest"></param>
        /// <returns>ApiResponse of UserPreviewResponse</returns>
        ApiResponse<UserPreviewResponse> PreviewUserWithHttpInfo(UserPreviewRequest userPreviewRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void Reboot();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RebootWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerUploadEndpointRequest"></param>
        /// <returns></returns>
        void RegisterUpload(RegisterUploadEndpointRequest registerUploadEndpointRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerUploadEndpointRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RegisterUploadWithHttpInfo(RegisterUploadEndpointRequest registerUploadEndpointRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;media:access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerUploadMetadataEndpointRequest"></param>
        /// <returns></returns>
        void RegisterUploadMetadata(RegisterUploadMetadataEndpointRequest registerUploadMetadataEndpointRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;media:access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerUploadMetadataEndpointRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RegisterUploadMetadataWithHttpInfo(RegisterUploadMetadataEndpointRequest registerUploadMetadataEndpointRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailPreview"></param>
        /// <returns></returns>
        void RenderEmailTemplatePreview(EmailPreview emailPreview);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailPreview"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RenderEmailTemplatePreviewWithHttpInfo(EmailPreview emailPreview);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <returns></returns>
        void ResetUserPassword(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ResetUserPasswordWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <param name="operation"></param>
        /// <param name="service"></param>
        /// <returns></returns>
        void RunServiceOperation(int id, string operation, string service);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <param name="operation"></param>
        /// <param name="service"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RunServiceOperationWithHttpInfo(int id, string operation, string service);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <param name="ipmi"></param>
        /// <returns>Ipmi</returns>
        Ipmi SetIPMIConfiguration(int id, Ipmi ipmi);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <param name="ipmi"></param>
        /// <returns>ApiResponse of Ipmi</returns>
        ApiResponse<Ipmi> SetIPMIConfigurationWithHttpInfo(int id, Ipmi ipmi);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeEndpointRequest"></param>
        /// <returns>TimeEndpointResponse</returns>
        TimeEndpointResponse SetLocalTime(TimeEndpointRequest timeEndpointRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeEndpointRequest"></param>
        /// <returns>ApiResponse of TimeEndpointResponse</returns>
        ApiResponse<TimeEndpointResponse> SetLocalTimeWithHttpInfo(TimeEndpointRequest timeEndpointRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeOwnPasswordRequest"></param>
        /// <returns></returns>
        void SetMyPassword(ChangeOwnPasswordRequest changeOwnPasswordRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeOwnPasswordRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetMyPasswordWithHttpInfo(ChangeOwnPasswordRequest changeOwnPasswordRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="changePasswordRequest"></param>
        /// <returns></returns>
        void SetUserPassword(int id, ChangePasswordRequest changePasswordRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="changePasswordRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetUserPasswordWithHttpInfo(int id, ChangePasswordRequest changePasswordRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void Shutdown();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ShutdownWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SolrReindexEndpointResponse</returns>
        SolrReindexEndpointResponse StartSolrReindex();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SolrReindexEndpointResponse</returns>
        ApiResponse<SolrReindexEndpointResponse> StartSolrReindexWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TaskInfo</returns>
        TaskInfo StartSupportSession();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TaskInfo</returns>
        ApiResponse<TaskInfo> StartSupportSessionWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <returns>TaskInfo</returns>
        TaskInfo StartSystemBackup(Path path);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <returns>ApiResponse of TaskInfo</returns>
        ApiResponse<TaskInfo> StartSystemBackupWithHttpInfo(Path path);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Group.</param>
        /// <returns></returns>
        void SyncLDAPGroup(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Group.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SyncLDAPGroupWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this LDAP Server.</param>
        /// <returns></returns>
        void SyncLDAPUsers(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this LDAP Server.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SyncLDAPUsersWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeSyncEndpointRequest"></param>
        /// <returns>TimeSyncEndpointResponse</returns>
        TimeSyncEndpointResponse SyncTime(TimeSyncEndpointRequest timeSyncEndpointRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeSyncEndpointRequest"></param>
        /// <returns>ApiResponse of TimeSyncEndpointResponse</returns>
        ApiResponse<TimeSyncEndpointResponse> SyncTimeWithHttpInfo(TimeSyncEndpointRequest timeSyncEndpointRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="syncTOTPRequest"></param>
        /// <returns>SyncTOTP</returns>
        SyncTOTP SyncUserTOTP(int id, SyncTOTPRequest syncTOTPRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="syncTOTPRequest"></param>
        /// <returns>ApiResponse of SyncTOTP</returns>
        ApiResponse<SyncTOTP> SyncUserTOTPWithHttpInfo(int id, SyncTOTPRequest syncTOTPRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testSMTP"></param>
        /// <returns></returns>
        void TestSMTPConfiguration(TestSMTP testSMTP);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testSMTP"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TestSMTPConfigurationWithHttpInfo(TestSMTP testSMTP);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificate"></param>
        /// <returns>Certificate</returns>
        Certificate UpdateCertificateConfiguration(Certificate certificate);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificate"></param>
        /// <returns>ApiResponse of Certificate</returns>
        ApiResponse<Certificate> UpdateCertificateConfigurationWithHttpInfo(Certificate certificate);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workstation"></param>
        /// <returns>Workstation</returns>
        Workstation UpdateCurrentWorkstation(Workstation workstation);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workstation"></param>
        /// <returns>ApiResponse of Workstation</returns>
        ApiResponse<Workstation> UpdateCurrentWorkstationWithHttpInfo(Workstation workstation);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this download archive.</param>
        /// <param name="downloadArchive"></param>
        /// <returns>DownloadArchive</returns>
        DownloadArchive UpdateDownloadArchive(Guid id, DownloadArchive downloadArchive);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this download archive.</param>
        /// <param name="downloadArchive"></param>
        /// <returns>ApiResponse of DownloadArchive</returns>
        ApiResponse<DownloadArchive> UpdateDownloadArchiveWithHttpInfo(Guid id, DownloadArchive downloadArchive);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:view&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Group.</param>
        /// <param name="elementsGroupDetail"></param>
        /// <returns>ElementsGroupDetail</returns>
        ElementsGroupDetail UpdateGroup(int id, ElementsGroupDetail elementsGroupDetail);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:view&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Group.</param>
        /// <param name="elementsGroupDetail"></param>
        /// <returns>ApiResponse of ElementsGroupDetail</returns>
        ApiResponse<ElementsGroupDetail> UpdateGroupWithHttpInfo(int id, ElementsGroupDetail elementsGroupDetail);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this NTP Server.</param>
        /// <param name="nTPServer"></param>
        /// <returns>NTPServer</returns>
        NTPServer UpdateNTPServer(int id, NTPServer nTPServer);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this NTP Server.</param>
        /// <param name="nTPServer"></param>
        /// <returns>ApiResponse of NTPServer</returns>
        ApiResponse<NTPServer> UpdateNTPServerWithHttpInfo(int id, NTPServer nTPServer);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Parameters</returns>
        Parameters UpdateParameters(Parameters parameters);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiResponse of Parameters</returns>
        ApiResponse<Parameters> UpdateParametersWithHttpInfo(Parameters parameters);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="elementsUserProfile"></param>
        /// <returns>ElementsUserProfile</returns>
        ElementsUserProfile UpdateProfile(ElementsUserProfile elementsUserProfile);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="elementsUserProfile"></param>
        /// <returns>ApiResponse of ElementsUserProfile</returns>
        ApiResponse<ElementsUserProfile> UpdateProfileWithHttpInfo(ElementsUserProfile elementsUserProfile);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sMTPConfiguration"></param>
        /// <returns>SMTPConfiguration</returns>
        SMTPConfiguration UpdateSMTPConfiguration(SMTPConfiguration sMTPConfiguration);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sMTPConfiguration"></param>
        /// <returns>ApiResponse of SMTPConfiguration</returns>
        ApiResponse<SMTPConfiguration> UpdateSMTPConfigurationWithHttpInfo(SMTPConfiguration sMTPConfiguration);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="elementsUserDetail"></param>
        /// <returns>ElementsUserDetail</returns>
        ElementsUserDetail UpdateUser(int id, ElementsUserDetail elementsUserDetail);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="elementsUserDetail"></param>
        /// <returns>ApiResponse of ElementsUserDetail</returns>
        ApiResponse<ElementsUserDetail> UpdateUserWithHttpInfo(int id, ElementsUserDetail elementsUserDetail);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user   * Own workstation or User account permission: &#x60;workstations:view&#x60; (read) / &#x60;workstations:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this workstation.</param>
        /// <param name="workstation"></param>
        /// <returns>Workstation</returns>
        Workstation UpdateWorkstation(string id, Workstation workstation);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user   * Own workstation or User account permission: &#x60;workstations:view&#x60; (read) / &#x60;workstations:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this workstation.</param>
        /// <param name="workstation"></param>
        /// <returns>ApiResponse of Workstation</returns>
        ApiResponse<Workstation> UpdateWorkstationWithHttpInfo(string id, Workstation workstation);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadChunkEndpointRequest"></param>
        /// <returns></returns>
        void UploadChunk(UploadChunkEndpointRequest uploadChunkEndpointRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadChunkEndpointRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UploadChunkWithHttpInfo(UploadChunkEndpointRequest uploadChunkEndpointRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMainApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApplyConfigurationAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApplyConfigurationWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BeepAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BeepWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CheckCertificateAsync(Certificate certificate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CheckCertificateWithHttpInfoAsync(Certificate certificate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadId"> (optional)</param>
        /// <param name="chunkNumber"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CheckChunkUploadedAsync(string uploadId = default(string), string chunkNumber = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadId"> (optional)</param>
        /// <param name="chunkNumber"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CheckChunkUploadedWithHttpInfoAsync(string uploadId = default(string), string chunkNumber = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CheckConnectivityEndpointResponse</returns>
        System.Threading.Tasks.Task<CheckConnectivityEndpointResponse> CheckInternetConnectivityAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CheckConnectivityEndpointResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CheckConnectivityEndpointResponse>> CheckInternetConnectivityWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60;   * License component: stornext_mdc 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stornextLicense"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;StorNextLicenseCheckEndpointResponse&gt;</returns>
        System.Threading.Tasks.Task<List<StorNextLicenseCheckEndpointResponse>> CheckStorNextLicenseAsync(StornextLicense stornextLicense, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60;   * License component: stornext_mdc 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stornextLicense"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;StorNextLicenseCheckEndpointResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<StorNextLicenseCheckEndpointResponse>>> CheckStorNextLicenseWithHttpInfoAsync(StornextLicense stornextLicense, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DownloadArchive</returns>
        System.Threading.Tasks.Task<DownloadArchive> CollectDiagnosticsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DownloadArchive)</returns>
        System.Threading.Tasks.Task<ApiResponse<DownloadArchive>> CollectDiagnosticsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDownloadArchive"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DownloadArchive</returns>
        System.Threading.Tasks.Task<DownloadArchive> CreateArchiveAsync(CreateDownloadArchive createDownloadArchive, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDownloadArchive"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DownloadArchive)</returns>
        System.Threading.Tasks.Task<ApiResponse<DownloadArchive>> CreateArchiveWithHttpInfoAsync(CreateDownloadArchive createDownloadArchive, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:view&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="elementsGroupDetail"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ElementsGroupDetail</returns>
        System.Threading.Tasks.Task<ElementsGroupDetail> CreateGroupAsync(ElementsGroupDetail elementsGroupDetail, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:view&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="elementsGroupDetail"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ElementsGroupDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ElementsGroupDetail>> CreateGroupWithHttpInfoAsync(ElementsGroupDetail elementsGroupDetail, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="createHomeWorkspaceRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Workspace</returns>
        System.Threading.Tasks.Task<Workspace> CreateHomeWorkspaceAsync(int id, CreateHomeWorkspaceRequest createHomeWorkspaceRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="createHomeWorkspaceRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Workspace)</returns>
        System.Threading.Tasks.Task<ApiResponse<Workspace>> CreateHomeWorkspaceWithHttpInfoAsync(int id, CreateHomeWorkspaceRequest createHomeWorkspaceRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nTPServer"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NTPServer</returns>
        System.Threading.Tasks.Task<NTPServer> CreateNTPServerAsync(NTPServer nTPServer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nTPServer"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NTPServer)</returns>
        System.Threading.Tasks.Task<ApiResponse<NTPServer>> CreateNTPServerWithHttpInfoAsync(NTPServer nTPServer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="elementsUserDetail"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ElementsUserDetail</returns>
        System.Threading.Tasks.Task<ElementsUserDetail> CreateUserAsync(ElementsUserDetail elementsUserDetail, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="elementsUserDetail"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ElementsUserDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ElementsUserDetail>> CreateUserWithHttpInfoAsync(ElementsUserDetail elementsUserDetail, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user   * Own workstation or User account permission: &#x60;workstations:view&#x60; (read) / &#x60;workstations:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workstation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Workstation</returns>
        System.Threading.Tasks.Task<Workstation> CreateWorkstationAsync(Workstation workstation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user   * Own workstation or User account permission: &#x60;workstations:view&#x60; (read) / &#x60;workstations:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workstation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Workstation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Workstation>> CreateWorkstationWithHttpInfoAsync(Workstation workstation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this download archive.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDownloadArchiveAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this download archive.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDownloadArchiveWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:view&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteGroupAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:view&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGroupWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteHomeWorkspaceAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteHomeWorkspaceWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this NTP Server.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteNTPServerAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this NTP Server.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteNTPServerWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteUserAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user   * Own workstation or User account permission: &#x60;workstations:view&#x60; (read) / &#x60;workstations:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this workstation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteWorkstationAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user   * Own workstation or User account permission: &#x60;workstations:view&#x60; (read) / &#x60;workstations:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this workstation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWorkstationWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DisableUserTOTPAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DisableUserTOTPWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="enableTOTPRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EnableUserTOTPAsync(int id, EnableTOTPRequest enableTOTPRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="enableTOTPRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EnableUserTOTPWithHttpInfoAsync(int id, EnableTOTPRequest enableTOTPRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="finishUploadEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FinishUploadAsync(FinishUploadEndpointRequest finishUploadEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="finishUploadEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FinishUploadWithHttpInfoAsync(FinishUploadEndpointRequest finishUploadEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this LDAP Server.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FixLDAPGroupMembershipsAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this LDAP Server.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FixLDAPGroupMembershipsWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:status:view&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">Filter the returned list by &#x60;user&#x60;. (optional)</param>
        /// <param name="mountedWorkspacesMountNode">Filter the returned list by &#x60;mounted_workspaces__mount_node&#x60;. (optional)</param>
        /// <param name="workstation">Filter the returned list by &#x60;workstation&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ClientSession&gt;</returns>
        System.Threading.Tasks.Task<List<ClientSession>> GetAllClientSessionsAsync(string user = default(string), string mountedWorkspacesMountNode = default(string), string workstation = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:status:view&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">Filter the returned list by &#x60;user&#x60;. (optional)</param>
        /// <param name="mountedWorkspacesMountNode">Filter the returned list by &#x60;mounted_workspaces__mount_node&#x60;. (optional)</param>
        /// <param name="workstation">Filter the returned list by &#x60;workstation&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ClientSession&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ClientSession>>> GetAllClientSessionsWithHttpInfoAsync(string user = default(string), string mountedWorkspacesMountNode = default(string), string workstation = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DownloadArchive&gt;</returns>
        System.Threading.Tasks.Task<List<DownloadArchive>> GetAllDownloadArchivesAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DownloadArchive&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DownloadArchive>>> GetAllDownloadArchivesWithHttpInfoAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;downloads:view&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Download&gt;</returns>
        System.Threading.Tasks.Task<List<Download>> GetAllDownloadsAsync(string name = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;downloads:view&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Download&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Download>>> GetAllDownloadsWithHttpInfoAsync(string name = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:view&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ElementsGroup&gt;</returns>
        System.Threading.Tasks.Task<List<ElementsGroup>> GetAllGroupsAsync(string name = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:view&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ElementsGroup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ElementsGroup>>> GetAllGroupsWithHttpInfoAsync(string name = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;LDAPServer&gt;</returns>
        System.Threading.Tasks.Task<List<LDAPServer>> GetAllLDAPServersAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;LDAPServer&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LDAPServer>>> GetAllLDAPServersWithHttpInfoAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter the returned list by &#x60;address&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;NTPServer&gt;</returns>
        System.Threading.Tasks.Task<List<NTPServer>> GetAllNTPServersAsync(string address = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter the returned list by &#x60;address&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;NTPServer&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NTPServer>>> GetAllNTPServersWithHttpInfoAsync(string address = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Filter the returned list by &#x60;type&#x60;. (optional)</param>
        /// <param name="backend">Filter the returned list by &#x60;backend&#x60;. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="address">Filter the returned list by &#x60;address&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="includeStatus"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;StorageNode&gt;</returns>
        System.Threading.Tasks.Task<List<StorageNode>> GetAllStorageNodesAsync(string type = default(string), string backend = default(string), string name = default(string), string address = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), bool? includeStatus = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Filter the returned list by &#x60;type&#x60;. (optional)</param>
        /// <param name="backend">Filter the returned list by &#x60;backend&#x60;. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="address">Filter the returned list by &#x60;address&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="includeStatus"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;StorageNode&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<StorageNode>>> GetAllStorageNodesWithHttpInfoAsync(string type = default(string), string backend = default(string), string name = default(string), string address = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), bool? includeStatus = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Filter the returned list by &#x60;username&#x60;. (optional)</param>
        /// <param name="home">Filter the returned list by &#x60;home&#x60;. (optional)</param>
        /// <param name="fullName">Filter the returned list by &#x60;full_name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="includeAllowedFsPaths"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ElementsUser&gt;</returns>
        System.Threading.Tasks.Task<List<ElementsUser>> GetAllUsersAsync(string username = default(string), string home = default(string), string fullName = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), bool? includeAllowedFsPaths = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Filter the returned list by &#x60;username&#x60;. (optional)</param>
        /// <param name="home">Filter the returned list by &#x60;home&#x60;. (optional)</param>
        /// <param name="fullName">Filter the returned list by &#x60;full_name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="includeAllowedFsPaths"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ElementsUser&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ElementsUser>>> GetAllUsersWithHttpInfoAsync(string username = default(string), string home = default(string), string fullName = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), bool? includeAllowedFsPaths = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user   * Own workstation or User account permission: &#x60;workstations:view&#x60; (read) / &#x60;workstations:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostname">Filter the returned list by &#x60;hostname&#x60;. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Workstation&gt;</returns>
        System.Threading.Tasks.Task<List<Workstation>> GetAllWorkstationsAsync(string hostname = default(string), string name = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user   * Own workstation or User account permission: &#x60;workstations:view&#x60; (read) / &#x60;workstations:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostname">Filter the returned list by &#x60;hostname&#x60;. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Workstation&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Workstation>>> GetAllWorkstationsWithHttpInfoAsync(string hostname = default(string), string name = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Certificate</returns>
        System.Threading.Tasks.Task<Certificate> GetCertificateConfigurationAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Certificate)</returns>
        System.Threading.Tasks.Task<ApiResponse<Certificate>> GetCertificateConfigurationWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetClientDownloadFileAsync(string file, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetClientDownloadFileWithHttpInfoAsync(string file, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ClientsEndpointResponse&gt;</returns>
        System.Threading.Tasks.Task<List<ClientsEndpointResponse>> GetClientDownloadsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ClientsEndpointResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ClientsEndpointResponse>>> GetClientDownloadsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:status:view&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this client session.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientSession</returns>
        System.Threading.Tasks.Task<ClientSession> GetClientSessionAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:status:view&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this client session.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientSession)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientSession>> GetClientSessionWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Workstation</returns>
        System.Threading.Tasks.Task<Workstation> GetCurrentWorkstationAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Workstation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Workstation>> GetCurrentWorkstationWithHttpInfoAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;downloads:view&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this download.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Download</returns>
        System.Threading.Tasks.Task<Download> GetDownloadAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;downloads:view&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this download.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Download)</returns>
        System.Threading.Tasks.Task<ApiResponse<Download>> GetDownloadWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this download archive.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DownloadArchive</returns>
        System.Threading.Tasks.Task<DownloadArchive> GetDownloadArchiveAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this download archive.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DownloadArchive)</returns>
        System.Threading.Tasks.Task<ApiResponse<DownloadArchive>> GetDownloadArchiveWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this download archive.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetDownloadArchiveFileAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this download archive.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetDownloadArchiveFileWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;downloads:view&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this download.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetDownloadFileAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;downloads:view&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this download.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetDownloadFileWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;downloads:view&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this download.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetDownloadIconAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;downloads:view&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this download.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetDownloadIconWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:view&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ElementsGroupDetail</returns>
        System.Threading.Tasks.Task<ElementsGroupDetail> GetGroupAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:view&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ElementsGroupDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ElementsGroupDetail>> GetGroupWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Workspace</returns>
        System.Threading.Tasks.Task<Workspace> GetHomeWorkspaceAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Workspace)</returns>
        System.Threading.Tasks.Task<ApiResponse<Workspace>> GetHomeWorkspaceWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Ipmi</returns>
        System.Threading.Tasks.Task<Ipmi> GetIPMIConfigurationAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Ipmi)</returns>
        System.Threading.Tasks.Task<ApiResponse<Ipmi>> GetIPMIConfigurationWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this LDAP Server.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LDAPServer</returns>
        System.Threading.Tasks.Task<LDAPServer> GetLDAPServerAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this LDAP Server.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LDAPServer)</returns>
        System.Threading.Tasks.Task<ApiResponse<LDAPServer>> GetLDAPServerWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this LDAP Server.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LDAPServerGroups</returns>
        System.Threading.Tasks.Task<LDAPServerGroups> GetLDAPServerGroupsAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this LDAP Server.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LDAPServerGroups)</returns>
        System.Threading.Tasks.Task<ApiResponse<LDAPServerGroups>> GetLDAPServerGroupsWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this LDAP Server.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LDAPServerUsers</returns>
        System.Threading.Tasks.Task<LDAPServerUsers> GetLDAPServerUsersAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this LDAP Server.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LDAPServerUsers)</returns>
        System.Threading.Tasks.Task<ApiResponse<LDAPServerUsers>> GetLDAPServerUsersWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of License</returns>
        System.Threading.Tasks.Task<License> GetLicenseAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (License)</returns>
        System.Threading.Tasks.Task<ApiResponse<License>> GetLicenseWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimeEndpointResponse</returns>
        System.Threading.Tasks.Task<TimeEndpointResponse> GetLocalTimeAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimeEndpointResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimeEndpointResponse>> GetLocalTimeWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="offset"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetLogAsync(string path, int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="offset"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetLogWithHttpInfoAsync(string path, int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this NTP Server.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NTPServer</returns>
        System.Threading.Tasks.Task<NTPServer> GetNTPServerAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this NTP Server.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NTPServer)</returns>
        System.Threading.Tasks.Task<ApiResponse<NTPServer>> GetNTPServerWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:status:view&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Sensors</returns>
        System.Threading.Tasks.Task<Sensors> GetNodeIPMISensorsAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:status:view&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Sensors)</returns>
        System.Threading.Tasks.Task<ApiResponse<Sensors>> GetNodeIPMISensorsWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:status:view&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Stats</returns>
        System.Threading.Tasks.Task<Stats> GetNodeStatsAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:status:view&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Stats)</returns>
        System.Threading.Tasks.Task<ApiResponse<Stats>> GetNodeStatsWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Parameters</returns>
        System.Threading.Tasks.Task<Parameters> GetParametersAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Parameters)</returns>
        System.Threading.Tasks.Task<ApiResponse<Parameters>> GetParametersWithHttpInfoAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ElementsUserProfile</returns>
        System.Threading.Tasks.Task<ElementsUserProfile> GetProfileAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ElementsUserProfile)</returns>
        System.Threading.Tasks.Task<ApiResponse<ElementsUserProfile>> GetProfileWithHttpInfoAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ReleaseNotesEndpointResponse&gt;</returns>
        System.Threading.Tasks.Task<List<ReleaseNotesEndpointResponse>> GetReleaseNotesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ReleaseNotesEndpointResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ReleaseNotesEndpointResponse>>> GetReleaseNotesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SMTPConfiguration</returns>
        System.Threading.Tasks.Task<SMTPConfiguration> GetSMTPConfigurationAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SMTPConfiguration)</returns>
        System.Threading.Tasks.Task<ApiResponse<SMTPConfiguration>> GetSMTPConfigurationWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <param name="service"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceStatus</returns>
        System.Threading.Tasks.Task<ServiceStatus> GetServiceStatusAsync(int id, string service, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <param name="service"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceStatus>> GetServiceStatusWithHttpInfoAsync(int id, string service, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60;   * License component: stornext_mdc 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorNextLicenseEndpointResponse</returns>
        System.Threading.Tasks.Task<StorNextLicenseEndpointResponse> GetStorNextLicenseAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60;   * License component: stornext_mdc 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorNextLicenseEndpointResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorNextLicenseEndpointResponse>> GetStorNextLicenseWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <param name="includeStatus"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageNode</returns>
        System.Threading.Tasks.Task<StorageNode> GetStorageNodeAsync(int id, bool? includeStatus = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <param name="includeStatus"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageNode)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageNode>> GetStorageNodeWithHttpInfoAsync(int id, bool? includeStatus = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SystemInfoEndpointResponse</returns>
        System.Threading.Tasks.Task<SystemInfoEndpointResponse> GetSystemInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SystemInfoEndpointResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SystemInfoEndpointResponse>> GetSystemInfoWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ElementsUserDetail</returns>
        System.Threading.Tasks.Task<ElementsUserDetail> GetUserAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ElementsUserDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ElementsUserDetail>> GetUserWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user   * Own workstation or User account permission: &#x60;workstations:view&#x60; (read) / &#x60;workstations:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this workstation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Workstation</returns>
        System.Threading.Tasks.Task<Workstation> GetWorkstationAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user   * Own workstation or User account permission: &#x60;workstations:view&#x60; (read) / &#x60;workstations:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this workstation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Workstation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Workstation>> GetWorkstationWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60;   * License component: stornext_mdc 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stornextLicense"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorNextLicenseEndpointResponse</returns>
        System.Threading.Tasks.Task<StorNextLicenseEndpointResponse> InstallStorNextLicenseAsync(StornextLicense stornextLicense, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60;   * License component: stornext_mdc 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stornextLicense"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorNextLicenseEndpointResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorNextLicenseEndpointResponse>> InstallStorNextLicenseWithHttpInfoAsync(StornextLicense stornextLicense, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workstationPartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Workstation</returns>
        System.Threading.Tasks.Task<Workstation> PatchCurrentWorkstationAsync(WorkstationPartialUpdate workstationPartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workstationPartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Workstation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Workstation>> PatchCurrentWorkstationWithHttpInfoAsync(WorkstationPartialUpdate workstationPartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this download archive.</param>
        /// <param name="downloadArchivePartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DownloadArchive</returns>
        System.Threading.Tasks.Task<DownloadArchive> PatchDownloadArchiveAsync(Guid id, DownloadArchivePartialUpdate downloadArchivePartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this download archive.</param>
        /// <param name="downloadArchivePartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DownloadArchive)</returns>
        System.Threading.Tasks.Task<ApiResponse<DownloadArchive>> PatchDownloadArchiveWithHttpInfoAsync(Guid id, DownloadArchivePartialUpdate downloadArchivePartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:view&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Group.</param>
        /// <param name="elementsGroupDetailPartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ElementsGroupDetail</returns>
        System.Threading.Tasks.Task<ElementsGroupDetail> PatchGroupAsync(int id, ElementsGroupDetailPartialUpdate elementsGroupDetailPartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:view&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Group.</param>
        /// <param name="elementsGroupDetailPartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ElementsGroupDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ElementsGroupDetail>> PatchGroupWithHttpInfoAsync(int id, ElementsGroupDetailPartialUpdate elementsGroupDetailPartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this NTP Server.</param>
        /// <param name="nTPServerPartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NTPServer</returns>
        System.Threading.Tasks.Task<NTPServer> PatchNTPServerAsync(int id, NTPServerPartialUpdate nTPServerPartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this NTP Server.</param>
        /// <param name="nTPServerPartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NTPServer)</returns>
        System.Threading.Tasks.Task<ApiResponse<NTPServer>> PatchNTPServerWithHttpInfoAsync(int id, NTPServerPartialUpdate nTPServerPartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="elementsUserProfilePartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ElementsUserProfile</returns>
        System.Threading.Tasks.Task<ElementsUserProfile> PatchProfileAsync(ElementsUserProfilePartialUpdate elementsUserProfilePartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="elementsUserProfilePartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ElementsUserProfile)</returns>
        System.Threading.Tasks.Task<ApiResponse<ElementsUserProfile>> PatchProfileWithHttpInfoAsync(ElementsUserProfilePartialUpdate elementsUserProfilePartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="elementsUserDetailPartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ElementsUserDetail</returns>
        System.Threading.Tasks.Task<ElementsUserDetail> PatchUserAsync(int id, ElementsUserDetailPartialUpdate elementsUserDetailPartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="elementsUserDetailPartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ElementsUserDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ElementsUserDetail>> PatchUserWithHttpInfoAsync(int id, ElementsUserDetailPartialUpdate elementsUserDetailPartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user   * Own workstation or User account permission: &#x60;workstations:view&#x60; (read) / &#x60;workstations:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this workstation.</param>
        /// <param name="workstationPartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Workstation</returns>
        System.Threading.Tasks.Task<Workstation> PatchWorkstationAsync(string id, WorkstationPartialUpdate workstationPartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user   * Own workstation or User account permission: &#x60;workstations:view&#x60; (read) / &#x60;workstations:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this workstation.</param>
        /// <param name="workstationPartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Workstation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Workstation>> PatchWorkstationWithHttpInfoAsync(string id, WorkstationPartialUpdate workstationPartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userPreviewRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserPreviewResponse</returns>
        System.Threading.Tasks.Task<UserPreviewResponse> PreviewUserAsync(UserPreviewRequest userPreviewRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userPreviewRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserPreviewResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserPreviewResponse>> PreviewUserWithHttpInfoAsync(UserPreviewRequest userPreviewRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RebootAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RebootWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerUploadEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RegisterUploadAsync(RegisterUploadEndpointRequest registerUploadEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerUploadEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RegisterUploadWithHttpInfoAsync(RegisterUploadEndpointRequest registerUploadEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;media:access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerUploadMetadataEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RegisterUploadMetadataAsync(RegisterUploadMetadataEndpointRequest registerUploadMetadataEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;media:access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerUploadMetadataEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RegisterUploadMetadataWithHttpInfoAsync(RegisterUploadMetadataEndpointRequest registerUploadMetadataEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailPreview"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RenderEmailTemplatePreviewAsync(EmailPreview emailPreview, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailPreview"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RenderEmailTemplatePreviewWithHttpInfoAsync(EmailPreview emailPreview, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ResetUserPasswordAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ResetUserPasswordWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <param name="operation"></param>
        /// <param name="service"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RunServiceOperationAsync(int id, string operation, string service, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <param name="operation"></param>
        /// <param name="service"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RunServiceOperationWithHttpInfoAsync(int id, string operation, string service, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <param name="ipmi"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Ipmi</returns>
        System.Threading.Tasks.Task<Ipmi> SetIPMIConfigurationAsync(int id, Ipmi ipmi, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <param name="ipmi"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Ipmi)</returns>
        System.Threading.Tasks.Task<ApiResponse<Ipmi>> SetIPMIConfigurationWithHttpInfoAsync(int id, Ipmi ipmi, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimeEndpointResponse</returns>
        System.Threading.Tasks.Task<TimeEndpointResponse> SetLocalTimeAsync(TimeEndpointRequest timeEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimeEndpointResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimeEndpointResponse>> SetLocalTimeWithHttpInfoAsync(TimeEndpointRequest timeEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeOwnPasswordRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetMyPasswordAsync(ChangeOwnPasswordRequest changeOwnPasswordRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeOwnPasswordRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetMyPasswordWithHttpInfoAsync(ChangeOwnPasswordRequest changeOwnPasswordRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="changePasswordRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetUserPasswordAsync(int id, ChangePasswordRequest changePasswordRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="changePasswordRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetUserPasswordWithHttpInfoAsync(int id, ChangePasswordRequest changePasswordRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ShutdownAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ShutdownWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolrReindexEndpointResponse</returns>
        System.Threading.Tasks.Task<SolrReindexEndpointResponse> StartSolrReindexAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolrReindexEndpointResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SolrReindexEndpointResponse>> StartSolrReindexWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        System.Threading.Tasks.Task<TaskInfo> StartSupportSessionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskInfo>> StartSupportSessionWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        System.Threading.Tasks.Task<TaskInfo> StartSystemBackupAsync(Path path, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskInfo>> StartSystemBackupWithHttpInfoAsync(Path path, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SyncLDAPGroupAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SyncLDAPGroupWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this LDAP Server.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SyncLDAPUsersAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this LDAP Server.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SyncLDAPUsersWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeSyncEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimeSyncEndpointResponse</returns>
        System.Threading.Tasks.Task<TimeSyncEndpointResponse> SyncTimeAsync(TimeSyncEndpointRequest timeSyncEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeSyncEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimeSyncEndpointResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimeSyncEndpointResponse>> SyncTimeWithHttpInfoAsync(TimeSyncEndpointRequest timeSyncEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="syncTOTPRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SyncTOTP</returns>
        System.Threading.Tasks.Task<SyncTOTP> SyncUserTOTPAsync(int id, SyncTOTPRequest syncTOTPRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="syncTOTPRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SyncTOTP)</returns>
        System.Threading.Tasks.Task<ApiResponse<SyncTOTP>> SyncUserTOTPWithHttpInfoAsync(int id, SyncTOTPRequest syncTOTPRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testSMTP"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TestSMTPConfigurationAsync(TestSMTP testSMTP, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testSMTP"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TestSMTPConfigurationWithHttpInfoAsync(TestSMTP testSMTP, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Certificate</returns>
        System.Threading.Tasks.Task<Certificate> UpdateCertificateConfigurationAsync(Certificate certificate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Certificate)</returns>
        System.Threading.Tasks.Task<ApiResponse<Certificate>> UpdateCertificateConfigurationWithHttpInfoAsync(Certificate certificate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workstation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Workstation</returns>
        System.Threading.Tasks.Task<Workstation> UpdateCurrentWorkstationAsync(Workstation workstation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workstation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Workstation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Workstation>> UpdateCurrentWorkstationWithHttpInfoAsync(Workstation workstation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this download archive.</param>
        /// <param name="downloadArchive"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DownloadArchive</returns>
        System.Threading.Tasks.Task<DownloadArchive> UpdateDownloadArchiveAsync(Guid id, DownloadArchive downloadArchive, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this download archive.</param>
        /// <param name="downloadArchive"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DownloadArchive)</returns>
        System.Threading.Tasks.Task<ApiResponse<DownloadArchive>> UpdateDownloadArchiveWithHttpInfoAsync(Guid id, DownloadArchive downloadArchive, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:view&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Group.</param>
        /// <param name="elementsGroupDetail"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ElementsGroupDetail</returns>
        System.Threading.Tasks.Task<ElementsGroupDetail> UpdateGroupAsync(int id, ElementsGroupDetail elementsGroupDetail, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;users:view&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Group.</param>
        /// <param name="elementsGroupDetail"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ElementsGroupDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ElementsGroupDetail>> UpdateGroupWithHttpInfoAsync(int id, ElementsGroupDetail elementsGroupDetail, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this NTP Server.</param>
        /// <param name="nTPServer"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NTPServer</returns>
        System.Threading.Tasks.Task<NTPServer> UpdateNTPServerAsync(int id, NTPServer nTPServer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this NTP Server.</param>
        /// <param name="nTPServer"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NTPServer)</returns>
        System.Threading.Tasks.Task<ApiResponse<NTPServer>> UpdateNTPServerWithHttpInfoAsync(int id, NTPServer nTPServer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Parameters</returns>
        System.Threading.Tasks.Task<Parameters> UpdateParametersAsync(Parameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Parameters)</returns>
        System.Threading.Tasks.Task<ApiResponse<Parameters>> UpdateParametersWithHttpInfoAsync(Parameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="elementsUserProfile"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ElementsUserProfile</returns>
        System.Threading.Tasks.Task<ElementsUserProfile> UpdateProfileAsync(ElementsUserProfile elementsUserProfile, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="elementsUserProfile"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ElementsUserProfile)</returns>
        System.Threading.Tasks.Task<ApiResponse<ElementsUserProfile>> UpdateProfileWithHttpInfoAsync(ElementsUserProfile elementsUserProfile, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sMTPConfiguration"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SMTPConfiguration</returns>
        System.Threading.Tasks.Task<SMTPConfiguration> UpdateSMTPConfigurationAsync(SMTPConfiguration sMTPConfiguration, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sMTPConfiguration"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SMTPConfiguration)</returns>
        System.Threading.Tasks.Task<ApiResponse<SMTPConfiguration>> UpdateSMTPConfigurationWithHttpInfoAsync(SMTPConfiguration sMTPConfiguration, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="elementsUserDetail"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ElementsUserDetail</returns>
        System.Threading.Tasks.Task<ElementsUserDetail> UpdateUserAsync(int id, ElementsUserDetail elementsUserDetail, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="elementsUserDetail"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ElementsUserDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ElementsUserDetail>> UpdateUserWithHttpInfoAsync(int id, ElementsUserDetail elementsUserDetail, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user   * Own workstation or User account permission: &#x60;workstations:view&#x60; (read) / &#x60;workstations:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this workstation.</param>
        /// <param name="workstation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Workstation</returns>
        System.Threading.Tasks.Task<Workstation> UpdateWorkstationAsync(string id, Workstation workstation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user   * Own workstation or User account permission: &#x60;workstations:view&#x60; (read) / &#x60;workstations:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this workstation.</param>
        /// <param name="workstation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Workstation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Workstation>> UpdateWorkstationWithHttpInfoAsync(string id, Workstation workstation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadChunkEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UploadChunkAsync(UploadChunkEndpointRequest uploadChunkEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * Authenticated user 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadChunkEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UploadChunkWithHttpInfoAsync(UploadChunkEndpointRequest uploadChunkEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMainApi : IMainApiSync, IMainApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MainApi : IMainApi
    {
        private ElementsSDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MainApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MainApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MainApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MainApi(string basePath)
        {
            this.Configuration = ElementsSDK.Client.Configuration.MergeConfigurations(
                ElementsSDK.Client.GlobalConfiguration.Instance,
                new ElementsSDK.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ElementsSDK.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ElementsSDK.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ElementsSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MainApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MainApi(ElementsSDK.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ElementsSDK.Client.Configuration.MergeConfigurations(
                ElementsSDK.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ElementsSDK.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ElementsSDK.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ElementsSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MainApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MainApi(ElementsSDK.Client.ISynchronousClient client, ElementsSDK.Client.IAsynchronousClient asyncClient, ElementsSDK.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ElementsSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ElementsSDK.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ElementsSDK.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ElementsSDK.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ElementsSDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void ApplyConfiguration()
        {
            ApplyConfigurationWithHttpInfo();
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> ApplyConfigurationWithHttpInfo()
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/2/configuration/apply", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplyConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApplyConfigurationAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApplyConfigurationWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> ApplyConfigurationWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/2/configuration/apply", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplyConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void Beep()
        {
            BeepWithHttpInfo();
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> BeepWithHttpInfo()
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/2/system/beep", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Beep", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BeepAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await BeepWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> BeepWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/2/system/beep", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Beep", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificate"></param>
        /// <returns></returns>
        public void CheckCertificate(Certificate certificate)
        {
            CheckCertificateWithHttpInfo(certificate);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificate"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> CheckCertificateWithHttpInfo(Certificate certificate)
        {
            // verify the required parameter 'certificate' is set
            if (certificate == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'certificate' when calling MainApi->CheckCertificate");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = certificate;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/2/system/certificate/check", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckCertificate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CheckCertificateAsync(Certificate certificate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CheckCertificateWithHttpInfoAsync(certificate, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> CheckCertificateWithHttpInfoAsync(Certificate certificate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'certificate' is set
            if (certificate == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'certificate' when calling MainApi->CheckCertificate");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = certificate;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/2/system/certificate/check", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckCertificate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadId"> (optional)</param>
        /// <param name="chunkNumber"> (optional)</param>
        /// <returns></returns>
        public void CheckChunkUploaded(string uploadId = default(string), string chunkNumber = default(string))
        {
            CheckChunkUploadedWithHttpInfo(uploadId, chunkNumber);
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadId"> (optional)</param>
        /// <param name="chunkNumber"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> CheckChunkUploadedWithHttpInfo(string uploadId = default(string), string chunkNumber = default(string))
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (uploadId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "upload_id", uploadId));
            }
            if (chunkNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "chunk_number", chunkNumber));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/2/uploads/chunk", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckChunkUploaded", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadId"> (optional)</param>
        /// <param name="chunkNumber"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CheckChunkUploadedAsync(string uploadId = default(string), string chunkNumber = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CheckChunkUploadedWithHttpInfoAsync(uploadId, chunkNumber, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadId"> (optional)</param>
        /// <param name="chunkNumber"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> CheckChunkUploadedWithHttpInfoAsync(string uploadId = default(string), string chunkNumber = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (uploadId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "upload_id", uploadId));
            }
            if (chunkNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "chunk_number", chunkNumber));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/2/uploads/chunk", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckChunkUploaded", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CheckConnectivityEndpointResponse</returns>
        public CheckConnectivityEndpointResponse CheckInternetConnectivity()
        {
            ElementsSDK.Client.ApiResponse<CheckConnectivityEndpointResponse> localVarResponse = CheckInternetConnectivityWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CheckConnectivityEndpointResponse</returns>
        public ElementsSDK.Client.ApiResponse<CheckConnectivityEndpointResponse> CheckInternetConnectivityWithHttpInfo()
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CheckConnectivityEndpointResponse>("/api/2/system/check-connectivity", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckInternetConnectivity", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CheckConnectivityEndpointResponse</returns>
        public async System.Threading.Tasks.Task<CheckConnectivityEndpointResponse> CheckInternetConnectivityAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<CheckConnectivityEndpointResponse> localVarResponse = await CheckInternetConnectivityWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CheckConnectivityEndpointResponse)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<CheckConnectivityEndpointResponse>> CheckInternetConnectivityWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CheckConnectivityEndpointResponse>("/api/2/system/check-connectivity", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckInternetConnectivity", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60;   * License component: stornext_mdc 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stornextLicense"></param>
        /// <returns>List&lt;StorNextLicenseCheckEndpointResponse&gt;</returns>
        public List<StorNextLicenseCheckEndpointResponse> CheckStorNextLicense(StornextLicense stornextLicense)
        {
            ElementsSDK.Client.ApiResponse<List<StorNextLicenseCheckEndpointResponse>> localVarResponse = CheckStorNextLicenseWithHttpInfo(stornextLicense);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60;   * License component: stornext_mdc 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stornextLicense"></param>
        /// <returns>ApiResponse of List&lt;StorNextLicenseCheckEndpointResponse&gt;</returns>
        public ElementsSDK.Client.ApiResponse<List<StorNextLicenseCheckEndpointResponse>> CheckStorNextLicenseWithHttpInfo(StornextLicense stornextLicense)
        {
            // verify the required parameter 'stornextLicense' is set
            if (stornextLicense == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'stornextLicense' when calling MainApi->CheckStorNextLicense");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = stornextLicense;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<StorNextLicenseCheckEndpointResponse>>("/api/2/stornext-license/check", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckStorNextLicense", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60;   * License component: stornext_mdc 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stornextLicense"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;StorNextLicenseCheckEndpointResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<StorNextLicenseCheckEndpointResponse>> CheckStorNextLicenseAsync(StornextLicense stornextLicense, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<List<StorNextLicenseCheckEndpointResponse>> localVarResponse = await CheckStorNextLicenseWithHttpInfoAsync(stornextLicense, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60;   * License component: stornext_mdc 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stornextLicense"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;StorNextLicenseCheckEndpointResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<List<StorNextLicenseCheckEndpointResponse>>> CheckStorNextLicenseWithHttpInfoAsync(StornextLicense stornextLicense, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'stornextLicense' is set
            if (stornextLicense == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'stornextLicense' when calling MainApi->CheckStorNextLicense");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = stornextLicense;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<StorNextLicenseCheckEndpointResponse>>("/api/2/stornext-license/check", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckStorNextLicense", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>DownloadArchive</returns>
        public DownloadArchive CollectDiagnostics()
        {
            ElementsSDK.Client.ApiResponse<DownloadArchive> localVarResponse = CollectDiagnosticsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of DownloadArchive</returns>
        public ElementsSDK.Client.ApiResponse<DownloadArchive> CollectDiagnosticsWithHttpInfo()
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DownloadArchive>("/api/2/system/collect-diagnostics", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectDiagnostics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DownloadArchive</returns>
        public async System.Threading.Tasks.Task<DownloadArchive> CollectDiagnosticsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<DownloadArchive> localVarResponse = await CollectDiagnosticsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DownloadArchive)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<DownloadArchive>> CollectDiagnosticsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<DownloadArchive>("/api/2/system/collect-diagnostics", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectDiagnostics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDownloadArchive"></param>
        /// <returns>DownloadArchive</returns>
        public DownloadArchive CreateArchive(CreateDownloadArchive createDownloadArchive)
        {
            ElementsSDK.Client.ApiResponse<DownloadArchive> localVarResponse = CreateArchiveWithHttpInfo(createDownloadArchive);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDownloadArchive"></param>
        /// <returns>ApiResponse of DownloadArchive</returns>
        public ElementsSDK.Client.ApiResponse<DownloadArchive> CreateArchiveWithHttpInfo(CreateDownloadArchive createDownloadArchive)
        {
            // verify the required parameter 'createDownloadArchive' is set
            if (createDownloadArchive == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'createDownloadArchive' when calling MainApi->CreateArchive");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createDownloadArchive;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DownloadArchive>("/api/2/download-archive/create", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateArchive", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDownloadArchive"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DownloadArchive</returns>
        public async System.Threading.Tasks.Task<DownloadArchive> CreateArchiveAsync(CreateDownloadArchive createDownloadArchive, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<DownloadArchive> localVarResponse = await CreateArchiveWithHttpInfoAsync(createDownloadArchive, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDownloadArchive"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DownloadArchive)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<DownloadArchive>> CreateArchiveWithHttpInfoAsync(CreateDownloadArchive createDownloadArchive, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createDownloadArchive' is set
            if (createDownloadArchive == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'createDownloadArchive' when calling MainApi->CreateArchive");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createDownloadArchive;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<DownloadArchive>("/api/2/download-archive/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateArchive", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:view&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="elementsGroupDetail"></param>
        /// <returns>ElementsGroupDetail</returns>
        public ElementsGroupDetail CreateGroup(ElementsGroupDetail elementsGroupDetail)
        {
            ElementsSDK.Client.ApiResponse<ElementsGroupDetail> localVarResponse = CreateGroupWithHttpInfo(elementsGroupDetail);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:view&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="elementsGroupDetail"></param>
        /// <returns>ApiResponse of ElementsGroupDetail</returns>
        public ElementsSDK.Client.ApiResponse<ElementsGroupDetail> CreateGroupWithHttpInfo(ElementsGroupDetail elementsGroupDetail)
        {
            // verify the required parameter 'elementsGroupDetail' is set
            if (elementsGroupDetail == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'elementsGroupDetail' when calling MainApi->CreateGroup");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = elementsGroupDetail;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ElementsGroupDetail>("/api/2/groups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:view&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="elementsGroupDetail"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ElementsGroupDetail</returns>
        public async System.Threading.Tasks.Task<ElementsGroupDetail> CreateGroupAsync(ElementsGroupDetail elementsGroupDetail, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<ElementsGroupDetail> localVarResponse = await CreateGroupWithHttpInfoAsync(elementsGroupDetail, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:view&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="elementsGroupDetail"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ElementsGroupDetail)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<ElementsGroupDetail>> CreateGroupWithHttpInfoAsync(ElementsGroupDetail elementsGroupDetail, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'elementsGroupDetail' is set
            if (elementsGroupDetail == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'elementsGroupDetail' when calling MainApi->CreateGroup");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = elementsGroupDetail;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ElementsGroupDetail>("/api/2/groups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="createHomeWorkspaceRequest"></param>
        /// <returns>Workspace</returns>
        public Workspace CreateHomeWorkspace(int id, CreateHomeWorkspaceRequest createHomeWorkspaceRequest)
        {
            ElementsSDK.Client.ApiResponse<Workspace> localVarResponse = CreateHomeWorkspaceWithHttpInfo(id, createHomeWorkspaceRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="createHomeWorkspaceRequest"></param>
        /// <returns>ApiResponse of Workspace</returns>
        public ElementsSDK.Client.ApiResponse<Workspace> CreateHomeWorkspaceWithHttpInfo(int id, CreateHomeWorkspaceRequest createHomeWorkspaceRequest)
        {
            // verify the required parameter 'createHomeWorkspaceRequest' is set
            if (createHomeWorkspaceRequest == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'createHomeWorkspaceRequest' when calling MainApi->CreateHomeWorkspace");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = createHomeWorkspaceRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Workspace>("/api/2/users/{id}/home", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateHomeWorkspace", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="createHomeWorkspaceRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Workspace</returns>
        public async System.Threading.Tasks.Task<Workspace> CreateHomeWorkspaceAsync(int id, CreateHomeWorkspaceRequest createHomeWorkspaceRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<Workspace> localVarResponse = await CreateHomeWorkspaceWithHttpInfoAsync(id, createHomeWorkspaceRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="createHomeWorkspaceRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Workspace)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Workspace>> CreateHomeWorkspaceWithHttpInfoAsync(int id, CreateHomeWorkspaceRequest createHomeWorkspaceRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createHomeWorkspaceRequest' is set
            if (createHomeWorkspaceRequest == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'createHomeWorkspaceRequest' when calling MainApi->CreateHomeWorkspace");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = createHomeWorkspaceRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Workspace>("/api/2/users/{id}/home", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateHomeWorkspace", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nTPServer"></param>
        /// <returns>NTPServer</returns>
        public NTPServer CreateNTPServer(NTPServer nTPServer)
        {
            ElementsSDK.Client.ApiResponse<NTPServer> localVarResponse = CreateNTPServerWithHttpInfo(nTPServer);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nTPServer"></param>
        /// <returns>ApiResponse of NTPServer</returns>
        public ElementsSDK.Client.ApiResponse<NTPServer> CreateNTPServerWithHttpInfo(NTPServer nTPServer)
        {
            // verify the required parameter 'nTPServer' is set
            if (nTPServer == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'nTPServer' when calling MainApi->CreateNTPServer");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = nTPServer;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<NTPServer>("/api/2/system/time/servers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateNTPServer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nTPServer"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NTPServer</returns>
        public async System.Threading.Tasks.Task<NTPServer> CreateNTPServerAsync(NTPServer nTPServer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<NTPServer> localVarResponse = await CreateNTPServerWithHttpInfoAsync(nTPServer, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nTPServer"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NTPServer)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<NTPServer>> CreateNTPServerWithHttpInfoAsync(NTPServer nTPServer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'nTPServer' is set
            if (nTPServer == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'nTPServer' when calling MainApi->CreateNTPServer");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = nTPServer;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<NTPServer>("/api/2/system/time/servers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateNTPServer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="elementsUserDetail"></param>
        /// <returns>ElementsUserDetail</returns>
        public ElementsUserDetail CreateUser(ElementsUserDetail elementsUserDetail)
        {
            ElementsSDK.Client.ApiResponse<ElementsUserDetail> localVarResponse = CreateUserWithHttpInfo(elementsUserDetail);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="elementsUserDetail"></param>
        /// <returns>ApiResponse of ElementsUserDetail</returns>
        public ElementsSDK.Client.ApiResponse<ElementsUserDetail> CreateUserWithHttpInfo(ElementsUserDetail elementsUserDetail)
        {
            // verify the required parameter 'elementsUserDetail' is set
            if (elementsUserDetail == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'elementsUserDetail' when calling MainApi->CreateUser");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = elementsUserDetail;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ElementsUserDetail>("/api/2/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="elementsUserDetail"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ElementsUserDetail</returns>
        public async System.Threading.Tasks.Task<ElementsUserDetail> CreateUserAsync(ElementsUserDetail elementsUserDetail, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<ElementsUserDetail> localVarResponse = await CreateUserWithHttpInfoAsync(elementsUserDetail, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="elementsUserDetail"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ElementsUserDetail)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<ElementsUserDetail>> CreateUserWithHttpInfoAsync(ElementsUserDetail elementsUserDetail, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'elementsUserDetail' is set
            if (elementsUserDetail == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'elementsUserDetail' when calling MainApi->CreateUser");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = elementsUserDetail;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ElementsUserDetail>("/api/2/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user   * Own workstation or User account permission: &#x60;workstations:view&#x60; (read) / &#x60;workstations:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workstation"></param>
        /// <returns>Workstation</returns>
        public Workstation CreateWorkstation(Workstation workstation)
        {
            ElementsSDK.Client.ApiResponse<Workstation> localVarResponse = CreateWorkstationWithHttpInfo(workstation);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user   * Own workstation or User account permission: &#x60;workstations:view&#x60; (read) / &#x60;workstations:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workstation"></param>
        /// <returns>ApiResponse of Workstation</returns>
        public ElementsSDK.Client.ApiResponse<Workstation> CreateWorkstationWithHttpInfo(Workstation workstation)
        {
            // verify the required parameter 'workstation' is set
            if (workstation == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'workstation' when calling MainApi->CreateWorkstation");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = workstation;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Workstation>("/api/2/workstations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWorkstation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user   * Own workstation or User account permission: &#x60;workstations:view&#x60; (read) / &#x60;workstations:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workstation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Workstation</returns>
        public async System.Threading.Tasks.Task<Workstation> CreateWorkstationAsync(Workstation workstation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<Workstation> localVarResponse = await CreateWorkstationWithHttpInfoAsync(workstation, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user   * Own workstation or User account permission: &#x60;workstations:view&#x60; (read) / &#x60;workstations:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workstation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Workstation)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Workstation>> CreateWorkstationWithHttpInfoAsync(Workstation workstation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workstation' is set
            if (workstation == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'workstation' when calling MainApi->CreateWorkstation");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = workstation;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Workstation>("/api/2/workstations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWorkstation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this download archive.</param>
        /// <returns></returns>
        public void DeleteDownloadArchive(Guid id)
        {
            DeleteDownloadArchiveWithHttpInfo(id);
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this download archive.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> DeleteDownloadArchiveWithHttpInfo(Guid id)
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/2/download-archive/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDownloadArchive", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this download archive.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteDownloadArchiveAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteDownloadArchiveWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this download archive.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> DeleteDownloadArchiveWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/2/download-archive/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDownloadArchive", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:view&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Group.</param>
        /// <returns></returns>
        public void DeleteGroup(int id)
        {
            DeleteGroupWithHttpInfo(id);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:view&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Group.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> DeleteGroupWithHttpInfo(int id)
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/2/groups/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:view&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteGroupAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteGroupWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:view&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> DeleteGroupWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/2/groups/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <returns></returns>
        public void DeleteHomeWorkspace(int id)
        {
            DeleteHomeWorkspaceWithHttpInfo(id);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> DeleteHomeWorkspaceWithHttpInfo(int id)
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/2/users/{id}/home", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteHomeWorkspace", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteHomeWorkspaceAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteHomeWorkspaceWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> DeleteHomeWorkspaceWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/2/users/{id}/home", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteHomeWorkspace", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this NTP Server.</param>
        /// <returns></returns>
        public void DeleteNTPServer(int id)
        {
            DeleteNTPServerWithHttpInfo(id);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this NTP Server.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> DeleteNTPServerWithHttpInfo(int id)
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/2/system/time/servers/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteNTPServer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this NTP Server.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteNTPServerAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteNTPServerWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this NTP Server.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> DeleteNTPServerWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/2/system/time/servers/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteNTPServer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <returns></returns>
        public void DeleteUser(int id)
        {
            DeleteUserWithHttpInfo(id);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> DeleteUserWithHttpInfo(int id)
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/2/users/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteUserAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteUserWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> DeleteUserWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/2/users/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user   * Own workstation or User account permission: &#x60;workstations:view&#x60; (read) / &#x60;workstations:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this workstation.</param>
        /// <returns></returns>
        public void DeleteWorkstation(string id)
        {
            DeleteWorkstationWithHttpInfo(id);
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user   * Own workstation or User account permission: &#x60;workstations:view&#x60; (read) / &#x60;workstations:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this workstation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> DeleteWorkstationWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'id' when calling MainApi->DeleteWorkstation");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/2/workstations/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWorkstation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user   * Own workstation or User account permission: &#x60;workstations:view&#x60; (read) / &#x60;workstations:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this workstation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteWorkstationAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteWorkstationWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user   * Own workstation or User account permission: &#x60;workstations:view&#x60; (read) / &#x60;workstations:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this workstation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> DeleteWorkstationWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'id' when calling MainApi->DeleteWorkstation");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/2/workstations/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWorkstation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <returns></returns>
        public void DisableUserTOTP(int id)
        {
            DisableUserTOTPWithHttpInfo(id);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> DisableUserTOTPWithHttpInfo(int id)
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/2/users/{id}/totp", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DisableUserTOTP", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DisableUserTOTPAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DisableUserTOTPWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> DisableUserTOTPWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/2/users/{id}/totp", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DisableUserTOTP", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="enableTOTPRequest"></param>
        /// <returns></returns>
        public void EnableUserTOTP(int id, EnableTOTPRequest enableTOTPRequest)
        {
            EnableUserTOTPWithHttpInfo(id, enableTOTPRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="enableTOTPRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> EnableUserTOTPWithHttpInfo(int id, EnableTOTPRequest enableTOTPRequest)
        {
            // verify the required parameter 'enableTOTPRequest' is set
            if (enableTOTPRequest == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'enableTOTPRequest' when calling MainApi->EnableUserTOTP");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = enableTOTPRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/2/users/{id}/totp", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EnableUserTOTP", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="enableTOTPRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EnableUserTOTPAsync(int id, EnableTOTPRequest enableTOTPRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await EnableUserTOTPWithHttpInfoAsync(id, enableTOTPRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="enableTOTPRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> EnableUserTOTPWithHttpInfoAsync(int id, EnableTOTPRequest enableTOTPRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'enableTOTPRequest' is set
            if (enableTOTPRequest == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'enableTOTPRequest' when calling MainApi->EnableUserTOTP");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = enableTOTPRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/2/users/{id}/totp", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EnableUserTOTP", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="finishUploadEndpointRequest"></param>
        /// <returns></returns>
        public void FinishUpload(FinishUploadEndpointRequest finishUploadEndpointRequest)
        {
            FinishUploadWithHttpInfo(finishUploadEndpointRequest);
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="finishUploadEndpointRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> FinishUploadWithHttpInfo(FinishUploadEndpointRequest finishUploadEndpointRequest)
        {
            // verify the required parameter 'finishUploadEndpointRequest' is set
            if (finishUploadEndpointRequest == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'finishUploadEndpointRequest' when calling MainApi->FinishUpload");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = finishUploadEndpointRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/2/uploads/finish", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FinishUpload", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="finishUploadEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FinishUploadAsync(FinishUploadEndpointRequest finishUploadEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await FinishUploadWithHttpInfoAsync(finishUploadEndpointRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="finishUploadEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> FinishUploadWithHttpInfoAsync(FinishUploadEndpointRequest finishUploadEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'finishUploadEndpointRequest' is set
            if (finishUploadEndpointRequest == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'finishUploadEndpointRequest' when calling MainApi->FinishUpload");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = finishUploadEndpointRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/2/uploads/finish", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FinishUpload", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this LDAP Server.</param>
        /// <returns></returns>
        public void FixLDAPGroupMemberships(int id)
        {
            FixLDAPGroupMembershipsWithHttpInfo(id);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this LDAP Server.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> FixLDAPGroupMembershipsWithHttpInfo(int id)
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/2/ldap-servers/{id}/fix-memberships", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FixLDAPGroupMemberships", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this LDAP Server.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FixLDAPGroupMembershipsAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await FixLDAPGroupMembershipsWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this LDAP Server.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> FixLDAPGroupMembershipsWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/2/ldap-servers/{id}/fix-memberships", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FixLDAPGroupMemberships", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:status:view&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">Filter the returned list by &#x60;user&#x60;. (optional)</param>
        /// <param name="mountedWorkspacesMountNode">Filter the returned list by &#x60;mounted_workspaces__mount_node&#x60;. (optional)</param>
        /// <param name="workstation">Filter the returned list by &#x60;workstation&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>List&lt;ClientSession&gt;</returns>
        public List<ClientSession> GetAllClientSessions(string user = default(string), string mountedWorkspacesMountNode = default(string), string workstation = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.ApiResponse<List<ClientSession>> localVarResponse = GetAllClientSessionsWithHttpInfo(user, mountedWorkspacesMountNode, workstation, ordering, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:status:view&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">Filter the returned list by &#x60;user&#x60;. (optional)</param>
        /// <param name="mountedWorkspacesMountNode">Filter the returned list by &#x60;mounted_workspaces__mount_node&#x60;. (optional)</param>
        /// <param name="workstation">Filter the returned list by &#x60;workstation&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;ClientSession&gt;</returns>
        public ElementsSDK.Client.ApiResponse<List<ClientSession>> GetAllClientSessionsWithHttpInfo(string user = default(string), string mountedWorkspacesMountNode = default(string), string workstation = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (user != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "user", user));
            }
            if (mountedWorkspacesMountNode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "mounted_workspaces__mount_node", mountedWorkspacesMountNode));
            }
            if (workstation != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "workstation", workstation));
            }
            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ClientSession>>("/api/2/client-sessions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllClientSessions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:status:view&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">Filter the returned list by &#x60;user&#x60;. (optional)</param>
        /// <param name="mountedWorkspacesMountNode">Filter the returned list by &#x60;mounted_workspaces__mount_node&#x60;. (optional)</param>
        /// <param name="workstation">Filter the returned list by &#x60;workstation&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ClientSession&gt;</returns>
        public async System.Threading.Tasks.Task<List<ClientSession>> GetAllClientSessionsAsync(string user = default(string), string mountedWorkspacesMountNode = default(string), string workstation = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<List<ClientSession>> localVarResponse = await GetAllClientSessionsWithHttpInfoAsync(user, mountedWorkspacesMountNode, workstation, ordering, limit, offset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:status:view&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">Filter the returned list by &#x60;user&#x60;. (optional)</param>
        /// <param name="mountedWorkspacesMountNode">Filter the returned list by &#x60;mounted_workspaces__mount_node&#x60;. (optional)</param>
        /// <param name="workstation">Filter the returned list by &#x60;workstation&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ClientSession&gt;)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<List<ClientSession>>> GetAllClientSessionsWithHttpInfoAsync(string user = default(string), string mountedWorkspacesMountNode = default(string), string workstation = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (user != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "user", user));
            }
            if (mountedWorkspacesMountNode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "mounted_workspaces__mount_node", mountedWorkspacesMountNode));
            }
            if (workstation != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "workstation", workstation));
            }
            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ClientSession>>("/api/2/client-sessions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllClientSessions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>List&lt;DownloadArchive&gt;</returns>
        public List<DownloadArchive> GetAllDownloadArchives(string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.ApiResponse<List<DownloadArchive>> localVarResponse = GetAllDownloadArchivesWithHttpInfo(ordering, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;DownloadArchive&gt;</returns>
        public ElementsSDK.Client.ApiResponse<List<DownloadArchive>> GetAllDownloadArchivesWithHttpInfo(string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<DownloadArchive>>("/api/2/download-archive", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllDownloadArchives", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DownloadArchive&gt;</returns>
        public async System.Threading.Tasks.Task<List<DownloadArchive>> GetAllDownloadArchivesAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<List<DownloadArchive>> localVarResponse = await GetAllDownloadArchivesWithHttpInfoAsync(ordering, limit, offset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DownloadArchive&gt;)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<List<DownloadArchive>>> GetAllDownloadArchivesWithHttpInfoAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<DownloadArchive>>("/api/2/download-archive", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllDownloadArchives", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;downloads:view&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>List&lt;Download&gt;</returns>
        public List<Download> GetAllDownloads(string name = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.ApiResponse<List<Download>> localVarResponse = GetAllDownloadsWithHttpInfo(name, ordering, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;downloads:view&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;Download&gt;</returns>
        public ElementsSDK.Client.ApiResponse<List<Download>> GetAllDownloadsWithHttpInfo(string name = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Download>>("/api/2/downloads", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllDownloads", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;downloads:view&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Download&gt;</returns>
        public async System.Threading.Tasks.Task<List<Download>> GetAllDownloadsAsync(string name = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<List<Download>> localVarResponse = await GetAllDownloadsWithHttpInfoAsync(name, ordering, limit, offset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;downloads:view&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Download&gt;)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<List<Download>>> GetAllDownloadsWithHttpInfoAsync(string name = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Download>>("/api/2/downloads", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllDownloads", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:view&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>List&lt;ElementsGroup&gt;</returns>
        public List<ElementsGroup> GetAllGroups(string name = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.ApiResponse<List<ElementsGroup>> localVarResponse = GetAllGroupsWithHttpInfo(name, ordering, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:view&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;ElementsGroup&gt;</returns>
        public ElementsSDK.Client.ApiResponse<List<ElementsGroup>> GetAllGroupsWithHttpInfo(string name = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ElementsGroup>>("/api/2/groups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllGroups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:view&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ElementsGroup&gt;</returns>
        public async System.Threading.Tasks.Task<List<ElementsGroup>> GetAllGroupsAsync(string name = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<List<ElementsGroup>> localVarResponse = await GetAllGroupsWithHttpInfoAsync(name, ordering, limit, offset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:view&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ElementsGroup&gt;)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<List<ElementsGroup>>> GetAllGroupsWithHttpInfoAsync(string name = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ElementsGroup>>("/api/2/groups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllGroups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>List&lt;LDAPServer&gt;</returns>
        public List<LDAPServer> GetAllLDAPServers(string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.ApiResponse<List<LDAPServer>> localVarResponse = GetAllLDAPServersWithHttpInfo(ordering, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;LDAPServer&gt;</returns>
        public ElementsSDK.Client.ApiResponse<List<LDAPServer>> GetAllLDAPServersWithHttpInfo(string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<LDAPServer>>("/api/2/ldap-servers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllLDAPServers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;LDAPServer&gt;</returns>
        public async System.Threading.Tasks.Task<List<LDAPServer>> GetAllLDAPServersAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<List<LDAPServer>> localVarResponse = await GetAllLDAPServersWithHttpInfoAsync(ordering, limit, offset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;LDAPServer&gt;)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<List<LDAPServer>>> GetAllLDAPServersWithHttpInfoAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<LDAPServer>>("/api/2/ldap-servers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllLDAPServers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter the returned list by &#x60;address&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>List&lt;NTPServer&gt;</returns>
        public List<NTPServer> GetAllNTPServers(string address = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.ApiResponse<List<NTPServer>> localVarResponse = GetAllNTPServersWithHttpInfo(address, ordering, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter the returned list by &#x60;address&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;NTPServer&gt;</returns>
        public ElementsSDK.Client.ApiResponse<List<NTPServer>> GetAllNTPServersWithHttpInfo(string address = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (address != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "address", address));
            }
            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<NTPServer>>("/api/2/system/time/servers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllNTPServers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter the returned list by &#x60;address&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;NTPServer&gt;</returns>
        public async System.Threading.Tasks.Task<List<NTPServer>> GetAllNTPServersAsync(string address = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<List<NTPServer>> localVarResponse = await GetAllNTPServersWithHttpInfoAsync(address, ordering, limit, offset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter the returned list by &#x60;address&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;NTPServer&gt;)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<List<NTPServer>>> GetAllNTPServersWithHttpInfoAsync(string address = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (address != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "address", address));
            }
            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<NTPServer>>("/api/2/system/time/servers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllNTPServers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Filter the returned list by &#x60;type&#x60;. (optional)</param>
        /// <param name="backend">Filter the returned list by &#x60;backend&#x60;. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="address">Filter the returned list by &#x60;address&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="includeStatus"> (optional)</param>
        /// <returns>List&lt;StorageNode&gt;</returns>
        public List<StorageNode> GetAllStorageNodes(string type = default(string), string backend = default(string), string name = default(string), string address = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), bool? includeStatus = default(bool?))
        {
            ElementsSDK.Client.ApiResponse<List<StorageNode>> localVarResponse = GetAllStorageNodesWithHttpInfo(type, backend, name, address, ordering, limit, offset, includeStatus);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Filter the returned list by &#x60;type&#x60;. (optional)</param>
        /// <param name="backend">Filter the returned list by &#x60;backend&#x60;. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="address">Filter the returned list by &#x60;address&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="includeStatus"> (optional)</param>
        /// <returns>ApiResponse of List&lt;StorageNode&gt;</returns>
        public ElementsSDK.Client.ApiResponse<List<StorageNode>> GetAllStorageNodesWithHttpInfo(string type = default(string), string backend = default(string), string name = default(string), string address = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), bool? includeStatus = default(bool?))
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (backend != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "backend", backend));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (address != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "address", address));
            }
            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (includeStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "include_status", includeStatus));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<StorageNode>>("/api/2/nodes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllStorageNodes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Filter the returned list by &#x60;type&#x60;. (optional)</param>
        /// <param name="backend">Filter the returned list by &#x60;backend&#x60;. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="address">Filter the returned list by &#x60;address&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="includeStatus"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;StorageNode&gt;</returns>
        public async System.Threading.Tasks.Task<List<StorageNode>> GetAllStorageNodesAsync(string type = default(string), string backend = default(string), string name = default(string), string address = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), bool? includeStatus = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<List<StorageNode>> localVarResponse = await GetAllStorageNodesWithHttpInfoAsync(type, backend, name, address, ordering, limit, offset, includeStatus, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Filter the returned list by &#x60;type&#x60;. (optional)</param>
        /// <param name="backend">Filter the returned list by &#x60;backend&#x60;. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="address">Filter the returned list by &#x60;address&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="includeStatus"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;StorageNode&gt;)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<List<StorageNode>>> GetAllStorageNodesWithHttpInfoAsync(string type = default(string), string backend = default(string), string name = default(string), string address = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), bool? includeStatus = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (backend != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "backend", backend));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (address != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "address", address));
            }
            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (includeStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "include_status", includeStatus));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<StorageNode>>("/api/2/nodes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllStorageNodes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Filter the returned list by &#x60;username&#x60;. (optional)</param>
        /// <param name="home">Filter the returned list by &#x60;home&#x60;. (optional)</param>
        /// <param name="fullName">Filter the returned list by &#x60;full_name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="includeAllowedFsPaths"> (optional)</param>
        /// <returns>List&lt;ElementsUser&gt;</returns>
        public List<ElementsUser> GetAllUsers(string username = default(string), string home = default(string), string fullName = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), bool? includeAllowedFsPaths = default(bool?))
        {
            ElementsSDK.Client.ApiResponse<List<ElementsUser>> localVarResponse = GetAllUsersWithHttpInfo(username, home, fullName, ordering, limit, offset, includeAllowedFsPaths);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Filter the returned list by &#x60;username&#x60;. (optional)</param>
        /// <param name="home">Filter the returned list by &#x60;home&#x60;. (optional)</param>
        /// <param name="fullName">Filter the returned list by &#x60;full_name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="includeAllowedFsPaths"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ElementsUser&gt;</returns>
        public ElementsSDK.Client.ApiResponse<List<ElementsUser>> GetAllUsersWithHttpInfo(string username = default(string), string home = default(string), string fullName = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), bool? includeAllowedFsPaths = default(bool?))
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (username != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "username", username));
            }
            if (home != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "home", home));
            }
            if (fullName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "full_name", fullName));
            }
            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (includeAllowedFsPaths != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "include_allowed_fs_paths", includeAllowedFsPaths));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ElementsUser>>("/api/2/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Filter the returned list by &#x60;username&#x60;. (optional)</param>
        /// <param name="home">Filter the returned list by &#x60;home&#x60;. (optional)</param>
        /// <param name="fullName">Filter the returned list by &#x60;full_name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="includeAllowedFsPaths"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ElementsUser&gt;</returns>
        public async System.Threading.Tasks.Task<List<ElementsUser>> GetAllUsersAsync(string username = default(string), string home = default(string), string fullName = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), bool? includeAllowedFsPaths = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<List<ElementsUser>> localVarResponse = await GetAllUsersWithHttpInfoAsync(username, home, fullName, ordering, limit, offset, includeAllowedFsPaths, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Filter the returned list by &#x60;username&#x60;. (optional)</param>
        /// <param name="home">Filter the returned list by &#x60;home&#x60;. (optional)</param>
        /// <param name="fullName">Filter the returned list by &#x60;full_name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="includeAllowedFsPaths"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ElementsUser&gt;)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<List<ElementsUser>>> GetAllUsersWithHttpInfoAsync(string username = default(string), string home = default(string), string fullName = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), bool? includeAllowedFsPaths = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (username != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "username", username));
            }
            if (home != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "home", home));
            }
            if (fullName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "full_name", fullName));
            }
            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (includeAllowedFsPaths != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "include_allowed_fs_paths", includeAllowedFsPaths));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ElementsUser>>("/api/2/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user   * Own workstation or User account permission: &#x60;workstations:view&#x60; (read) / &#x60;workstations:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostname">Filter the returned list by &#x60;hostname&#x60;. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>List&lt;Workstation&gt;</returns>
        public List<Workstation> GetAllWorkstations(string hostname = default(string), string name = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.ApiResponse<List<Workstation>> localVarResponse = GetAllWorkstationsWithHttpInfo(hostname, name, ordering, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user   * Own workstation or User account permission: &#x60;workstations:view&#x60; (read) / &#x60;workstations:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostname">Filter the returned list by &#x60;hostname&#x60;. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;Workstation&gt;</returns>
        public ElementsSDK.Client.ApiResponse<List<Workstation>> GetAllWorkstationsWithHttpInfo(string hostname = default(string), string name = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (hostname != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "hostname", hostname));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Workstation>>("/api/2/workstations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllWorkstations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user   * Own workstation or User account permission: &#x60;workstations:view&#x60; (read) / &#x60;workstations:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostname">Filter the returned list by &#x60;hostname&#x60;. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Workstation&gt;</returns>
        public async System.Threading.Tasks.Task<List<Workstation>> GetAllWorkstationsAsync(string hostname = default(string), string name = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<List<Workstation>> localVarResponse = await GetAllWorkstationsWithHttpInfoAsync(hostname, name, ordering, limit, offset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user   * Own workstation or User account permission: &#x60;workstations:view&#x60; (read) / &#x60;workstations:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostname">Filter the returned list by &#x60;hostname&#x60;. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Workstation&gt;)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<List<Workstation>>> GetAllWorkstationsWithHttpInfoAsync(string hostname = default(string), string name = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (hostname != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "hostname", hostname));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Workstation>>("/api/2/workstations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllWorkstations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Certificate</returns>
        public Certificate GetCertificateConfiguration()
        {
            ElementsSDK.Client.ApiResponse<Certificate> localVarResponse = GetCertificateConfigurationWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Certificate</returns>
        public ElementsSDK.Client.ApiResponse<Certificate> GetCertificateConfigurationWithHttpInfo()
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Certificate>("/api/2/system/certificate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCertificateConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Certificate</returns>
        public async System.Threading.Tasks.Task<Certificate> GetCertificateConfigurationAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<Certificate> localVarResponse = await GetCertificateConfigurationWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Certificate)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Certificate>> GetCertificateConfigurationWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Certificate>("/api/2/system/certificate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCertificateConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <returns></returns>
        public void GetClientDownloadFile(string file)
        {
            GetClientDownloadFileWithHttpInfo(file);
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> GetClientDownloadFileWithHttpInfo(string file)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'file' when calling MainApi->GetClientDownloadFile");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("file", ElementsSDK.Client.ClientUtils.ParameterToString(file)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/2/downloads/clients/{file}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClientDownloadFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetClientDownloadFileAsync(string file, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetClientDownloadFileWithHttpInfoAsync(file, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> GetClientDownloadFileWithHttpInfoAsync(string file, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'file' when calling MainApi->GetClientDownloadFile");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("file", ElementsSDK.Client.ClientUtils.ParameterToString(file)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/2/downloads/clients/{file}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClientDownloadFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ClientsEndpointResponse&gt;</returns>
        public List<ClientsEndpointResponse> GetClientDownloads()
        {
            ElementsSDK.Client.ApiResponse<List<ClientsEndpointResponse>> localVarResponse = GetClientDownloadsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ClientsEndpointResponse&gt;</returns>
        public ElementsSDK.Client.ApiResponse<List<ClientsEndpointResponse>> GetClientDownloadsWithHttpInfo()
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ClientsEndpointResponse>>("/api/2/downloads/clients", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClientDownloads", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ClientsEndpointResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<ClientsEndpointResponse>> GetClientDownloadsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<List<ClientsEndpointResponse>> localVarResponse = await GetClientDownloadsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ClientsEndpointResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<List<ClientsEndpointResponse>>> GetClientDownloadsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ClientsEndpointResponse>>("/api/2/downloads/clients", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClientDownloads", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:status:view&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this client session.</param>
        /// <returns>ClientSession</returns>
        public ClientSession GetClientSession(int id)
        {
            ElementsSDK.Client.ApiResponse<ClientSession> localVarResponse = GetClientSessionWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:status:view&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this client session.</param>
        /// <returns>ApiResponse of ClientSession</returns>
        public ElementsSDK.Client.ApiResponse<ClientSession> GetClientSessionWithHttpInfo(int id)
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ClientSession>("/api/2/client-sessions/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClientSession", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:status:view&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this client session.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientSession</returns>
        public async System.Threading.Tasks.Task<ClientSession> GetClientSessionAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<ClientSession> localVarResponse = await GetClientSessionWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:status:view&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this client session.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientSession)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<ClientSession>> GetClientSessionWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ClientSession>("/api/2/client-sessions/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClientSession", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>Workstation</returns>
        public Workstation GetCurrentWorkstation(string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.ApiResponse<Workstation> localVarResponse = GetCurrentWorkstationWithHttpInfo(ordering, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of Workstation</returns>
        public ElementsSDK.Client.ApiResponse<Workstation> GetCurrentWorkstationWithHttpInfo(string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Workstation>("/api/2/workstations/current", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCurrentWorkstation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Workstation</returns>
        public async System.Threading.Tasks.Task<Workstation> GetCurrentWorkstationAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<Workstation> localVarResponse = await GetCurrentWorkstationWithHttpInfoAsync(ordering, limit, offset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Workstation)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Workstation>> GetCurrentWorkstationWithHttpInfoAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Workstation>("/api/2/workstations/current", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCurrentWorkstation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;downloads:view&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this download.</param>
        /// <returns>Download</returns>
        public Download GetDownload(int id)
        {
            ElementsSDK.Client.ApiResponse<Download> localVarResponse = GetDownloadWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;downloads:view&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this download.</param>
        /// <returns>ApiResponse of Download</returns>
        public ElementsSDK.Client.ApiResponse<Download> GetDownloadWithHttpInfo(int id)
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Download>("/api/2/downloads/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDownload", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;downloads:view&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this download.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Download</returns>
        public async System.Threading.Tasks.Task<Download> GetDownloadAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<Download> localVarResponse = await GetDownloadWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;downloads:view&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this download.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Download)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Download>> GetDownloadWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Download>("/api/2/downloads/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDownload", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this download archive.</param>
        /// <returns>DownloadArchive</returns>
        public DownloadArchive GetDownloadArchive(Guid id)
        {
            ElementsSDK.Client.ApiResponse<DownloadArchive> localVarResponse = GetDownloadArchiveWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this download archive.</param>
        /// <returns>ApiResponse of DownloadArchive</returns>
        public ElementsSDK.Client.ApiResponse<DownloadArchive> GetDownloadArchiveWithHttpInfo(Guid id)
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DownloadArchive>("/api/2/download-archive/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDownloadArchive", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this download archive.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DownloadArchive</returns>
        public async System.Threading.Tasks.Task<DownloadArchive> GetDownloadArchiveAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<DownloadArchive> localVarResponse = await GetDownloadArchiveWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this download archive.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DownloadArchive)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<DownloadArchive>> GetDownloadArchiveWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DownloadArchive>("/api/2/download-archive/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDownloadArchive", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this download archive.</param>
        /// <returns></returns>
        public void GetDownloadArchiveFile(Guid id)
        {
            GetDownloadArchiveFileWithHttpInfo(id);
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this download archive.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> GetDownloadArchiveFileWithHttpInfo(Guid id)
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/2/download-archive/{id}/download", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDownloadArchiveFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this download archive.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetDownloadArchiveFileAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetDownloadArchiveFileWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this download archive.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> GetDownloadArchiveFileWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/2/download-archive/{id}/download", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDownloadArchiveFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;downloads:view&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this download.</param>
        /// <returns></returns>
        public void GetDownloadFile(int id)
        {
            GetDownloadFileWithHttpInfo(id);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;downloads:view&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this download.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> GetDownloadFileWithHttpInfo(int id)
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/2/downloads/{id}/download", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDownloadFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;downloads:view&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this download.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetDownloadFileAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetDownloadFileWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;downloads:view&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this download.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> GetDownloadFileWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/2/downloads/{id}/download", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDownloadFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;downloads:view&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this download.</param>
        /// <returns></returns>
        public void GetDownloadIcon(int id)
        {
            GetDownloadIconWithHttpInfo(id);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;downloads:view&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this download.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> GetDownloadIconWithHttpInfo(int id)
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/2/downloads/{id}/icon", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDownloadIcon", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;downloads:view&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this download.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetDownloadIconAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetDownloadIconWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;downloads:view&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this download.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> GetDownloadIconWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/2/downloads/{id}/icon", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDownloadIcon", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:view&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Group.</param>
        /// <returns>ElementsGroupDetail</returns>
        public ElementsGroupDetail GetGroup(int id)
        {
            ElementsSDK.Client.ApiResponse<ElementsGroupDetail> localVarResponse = GetGroupWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:view&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Group.</param>
        /// <returns>ApiResponse of ElementsGroupDetail</returns>
        public ElementsSDK.Client.ApiResponse<ElementsGroupDetail> GetGroupWithHttpInfo(int id)
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ElementsGroupDetail>("/api/2/groups/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:view&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ElementsGroupDetail</returns>
        public async System.Threading.Tasks.Task<ElementsGroupDetail> GetGroupAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<ElementsGroupDetail> localVarResponse = await GetGroupWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:view&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ElementsGroupDetail)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<ElementsGroupDetail>> GetGroupWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ElementsGroupDetail>("/api/2/groups/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <returns>Workspace</returns>
        public Workspace GetHomeWorkspace(int id)
        {
            ElementsSDK.Client.ApiResponse<Workspace> localVarResponse = GetHomeWorkspaceWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <returns>ApiResponse of Workspace</returns>
        public ElementsSDK.Client.ApiResponse<Workspace> GetHomeWorkspaceWithHttpInfo(int id)
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Workspace>("/api/2/users/{id}/home", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHomeWorkspace", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Workspace</returns>
        public async System.Threading.Tasks.Task<Workspace> GetHomeWorkspaceAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<Workspace> localVarResponse = await GetHomeWorkspaceWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Workspace)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Workspace>> GetHomeWorkspaceWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Workspace>("/api/2/users/{id}/home", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHomeWorkspace", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <returns>Ipmi</returns>
        public Ipmi GetIPMIConfiguration(int id)
        {
            ElementsSDK.Client.ApiResponse<Ipmi> localVarResponse = GetIPMIConfigurationWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <returns>ApiResponse of Ipmi</returns>
        public ElementsSDK.Client.ApiResponse<Ipmi> GetIPMIConfigurationWithHttpInfo(int id)
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Ipmi>("/api/2/nodes/{id}/ipmi", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIPMIConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Ipmi</returns>
        public async System.Threading.Tasks.Task<Ipmi> GetIPMIConfigurationAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<Ipmi> localVarResponse = await GetIPMIConfigurationWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Ipmi)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Ipmi>> GetIPMIConfigurationWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Ipmi>("/api/2/nodes/{id}/ipmi", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIPMIConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this LDAP Server.</param>
        /// <returns>LDAPServer</returns>
        public LDAPServer GetLDAPServer(int id)
        {
            ElementsSDK.Client.ApiResponse<LDAPServer> localVarResponse = GetLDAPServerWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this LDAP Server.</param>
        /// <returns>ApiResponse of LDAPServer</returns>
        public ElementsSDK.Client.ApiResponse<LDAPServer> GetLDAPServerWithHttpInfo(int id)
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LDAPServer>("/api/2/ldap-servers/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLDAPServer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this LDAP Server.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LDAPServer</returns>
        public async System.Threading.Tasks.Task<LDAPServer> GetLDAPServerAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<LDAPServer> localVarResponse = await GetLDAPServerWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this LDAP Server.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LDAPServer)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<LDAPServer>> GetLDAPServerWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<LDAPServer>("/api/2/ldap-servers/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLDAPServer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this LDAP Server.</param>
        /// <returns>LDAPServerGroups</returns>
        public LDAPServerGroups GetLDAPServerGroups(int id)
        {
            ElementsSDK.Client.ApiResponse<LDAPServerGroups> localVarResponse = GetLDAPServerGroupsWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this LDAP Server.</param>
        /// <returns>ApiResponse of LDAPServerGroups</returns>
        public ElementsSDK.Client.ApiResponse<LDAPServerGroups> GetLDAPServerGroupsWithHttpInfo(int id)
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LDAPServerGroups>("/api/2/ldap-servers/{id}/groups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLDAPServerGroups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this LDAP Server.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LDAPServerGroups</returns>
        public async System.Threading.Tasks.Task<LDAPServerGroups> GetLDAPServerGroupsAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<LDAPServerGroups> localVarResponse = await GetLDAPServerGroupsWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this LDAP Server.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LDAPServerGroups)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<LDAPServerGroups>> GetLDAPServerGroupsWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<LDAPServerGroups>("/api/2/ldap-servers/{id}/groups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLDAPServerGroups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this LDAP Server.</param>
        /// <returns>LDAPServerUsers</returns>
        public LDAPServerUsers GetLDAPServerUsers(int id)
        {
            ElementsSDK.Client.ApiResponse<LDAPServerUsers> localVarResponse = GetLDAPServerUsersWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this LDAP Server.</param>
        /// <returns>ApiResponse of LDAPServerUsers</returns>
        public ElementsSDK.Client.ApiResponse<LDAPServerUsers> GetLDAPServerUsersWithHttpInfo(int id)
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LDAPServerUsers>("/api/2/ldap-servers/{id}/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLDAPServerUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this LDAP Server.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LDAPServerUsers</returns>
        public async System.Threading.Tasks.Task<LDAPServerUsers> GetLDAPServerUsersAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<LDAPServerUsers> localVarResponse = await GetLDAPServerUsersWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this LDAP Server.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LDAPServerUsers)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<LDAPServerUsers>> GetLDAPServerUsersWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<LDAPServerUsers>("/api/2/ldap-servers/{id}/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLDAPServerUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>License</returns>
        public License GetLicense()
        {
            ElementsSDK.Client.ApiResponse<License> localVarResponse = GetLicenseWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of License</returns>
        public ElementsSDK.Client.ApiResponse<License> GetLicenseWithHttpInfo()
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<License>("/api/2/license", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLicense", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of License</returns>
        public async System.Threading.Tasks.Task<License> GetLicenseAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<License> localVarResponse = await GetLicenseWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (License)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<License>> GetLicenseWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<License>("/api/2/license", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLicense", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TimeEndpointResponse</returns>
        public TimeEndpointResponse GetLocalTime()
        {
            ElementsSDK.Client.ApiResponse<TimeEndpointResponse> localVarResponse = GetLocalTimeWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TimeEndpointResponse</returns>
        public ElementsSDK.Client.ApiResponse<TimeEndpointResponse> GetLocalTimeWithHttpInfo()
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TimeEndpointResponse>("/api/2/system/time", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLocalTime", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimeEndpointResponse</returns>
        public async System.Threading.Tasks.Task<TimeEndpointResponse> GetLocalTimeAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<TimeEndpointResponse> localVarResponse = await GetLocalTimeWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimeEndpointResponse)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<TimeEndpointResponse>> GetLocalTimeWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TimeEndpointResponse>("/api/2/system/time", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLocalTime", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="offset"> (optional)</param>
        /// <returns></returns>
        public void GetLog(string path, int? offset = default(int?))
        {
            GetLogWithHttpInfo(path, offset);
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="offset"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> GetLogWithHttpInfo(string path, int? offset = default(int?))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'path' when calling MainApi->GetLog");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("path", ElementsSDK.Client.ClientUtils.ParameterToString(path)); // path parameter
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/2/system/log/{path}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLog", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="offset"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetLogAsync(string path, int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetLogWithHttpInfoAsync(path, offset, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="offset"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> GetLogWithHttpInfoAsync(string path, int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'path' when calling MainApi->GetLog");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("path", ElementsSDK.Client.ClientUtils.ParameterToString(path)); // path parameter
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/2/system/log/{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLog", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this NTP Server.</param>
        /// <returns>NTPServer</returns>
        public NTPServer GetNTPServer(int id)
        {
            ElementsSDK.Client.ApiResponse<NTPServer> localVarResponse = GetNTPServerWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this NTP Server.</param>
        /// <returns>ApiResponse of NTPServer</returns>
        public ElementsSDK.Client.ApiResponse<NTPServer> GetNTPServerWithHttpInfo(int id)
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NTPServer>("/api/2/system/time/servers/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNTPServer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this NTP Server.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NTPServer</returns>
        public async System.Threading.Tasks.Task<NTPServer> GetNTPServerAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<NTPServer> localVarResponse = await GetNTPServerWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this NTP Server.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NTPServer)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<NTPServer>> GetNTPServerWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NTPServer>("/api/2/system/time/servers/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNTPServer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:status:view&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <returns>Sensors</returns>
        public Sensors GetNodeIPMISensors(int id)
        {
            ElementsSDK.Client.ApiResponse<Sensors> localVarResponse = GetNodeIPMISensorsWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:status:view&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <returns>ApiResponse of Sensors</returns>
        public ElementsSDK.Client.ApiResponse<Sensors> GetNodeIPMISensorsWithHttpInfo(int id)
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Sensors>("/api/2/nodes/{id}/sensors", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNodeIPMISensors", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:status:view&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Sensors</returns>
        public async System.Threading.Tasks.Task<Sensors> GetNodeIPMISensorsAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<Sensors> localVarResponse = await GetNodeIPMISensorsWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:status:view&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Sensors)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Sensors>> GetNodeIPMISensorsWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Sensors>("/api/2/nodes/{id}/sensors", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNodeIPMISensors", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:status:view&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <returns>Stats</returns>
        public Stats GetNodeStats(int id)
        {
            ElementsSDK.Client.ApiResponse<Stats> localVarResponse = GetNodeStatsWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:status:view&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <returns>ApiResponse of Stats</returns>
        public ElementsSDK.Client.ApiResponse<Stats> GetNodeStatsWithHttpInfo(int id)
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Stats>("/api/2/nodes/{id}/stats", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNodeStats", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:status:view&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Stats</returns>
        public async System.Threading.Tasks.Task<Stats> GetNodeStatsAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<Stats> localVarResponse = await GetNodeStatsWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:status:view&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Stats)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Stats>> GetNodeStatsWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Stats>("/api/2/nodes/{id}/stats", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNodeStats", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>Parameters</returns>
        public Parameters GetParameters(string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.ApiResponse<Parameters> localVarResponse = GetParametersWithHttpInfo(ordering, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of Parameters</returns>
        public ElementsSDK.Client.ApiResponse<Parameters> GetParametersWithHttpInfo(string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Parameters>("/api/2/parameters", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetParameters", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Parameters</returns>
        public async System.Threading.Tasks.Task<Parameters> GetParametersAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<Parameters> localVarResponse = await GetParametersWithHttpInfoAsync(ordering, limit, offset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Parameters)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Parameters>> GetParametersWithHttpInfoAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Parameters>("/api/2/parameters", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetParameters", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ElementsUserProfile</returns>
        public ElementsUserProfile GetProfile(string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.ApiResponse<ElementsUserProfile> localVarResponse = GetProfileWithHttpInfo(ordering, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of ElementsUserProfile</returns>
        public ElementsSDK.Client.ApiResponse<ElementsUserProfile> GetProfileWithHttpInfo(string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ElementsUserProfile>("/api/2/users/me", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProfile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ElementsUserProfile</returns>
        public async System.Threading.Tasks.Task<ElementsUserProfile> GetProfileAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<ElementsUserProfile> localVarResponse = await GetProfileWithHttpInfoAsync(ordering, limit, offset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ElementsUserProfile)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<ElementsUserProfile>> GetProfileWithHttpInfoAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ElementsUserProfile>("/api/2/users/me", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProfile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ReleaseNotesEndpointResponse&gt;</returns>
        public List<ReleaseNotesEndpointResponse> GetReleaseNotes()
        {
            ElementsSDK.Client.ApiResponse<List<ReleaseNotesEndpointResponse>> localVarResponse = GetReleaseNotesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ReleaseNotesEndpointResponse&gt;</returns>
        public ElementsSDK.Client.ApiResponse<List<ReleaseNotesEndpointResponse>> GetReleaseNotesWithHttpInfo()
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ReleaseNotesEndpointResponse>>("/api/2/release-notes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReleaseNotes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ReleaseNotesEndpointResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<ReleaseNotesEndpointResponse>> GetReleaseNotesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<List<ReleaseNotesEndpointResponse>> localVarResponse = await GetReleaseNotesWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ReleaseNotesEndpointResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<List<ReleaseNotesEndpointResponse>>> GetReleaseNotesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ReleaseNotesEndpointResponse>>("/api/2/release-notes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReleaseNotes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SMTPConfiguration</returns>
        public SMTPConfiguration GetSMTPConfiguration()
        {
            ElementsSDK.Client.ApiResponse<SMTPConfiguration> localVarResponse = GetSMTPConfigurationWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SMTPConfiguration</returns>
        public ElementsSDK.Client.ApiResponse<SMTPConfiguration> GetSMTPConfigurationWithHttpInfo()
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SMTPConfiguration>("/api/2/system/smtp", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSMTPConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SMTPConfiguration</returns>
        public async System.Threading.Tasks.Task<SMTPConfiguration> GetSMTPConfigurationAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<SMTPConfiguration> localVarResponse = await GetSMTPConfigurationWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SMTPConfiguration)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<SMTPConfiguration>> GetSMTPConfigurationWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SMTPConfiguration>("/api/2/system/smtp", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSMTPConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <param name="service"></param>
        /// <returns>ServiceStatus</returns>
        public ServiceStatus GetServiceStatus(int id, string service)
        {
            ElementsSDK.Client.ApiResponse<ServiceStatus> localVarResponse = GetServiceStatusWithHttpInfo(id, service);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <param name="service"></param>
        /// <returns>ApiResponse of ServiceStatus</returns>
        public ElementsSDK.Client.ApiResponse<ServiceStatus> GetServiceStatusWithHttpInfo(int id, string service)
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'service' when calling MainApi->GetServiceStatus");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("service", ElementsSDK.Client.ClientUtils.ParameterToString(service)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceStatus>("/api/2/nodes/{id}/services/{service}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServiceStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <param name="service"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceStatus</returns>
        public async System.Threading.Tasks.Task<ServiceStatus> GetServiceStatusAsync(int id, string service, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<ServiceStatus> localVarResponse = await GetServiceStatusWithHttpInfoAsync(id, service, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <param name="service"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceStatus)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<ServiceStatus>> GetServiceStatusWithHttpInfoAsync(int id, string service, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'service' when calling MainApi->GetServiceStatus");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("service", ElementsSDK.Client.ClientUtils.ParameterToString(service)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceStatus>("/api/2/nodes/{id}/services/{service}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServiceStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60;   * License component: stornext_mdc 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>StorNextLicenseEndpointResponse</returns>
        public StorNextLicenseEndpointResponse GetStorNextLicense()
        {
            ElementsSDK.Client.ApiResponse<StorNextLicenseEndpointResponse> localVarResponse = GetStorNextLicenseWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60;   * License component: stornext_mdc 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of StorNextLicenseEndpointResponse</returns>
        public ElementsSDK.Client.ApiResponse<StorNextLicenseEndpointResponse> GetStorNextLicenseWithHttpInfo()
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<StorNextLicenseEndpointResponse>("/api/2/stornext-license", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStorNextLicense", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60;   * License component: stornext_mdc 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorNextLicenseEndpointResponse</returns>
        public async System.Threading.Tasks.Task<StorNextLicenseEndpointResponse> GetStorNextLicenseAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<StorNextLicenseEndpointResponse> localVarResponse = await GetStorNextLicenseWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60;   * License component: stornext_mdc 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorNextLicenseEndpointResponse)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<StorNextLicenseEndpointResponse>> GetStorNextLicenseWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<StorNextLicenseEndpointResponse>("/api/2/stornext-license", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStorNextLicense", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <param name="includeStatus"> (optional)</param>
        /// <returns>StorageNode</returns>
        public StorageNode GetStorageNode(int id, bool? includeStatus = default(bool?))
        {
            ElementsSDK.Client.ApiResponse<StorageNode> localVarResponse = GetStorageNodeWithHttpInfo(id, includeStatus);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <param name="includeStatus"> (optional)</param>
        /// <returns>ApiResponse of StorageNode</returns>
        public ElementsSDK.Client.ApiResponse<StorageNode> GetStorageNodeWithHttpInfo(int id, bool? includeStatus = default(bool?))
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (includeStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "include_status", includeStatus));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<StorageNode>("/api/2/nodes/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStorageNode", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <param name="includeStatus"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageNode</returns>
        public async System.Threading.Tasks.Task<StorageNode> GetStorageNodeAsync(int id, bool? includeStatus = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<StorageNode> localVarResponse = await GetStorageNodeWithHttpInfoAsync(id, includeStatus, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <param name="includeStatus"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageNode)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<StorageNode>> GetStorageNodeWithHttpInfoAsync(int id, bool? includeStatus = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (includeStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "include_status", includeStatus));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<StorageNode>("/api/2/nodes/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStorageNode", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SystemInfoEndpointResponse</returns>
        public SystemInfoEndpointResponse GetSystemInfo()
        {
            ElementsSDK.Client.ApiResponse<SystemInfoEndpointResponse> localVarResponse = GetSystemInfoWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SystemInfoEndpointResponse</returns>
        public ElementsSDK.Client.ApiResponse<SystemInfoEndpointResponse> GetSystemInfoWithHttpInfo()
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SystemInfoEndpointResponse>("/api/2/system/info", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystemInfo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SystemInfoEndpointResponse</returns>
        public async System.Threading.Tasks.Task<SystemInfoEndpointResponse> GetSystemInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<SystemInfoEndpointResponse> localVarResponse = await GetSystemInfoWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SystemInfoEndpointResponse)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<SystemInfoEndpointResponse>> GetSystemInfoWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SystemInfoEndpointResponse>("/api/2/system/info", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystemInfo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <returns>ElementsUserDetail</returns>
        public ElementsUserDetail GetUser(int id)
        {
            ElementsSDK.Client.ApiResponse<ElementsUserDetail> localVarResponse = GetUserWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <returns>ApiResponse of ElementsUserDetail</returns>
        public ElementsSDK.Client.ApiResponse<ElementsUserDetail> GetUserWithHttpInfo(int id)
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ElementsUserDetail>("/api/2/users/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ElementsUserDetail</returns>
        public async System.Threading.Tasks.Task<ElementsUserDetail> GetUserAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<ElementsUserDetail> localVarResponse = await GetUserWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ElementsUserDetail)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<ElementsUserDetail>> GetUserWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ElementsUserDetail>("/api/2/users/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user   * Own workstation or User account permission: &#x60;workstations:view&#x60; (read) / &#x60;workstations:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this workstation.</param>
        /// <returns>Workstation</returns>
        public Workstation GetWorkstation(string id)
        {
            ElementsSDK.Client.ApiResponse<Workstation> localVarResponse = GetWorkstationWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user   * Own workstation or User account permission: &#x60;workstations:view&#x60; (read) / &#x60;workstations:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this workstation.</param>
        /// <returns>ApiResponse of Workstation</returns>
        public ElementsSDK.Client.ApiResponse<Workstation> GetWorkstationWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'id' when calling MainApi->GetWorkstation");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Workstation>("/api/2/workstations/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkstation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user   * Own workstation or User account permission: &#x60;workstations:view&#x60; (read) / &#x60;workstations:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this workstation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Workstation</returns>
        public async System.Threading.Tasks.Task<Workstation> GetWorkstationAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<Workstation> localVarResponse = await GetWorkstationWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user   * Own workstation or User account permission: &#x60;workstations:view&#x60; (read) / &#x60;workstations:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this workstation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Workstation)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Workstation>> GetWorkstationWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'id' when calling MainApi->GetWorkstation");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Workstation>("/api/2/workstations/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWorkstation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60;   * License component: stornext_mdc 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stornextLicense"></param>
        /// <returns>StorNextLicenseEndpointResponse</returns>
        public StorNextLicenseEndpointResponse InstallStorNextLicense(StornextLicense stornextLicense)
        {
            ElementsSDK.Client.ApiResponse<StorNextLicenseEndpointResponse> localVarResponse = InstallStorNextLicenseWithHttpInfo(stornextLicense);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60;   * License component: stornext_mdc 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stornextLicense"></param>
        /// <returns>ApiResponse of StorNextLicenseEndpointResponse</returns>
        public ElementsSDK.Client.ApiResponse<StorNextLicenseEndpointResponse> InstallStorNextLicenseWithHttpInfo(StornextLicense stornextLicense)
        {
            // verify the required parameter 'stornextLicense' is set
            if (stornextLicense == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'stornextLicense' when calling MainApi->InstallStorNextLicense");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = stornextLicense;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<StorNextLicenseEndpointResponse>("/api/2/stornext-license", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InstallStorNextLicense", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60;   * License component: stornext_mdc 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stornextLicense"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorNextLicenseEndpointResponse</returns>
        public async System.Threading.Tasks.Task<StorNextLicenseEndpointResponse> InstallStorNextLicenseAsync(StornextLicense stornextLicense, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<StorNextLicenseEndpointResponse> localVarResponse = await InstallStorNextLicenseWithHttpInfoAsync(stornextLicense, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60;   * License component: stornext_mdc 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stornextLicense"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorNextLicenseEndpointResponse)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<StorNextLicenseEndpointResponse>> InstallStorNextLicenseWithHttpInfoAsync(StornextLicense stornextLicense, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'stornextLicense' is set
            if (stornextLicense == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'stornextLicense' when calling MainApi->InstallStorNextLicense");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = stornextLicense;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<StorNextLicenseEndpointResponse>("/api/2/stornext-license", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InstallStorNextLicense", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workstationPartialUpdate"></param>
        /// <returns>Workstation</returns>
        public Workstation PatchCurrentWorkstation(WorkstationPartialUpdate workstationPartialUpdate)
        {
            ElementsSDK.Client.ApiResponse<Workstation> localVarResponse = PatchCurrentWorkstationWithHttpInfo(workstationPartialUpdate);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workstationPartialUpdate"></param>
        /// <returns>ApiResponse of Workstation</returns>
        public ElementsSDK.Client.ApiResponse<Workstation> PatchCurrentWorkstationWithHttpInfo(WorkstationPartialUpdate workstationPartialUpdate)
        {
            // verify the required parameter 'workstationPartialUpdate' is set
            if (workstationPartialUpdate == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'workstationPartialUpdate' when calling MainApi->PatchCurrentWorkstation");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = workstationPartialUpdate;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Workstation>("/api/2/workstations/current", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCurrentWorkstation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workstationPartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Workstation</returns>
        public async System.Threading.Tasks.Task<Workstation> PatchCurrentWorkstationAsync(WorkstationPartialUpdate workstationPartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<Workstation> localVarResponse = await PatchCurrentWorkstationWithHttpInfoAsync(workstationPartialUpdate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workstationPartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Workstation)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Workstation>> PatchCurrentWorkstationWithHttpInfoAsync(WorkstationPartialUpdate workstationPartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workstationPartialUpdate' is set
            if (workstationPartialUpdate == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'workstationPartialUpdate' when calling MainApi->PatchCurrentWorkstation");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = workstationPartialUpdate;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Workstation>("/api/2/workstations/current", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCurrentWorkstation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this download archive.</param>
        /// <param name="downloadArchivePartialUpdate"></param>
        /// <returns>DownloadArchive</returns>
        public DownloadArchive PatchDownloadArchive(Guid id, DownloadArchivePartialUpdate downloadArchivePartialUpdate)
        {
            ElementsSDK.Client.ApiResponse<DownloadArchive> localVarResponse = PatchDownloadArchiveWithHttpInfo(id, downloadArchivePartialUpdate);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this download archive.</param>
        /// <param name="downloadArchivePartialUpdate"></param>
        /// <returns>ApiResponse of DownloadArchive</returns>
        public ElementsSDK.Client.ApiResponse<DownloadArchive> PatchDownloadArchiveWithHttpInfo(Guid id, DownloadArchivePartialUpdate downloadArchivePartialUpdate)
        {
            // verify the required parameter 'downloadArchivePartialUpdate' is set
            if (downloadArchivePartialUpdate == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'downloadArchivePartialUpdate' when calling MainApi->PatchDownloadArchive");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = downloadArchivePartialUpdate;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<DownloadArchive>("/api/2/download-archive/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchDownloadArchive", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this download archive.</param>
        /// <param name="downloadArchivePartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DownloadArchive</returns>
        public async System.Threading.Tasks.Task<DownloadArchive> PatchDownloadArchiveAsync(Guid id, DownloadArchivePartialUpdate downloadArchivePartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<DownloadArchive> localVarResponse = await PatchDownloadArchiveWithHttpInfoAsync(id, downloadArchivePartialUpdate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this download archive.</param>
        /// <param name="downloadArchivePartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DownloadArchive)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<DownloadArchive>> PatchDownloadArchiveWithHttpInfoAsync(Guid id, DownloadArchivePartialUpdate downloadArchivePartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'downloadArchivePartialUpdate' is set
            if (downloadArchivePartialUpdate == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'downloadArchivePartialUpdate' when calling MainApi->PatchDownloadArchive");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = downloadArchivePartialUpdate;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<DownloadArchive>("/api/2/download-archive/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchDownloadArchive", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:view&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Group.</param>
        /// <param name="elementsGroupDetailPartialUpdate"></param>
        /// <returns>ElementsGroupDetail</returns>
        public ElementsGroupDetail PatchGroup(int id, ElementsGroupDetailPartialUpdate elementsGroupDetailPartialUpdate)
        {
            ElementsSDK.Client.ApiResponse<ElementsGroupDetail> localVarResponse = PatchGroupWithHttpInfo(id, elementsGroupDetailPartialUpdate);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:view&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Group.</param>
        /// <param name="elementsGroupDetailPartialUpdate"></param>
        /// <returns>ApiResponse of ElementsGroupDetail</returns>
        public ElementsSDK.Client.ApiResponse<ElementsGroupDetail> PatchGroupWithHttpInfo(int id, ElementsGroupDetailPartialUpdate elementsGroupDetailPartialUpdate)
        {
            // verify the required parameter 'elementsGroupDetailPartialUpdate' is set
            if (elementsGroupDetailPartialUpdate == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'elementsGroupDetailPartialUpdate' when calling MainApi->PatchGroup");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = elementsGroupDetailPartialUpdate;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<ElementsGroupDetail>("/api/2/groups/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:view&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Group.</param>
        /// <param name="elementsGroupDetailPartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ElementsGroupDetail</returns>
        public async System.Threading.Tasks.Task<ElementsGroupDetail> PatchGroupAsync(int id, ElementsGroupDetailPartialUpdate elementsGroupDetailPartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<ElementsGroupDetail> localVarResponse = await PatchGroupWithHttpInfoAsync(id, elementsGroupDetailPartialUpdate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:view&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Group.</param>
        /// <param name="elementsGroupDetailPartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ElementsGroupDetail)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<ElementsGroupDetail>> PatchGroupWithHttpInfoAsync(int id, ElementsGroupDetailPartialUpdate elementsGroupDetailPartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'elementsGroupDetailPartialUpdate' is set
            if (elementsGroupDetailPartialUpdate == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'elementsGroupDetailPartialUpdate' when calling MainApi->PatchGroup");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = elementsGroupDetailPartialUpdate;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<ElementsGroupDetail>("/api/2/groups/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this NTP Server.</param>
        /// <param name="nTPServerPartialUpdate"></param>
        /// <returns>NTPServer</returns>
        public NTPServer PatchNTPServer(int id, NTPServerPartialUpdate nTPServerPartialUpdate)
        {
            ElementsSDK.Client.ApiResponse<NTPServer> localVarResponse = PatchNTPServerWithHttpInfo(id, nTPServerPartialUpdate);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this NTP Server.</param>
        /// <param name="nTPServerPartialUpdate"></param>
        /// <returns>ApiResponse of NTPServer</returns>
        public ElementsSDK.Client.ApiResponse<NTPServer> PatchNTPServerWithHttpInfo(int id, NTPServerPartialUpdate nTPServerPartialUpdate)
        {
            // verify the required parameter 'nTPServerPartialUpdate' is set
            if (nTPServerPartialUpdate == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'nTPServerPartialUpdate' when calling MainApi->PatchNTPServer");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = nTPServerPartialUpdate;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<NTPServer>("/api/2/system/time/servers/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchNTPServer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this NTP Server.</param>
        /// <param name="nTPServerPartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NTPServer</returns>
        public async System.Threading.Tasks.Task<NTPServer> PatchNTPServerAsync(int id, NTPServerPartialUpdate nTPServerPartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<NTPServer> localVarResponse = await PatchNTPServerWithHttpInfoAsync(id, nTPServerPartialUpdate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this NTP Server.</param>
        /// <param name="nTPServerPartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NTPServer)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<NTPServer>> PatchNTPServerWithHttpInfoAsync(int id, NTPServerPartialUpdate nTPServerPartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'nTPServerPartialUpdate' is set
            if (nTPServerPartialUpdate == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'nTPServerPartialUpdate' when calling MainApi->PatchNTPServer");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = nTPServerPartialUpdate;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<NTPServer>("/api/2/system/time/servers/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchNTPServer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="elementsUserProfilePartialUpdate"></param>
        /// <returns>ElementsUserProfile</returns>
        public ElementsUserProfile PatchProfile(ElementsUserProfilePartialUpdate elementsUserProfilePartialUpdate)
        {
            ElementsSDK.Client.ApiResponse<ElementsUserProfile> localVarResponse = PatchProfileWithHttpInfo(elementsUserProfilePartialUpdate);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="elementsUserProfilePartialUpdate"></param>
        /// <returns>ApiResponse of ElementsUserProfile</returns>
        public ElementsSDK.Client.ApiResponse<ElementsUserProfile> PatchProfileWithHttpInfo(ElementsUserProfilePartialUpdate elementsUserProfilePartialUpdate)
        {
            // verify the required parameter 'elementsUserProfilePartialUpdate' is set
            if (elementsUserProfilePartialUpdate == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'elementsUserProfilePartialUpdate' when calling MainApi->PatchProfile");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = elementsUserProfilePartialUpdate;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<ElementsUserProfile>("/api/2/users/me", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchProfile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="elementsUserProfilePartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ElementsUserProfile</returns>
        public async System.Threading.Tasks.Task<ElementsUserProfile> PatchProfileAsync(ElementsUserProfilePartialUpdate elementsUserProfilePartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<ElementsUserProfile> localVarResponse = await PatchProfileWithHttpInfoAsync(elementsUserProfilePartialUpdate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="elementsUserProfilePartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ElementsUserProfile)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<ElementsUserProfile>> PatchProfileWithHttpInfoAsync(ElementsUserProfilePartialUpdate elementsUserProfilePartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'elementsUserProfilePartialUpdate' is set
            if (elementsUserProfilePartialUpdate == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'elementsUserProfilePartialUpdate' when calling MainApi->PatchProfile");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = elementsUserProfilePartialUpdate;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<ElementsUserProfile>("/api/2/users/me", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchProfile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="elementsUserDetailPartialUpdate"></param>
        /// <returns>ElementsUserDetail</returns>
        public ElementsUserDetail PatchUser(int id, ElementsUserDetailPartialUpdate elementsUserDetailPartialUpdate)
        {
            ElementsSDK.Client.ApiResponse<ElementsUserDetail> localVarResponse = PatchUserWithHttpInfo(id, elementsUserDetailPartialUpdate);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="elementsUserDetailPartialUpdate"></param>
        /// <returns>ApiResponse of ElementsUserDetail</returns>
        public ElementsSDK.Client.ApiResponse<ElementsUserDetail> PatchUserWithHttpInfo(int id, ElementsUserDetailPartialUpdate elementsUserDetailPartialUpdate)
        {
            // verify the required parameter 'elementsUserDetailPartialUpdate' is set
            if (elementsUserDetailPartialUpdate == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'elementsUserDetailPartialUpdate' when calling MainApi->PatchUser");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = elementsUserDetailPartialUpdate;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<ElementsUserDetail>("/api/2/users/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="elementsUserDetailPartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ElementsUserDetail</returns>
        public async System.Threading.Tasks.Task<ElementsUserDetail> PatchUserAsync(int id, ElementsUserDetailPartialUpdate elementsUserDetailPartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<ElementsUserDetail> localVarResponse = await PatchUserWithHttpInfoAsync(id, elementsUserDetailPartialUpdate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="elementsUserDetailPartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ElementsUserDetail)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<ElementsUserDetail>> PatchUserWithHttpInfoAsync(int id, ElementsUserDetailPartialUpdate elementsUserDetailPartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'elementsUserDetailPartialUpdate' is set
            if (elementsUserDetailPartialUpdate == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'elementsUserDetailPartialUpdate' when calling MainApi->PatchUser");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = elementsUserDetailPartialUpdate;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<ElementsUserDetail>("/api/2/users/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user   * Own workstation or User account permission: &#x60;workstations:view&#x60; (read) / &#x60;workstations:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this workstation.</param>
        /// <param name="workstationPartialUpdate"></param>
        /// <returns>Workstation</returns>
        public Workstation PatchWorkstation(string id, WorkstationPartialUpdate workstationPartialUpdate)
        {
            ElementsSDK.Client.ApiResponse<Workstation> localVarResponse = PatchWorkstationWithHttpInfo(id, workstationPartialUpdate);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user   * Own workstation or User account permission: &#x60;workstations:view&#x60; (read) / &#x60;workstations:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this workstation.</param>
        /// <param name="workstationPartialUpdate"></param>
        /// <returns>ApiResponse of Workstation</returns>
        public ElementsSDK.Client.ApiResponse<Workstation> PatchWorkstationWithHttpInfo(string id, WorkstationPartialUpdate workstationPartialUpdate)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'id' when calling MainApi->PatchWorkstation");

            // verify the required parameter 'workstationPartialUpdate' is set
            if (workstationPartialUpdate == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'workstationPartialUpdate' when calling MainApi->PatchWorkstation");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = workstationPartialUpdate;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Workstation>("/api/2/workstations/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchWorkstation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user   * Own workstation or User account permission: &#x60;workstations:view&#x60; (read) / &#x60;workstations:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this workstation.</param>
        /// <param name="workstationPartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Workstation</returns>
        public async System.Threading.Tasks.Task<Workstation> PatchWorkstationAsync(string id, WorkstationPartialUpdate workstationPartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<Workstation> localVarResponse = await PatchWorkstationWithHttpInfoAsync(id, workstationPartialUpdate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user   * Own workstation or User account permission: &#x60;workstations:view&#x60; (read) / &#x60;workstations:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this workstation.</param>
        /// <param name="workstationPartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Workstation)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Workstation>> PatchWorkstationWithHttpInfoAsync(string id, WorkstationPartialUpdate workstationPartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'id' when calling MainApi->PatchWorkstation");

            // verify the required parameter 'workstationPartialUpdate' is set
            if (workstationPartialUpdate == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'workstationPartialUpdate' when calling MainApi->PatchWorkstation");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = workstationPartialUpdate;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Workstation>("/api/2/workstations/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchWorkstation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userPreviewRequest"></param>
        /// <returns>UserPreviewResponse</returns>
        public UserPreviewResponse PreviewUser(UserPreviewRequest userPreviewRequest)
        {
            ElementsSDK.Client.ApiResponse<UserPreviewResponse> localVarResponse = PreviewUserWithHttpInfo(userPreviewRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userPreviewRequest"></param>
        /// <returns>ApiResponse of UserPreviewResponse</returns>
        public ElementsSDK.Client.ApiResponse<UserPreviewResponse> PreviewUserWithHttpInfo(UserPreviewRequest userPreviewRequest)
        {
            // verify the required parameter 'userPreviewRequest' is set
            if (userPreviewRequest == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'userPreviewRequest' when calling MainApi->PreviewUser");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = userPreviewRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UserPreviewResponse>("/api/2/users/preview", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PreviewUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userPreviewRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserPreviewResponse</returns>
        public async System.Threading.Tasks.Task<UserPreviewResponse> PreviewUserAsync(UserPreviewRequest userPreviewRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<UserPreviewResponse> localVarResponse = await PreviewUserWithHttpInfoAsync(userPreviewRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userPreviewRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserPreviewResponse)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<UserPreviewResponse>> PreviewUserWithHttpInfoAsync(UserPreviewRequest userPreviewRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userPreviewRequest' is set
            if (userPreviewRequest == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'userPreviewRequest' when calling MainApi->PreviewUser");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = userPreviewRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UserPreviewResponse>("/api/2/users/preview", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PreviewUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void Reboot()
        {
            RebootWithHttpInfo();
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> RebootWithHttpInfo()
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/2/system/reboot", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Reboot", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RebootAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RebootWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> RebootWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/2/system/reboot", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Reboot", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerUploadEndpointRequest"></param>
        /// <returns></returns>
        public void RegisterUpload(RegisterUploadEndpointRequest registerUploadEndpointRequest)
        {
            RegisterUploadWithHttpInfo(registerUploadEndpointRequest);
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerUploadEndpointRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> RegisterUploadWithHttpInfo(RegisterUploadEndpointRequest registerUploadEndpointRequest)
        {
            // verify the required parameter 'registerUploadEndpointRequest' is set
            if (registerUploadEndpointRequest == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'registerUploadEndpointRequest' when calling MainApi->RegisterUpload");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = registerUploadEndpointRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/2/uploads/register", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterUpload", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerUploadEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RegisterUploadAsync(RegisterUploadEndpointRequest registerUploadEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RegisterUploadWithHttpInfoAsync(registerUploadEndpointRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerUploadEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> RegisterUploadWithHttpInfoAsync(RegisterUploadEndpointRequest registerUploadEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'registerUploadEndpointRequest' is set
            if (registerUploadEndpointRequest == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'registerUploadEndpointRequest' when calling MainApi->RegisterUpload");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = registerUploadEndpointRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/2/uploads/register", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterUpload", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;media:access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerUploadMetadataEndpointRequest"></param>
        /// <returns></returns>
        public void RegisterUploadMetadata(RegisterUploadMetadataEndpointRequest registerUploadMetadataEndpointRequest)
        {
            RegisterUploadMetadataWithHttpInfo(registerUploadMetadataEndpointRequest);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;media:access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerUploadMetadataEndpointRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> RegisterUploadMetadataWithHttpInfo(RegisterUploadMetadataEndpointRequest registerUploadMetadataEndpointRequest)
        {
            // verify the required parameter 'registerUploadMetadataEndpointRequest' is set
            if (registerUploadMetadataEndpointRequest == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'registerUploadMetadataEndpointRequest' when calling MainApi->RegisterUploadMetadata");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = registerUploadMetadataEndpointRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/2/uploads/metadata", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterUploadMetadata", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;media:access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerUploadMetadataEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RegisterUploadMetadataAsync(RegisterUploadMetadataEndpointRequest registerUploadMetadataEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RegisterUploadMetadataWithHttpInfoAsync(registerUploadMetadataEndpointRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;media:access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerUploadMetadataEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> RegisterUploadMetadataWithHttpInfoAsync(RegisterUploadMetadataEndpointRequest registerUploadMetadataEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'registerUploadMetadataEndpointRequest' is set
            if (registerUploadMetadataEndpointRequest == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'registerUploadMetadataEndpointRequest' when calling MainApi->RegisterUploadMetadata");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = registerUploadMetadataEndpointRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/2/uploads/metadata", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterUploadMetadata", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailPreview"></param>
        /// <returns></returns>
        public void RenderEmailTemplatePreview(EmailPreview emailPreview)
        {
            RenderEmailTemplatePreviewWithHttpInfo(emailPreview);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailPreview"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> RenderEmailTemplatePreviewWithHttpInfo(EmailPreview emailPreview)
        {
            // verify the required parameter 'emailPreview' is set
            if (emailPreview == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'emailPreview' when calling MainApi->RenderEmailTemplatePreview");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = emailPreview;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/2/system/smtp/preview", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RenderEmailTemplatePreview", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailPreview"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RenderEmailTemplatePreviewAsync(EmailPreview emailPreview, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RenderEmailTemplatePreviewWithHttpInfoAsync(emailPreview, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailPreview"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> RenderEmailTemplatePreviewWithHttpInfoAsync(EmailPreview emailPreview, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'emailPreview' is set
            if (emailPreview == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'emailPreview' when calling MainApi->RenderEmailTemplatePreview");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = emailPreview;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/2/system/smtp/preview", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RenderEmailTemplatePreview", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <returns></returns>
        public void ResetUserPassword(int id)
        {
            ResetUserPasswordWithHttpInfo(id);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> ResetUserPasswordWithHttpInfo(int id)
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/2/users/{id}/password/reset", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResetUserPassword", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ResetUserPasswordAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ResetUserPasswordWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> ResetUserPasswordWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/2/users/{id}/password/reset", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResetUserPassword", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <param name="operation"></param>
        /// <param name="service"></param>
        /// <returns></returns>
        public void RunServiceOperation(int id, string operation, string service)
        {
            RunServiceOperationWithHttpInfo(id, operation, service);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <param name="operation"></param>
        /// <param name="service"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> RunServiceOperationWithHttpInfo(int id, string operation, string service)
        {
            // verify the required parameter 'operation' is set
            if (operation == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'operation' when calling MainApi->RunServiceOperation");

            // verify the required parameter 'service' is set
            if (service == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'service' when calling MainApi->RunServiceOperation");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("operation", ElementsSDK.Client.ClientUtils.ParameterToString(operation)); // path parameter
            localVarRequestOptions.PathParameters.Add("service", ElementsSDK.Client.ClientUtils.ParameterToString(service)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/2/nodes/{id}/services/{service}/{operation}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RunServiceOperation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <param name="operation"></param>
        /// <param name="service"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RunServiceOperationAsync(int id, string operation, string service, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RunServiceOperationWithHttpInfoAsync(id, operation, service, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <param name="operation"></param>
        /// <param name="service"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> RunServiceOperationWithHttpInfoAsync(int id, string operation, string service, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'operation' is set
            if (operation == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'operation' when calling MainApi->RunServiceOperation");

            // verify the required parameter 'service' is set
            if (service == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'service' when calling MainApi->RunServiceOperation");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("operation", ElementsSDK.Client.ClientUtils.ParameterToString(operation)); // path parameter
            localVarRequestOptions.PathParameters.Add("service", ElementsSDK.Client.ClientUtils.ParameterToString(service)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/2/nodes/{id}/services/{service}/{operation}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RunServiceOperation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <param name="ipmi"></param>
        /// <returns>Ipmi</returns>
        public Ipmi SetIPMIConfiguration(int id, Ipmi ipmi)
        {
            ElementsSDK.Client.ApiResponse<Ipmi> localVarResponse = SetIPMIConfigurationWithHttpInfo(id, ipmi);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <param name="ipmi"></param>
        /// <returns>ApiResponse of Ipmi</returns>
        public ElementsSDK.Client.ApiResponse<Ipmi> SetIPMIConfigurationWithHttpInfo(int id, Ipmi ipmi)
        {
            // verify the required parameter 'ipmi' is set
            if (ipmi == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'ipmi' when calling MainApi->SetIPMIConfiguration");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = ipmi;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Ipmi>("/api/2/nodes/{id}/ipmi", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetIPMIConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <param name="ipmi"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Ipmi</returns>
        public async System.Threading.Tasks.Task<Ipmi> SetIPMIConfigurationAsync(int id, Ipmi ipmi, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<Ipmi> localVarResponse = await SetIPMIConfigurationWithHttpInfoAsync(id, ipmi, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Storage Node.</param>
        /// <param name="ipmi"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Ipmi)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Ipmi>> SetIPMIConfigurationWithHttpInfoAsync(int id, Ipmi ipmi, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ipmi' is set
            if (ipmi == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'ipmi' when calling MainApi->SetIPMIConfiguration");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = ipmi;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Ipmi>("/api/2/nodes/{id}/ipmi", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetIPMIConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeEndpointRequest"></param>
        /// <returns>TimeEndpointResponse</returns>
        public TimeEndpointResponse SetLocalTime(TimeEndpointRequest timeEndpointRequest)
        {
            ElementsSDK.Client.ApiResponse<TimeEndpointResponse> localVarResponse = SetLocalTimeWithHttpInfo(timeEndpointRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeEndpointRequest"></param>
        /// <returns>ApiResponse of TimeEndpointResponse</returns>
        public ElementsSDK.Client.ApiResponse<TimeEndpointResponse> SetLocalTimeWithHttpInfo(TimeEndpointRequest timeEndpointRequest)
        {
            // verify the required parameter 'timeEndpointRequest' is set
            if (timeEndpointRequest == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'timeEndpointRequest' when calling MainApi->SetLocalTime");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = timeEndpointRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TimeEndpointResponse>("/api/2/system/time", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetLocalTime", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimeEndpointResponse</returns>
        public async System.Threading.Tasks.Task<TimeEndpointResponse> SetLocalTimeAsync(TimeEndpointRequest timeEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<TimeEndpointResponse> localVarResponse = await SetLocalTimeWithHttpInfoAsync(timeEndpointRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimeEndpointResponse)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<TimeEndpointResponse>> SetLocalTimeWithHttpInfoAsync(TimeEndpointRequest timeEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'timeEndpointRequest' is set
            if (timeEndpointRequest == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'timeEndpointRequest' when calling MainApi->SetLocalTime");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = timeEndpointRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TimeEndpointResponse>("/api/2/system/time", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetLocalTime", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeOwnPasswordRequest"></param>
        /// <returns></returns>
        public void SetMyPassword(ChangeOwnPasswordRequest changeOwnPasswordRequest)
        {
            SetMyPasswordWithHttpInfo(changeOwnPasswordRequest);
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeOwnPasswordRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> SetMyPasswordWithHttpInfo(ChangeOwnPasswordRequest changeOwnPasswordRequest)
        {
            // verify the required parameter 'changeOwnPasswordRequest' is set
            if (changeOwnPasswordRequest == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'changeOwnPasswordRequest' when calling MainApi->SetMyPassword");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = changeOwnPasswordRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/2/users/me/password", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetMyPassword", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeOwnPasswordRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetMyPasswordAsync(ChangeOwnPasswordRequest changeOwnPasswordRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SetMyPasswordWithHttpInfoAsync(changeOwnPasswordRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeOwnPasswordRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> SetMyPasswordWithHttpInfoAsync(ChangeOwnPasswordRequest changeOwnPasswordRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'changeOwnPasswordRequest' is set
            if (changeOwnPasswordRequest == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'changeOwnPasswordRequest' when calling MainApi->SetMyPassword");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = changeOwnPasswordRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/2/users/me/password", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetMyPassword", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="changePasswordRequest"></param>
        /// <returns></returns>
        public void SetUserPassword(int id, ChangePasswordRequest changePasswordRequest)
        {
            SetUserPasswordWithHttpInfo(id, changePasswordRequest);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="changePasswordRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> SetUserPasswordWithHttpInfo(int id, ChangePasswordRequest changePasswordRequest)
        {
            // verify the required parameter 'changePasswordRequest' is set
            if (changePasswordRequest == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'changePasswordRequest' when calling MainApi->SetUserPassword");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = changePasswordRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/2/users/{id}/password", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetUserPassword", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="changePasswordRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetUserPasswordAsync(int id, ChangePasswordRequest changePasswordRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SetUserPasswordWithHttpInfoAsync(id, changePasswordRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="changePasswordRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> SetUserPasswordWithHttpInfoAsync(int id, ChangePasswordRequest changePasswordRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'changePasswordRequest' is set
            if (changePasswordRequest == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'changePasswordRequest' when calling MainApi->SetUserPassword");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = changePasswordRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/2/users/{id}/password", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetUserPassword", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void Shutdown()
        {
            ShutdownWithHttpInfo();
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> ShutdownWithHttpInfo()
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/2/system/shutdown", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Shutdown", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ShutdownAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ShutdownWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> ShutdownWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/2/system/shutdown", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Shutdown", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SolrReindexEndpointResponse</returns>
        public SolrReindexEndpointResponse StartSolrReindex()
        {
            ElementsSDK.Client.ApiResponse<SolrReindexEndpointResponse> localVarResponse = StartSolrReindexWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SolrReindexEndpointResponse</returns>
        public ElementsSDK.Client.ApiResponse<SolrReindexEndpointResponse> StartSolrReindexWithHttpInfo()
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SolrReindexEndpointResponse>("/api/2/system/solr/reindex", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartSolrReindex", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolrReindexEndpointResponse</returns>
        public async System.Threading.Tasks.Task<SolrReindexEndpointResponse> StartSolrReindexAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<SolrReindexEndpointResponse> localVarResponse = await StartSolrReindexWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolrReindexEndpointResponse)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<SolrReindexEndpointResponse>> StartSolrReindexWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SolrReindexEndpointResponse>("/api/2/system/solr/reindex", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartSolrReindex", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TaskInfo</returns>
        public TaskInfo StartSupportSession()
        {
            ElementsSDK.Client.ApiResponse<TaskInfo> localVarResponse = StartSupportSessionWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TaskInfo</returns>
        public ElementsSDK.Client.ApiResponse<TaskInfo> StartSupportSessionWithHttpInfo()
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TaskInfo>("/api/2/system/support-session/start", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartSupportSession", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        public async System.Threading.Tasks.Task<TaskInfo> StartSupportSessionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<TaskInfo> localVarResponse = await StartSupportSessionWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<TaskInfo>> StartSupportSessionWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TaskInfo>("/api/2/system/support-session/start", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartSupportSession", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <returns>TaskInfo</returns>
        public TaskInfo StartSystemBackup(Path path)
        {
            ElementsSDK.Client.ApiResponse<TaskInfo> localVarResponse = StartSystemBackupWithHttpInfo(path);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <returns>ApiResponse of TaskInfo</returns>
        public ElementsSDK.Client.ApiResponse<TaskInfo> StartSystemBackupWithHttpInfo(Path path)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'path' when calling MainApi->StartSystemBackup");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = path;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TaskInfo>("/api/2/system/backup/start", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartSystemBackup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        public async System.Threading.Tasks.Task<TaskInfo> StartSystemBackupAsync(Path path, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<TaskInfo> localVarResponse = await StartSystemBackupWithHttpInfoAsync(path, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<TaskInfo>> StartSystemBackupWithHttpInfoAsync(Path path, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'path' when calling MainApi->StartSystemBackup");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = path;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TaskInfo>("/api/2/system/backup/start", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartSystemBackup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Group.</param>
        /// <returns></returns>
        public void SyncLDAPGroup(int id)
        {
            SyncLDAPGroupWithHttpInfo(id);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Group.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> SyncLDAPGroupWithHttpInfo(int id)
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/2/groups/{id}/ldap-sync", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SyncLDAPGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SyncLDAPGroupAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SyncLDAPGroupWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> SyncLDAPGroupWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/2/groups/{id}/ldap-sync", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SyncLDAPGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this LDAP Server.</param>
        /// <returns></returns>
        public void SyncLDAPUsers(int id)
        {
            SyncLDAPUsersWithHttpInfo(id);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this LDAP Server.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> SyncLDAPUsersWithHttpInfo(int id)
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/2/ldap-servers/{id}/sync-users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SyncLDAPUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this LDAP Server.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SyncLDAPUsersAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SyncLDAPUsersWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this LDAP Server.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> SyncLDAPUsersWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/2/ldap-servers/{id}/sync-users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SyncLDAPUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeSyncEndpointRequest"></param>
        /// <returns>TimeSyncEndpointResponse</returns>
        public TimeSyncEndpointResponse SyncTime(TimeSyncEndpointRequest timeSyncEndpointRequest)
        {
            ElementsSDK.Client.ApiResponse<TimeSyncEndpointResponse> localVarResponse = SyncTimeWithHttpInfo(timeSyncEndpointRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeSyncEndpointRequest"></param>
        /// <returns>ApiResponse of TimeSyncEndpointResponse</returns>
        public ElementsSDK.Client.ApiResponse<TimeSyncEndpointResponse> SyncTimeWithHttpInfo(TimeSyncEndpointRequest timeSyncEndpointRequest)
        {
            // verify the required parameter 'timeSyncEndpointRequest' is set
            if (timeSyncEndpointRequest == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'timeSyncEndpointRequest' when calling MainApi->SyncTime");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = timeSyncEndpointRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TimeSyncEndpointResponse>("/api/2/system/time/sync", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SyncTime", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeSyncEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimeSyncEndpointResponse</returns>
        public async System.Threading.Tasks.Task<TimeSyncEndpointResponse> SyncTimeAsync(TimeSyncEndpointRequest timeSyncEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<TimeSyncEndpointResponse> localVarResponse = await SyncTimeWithHttpInfoAsync(timeSyncEndpointRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeSyncEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimeSyncEndpointResponse)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<TimeSyncEndpointResponse>> SyncTimeWithHttpInfoAsync(TimeSyncEndpointRequest timeSyncEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'timeSyncEndpointRequest' is set
            if (timeSyncEndpointRequest == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'timeSyncEndpointRequest' when calling MainApi->SyncTime");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = timeSyncEndpointRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TimeSyncEndpointResponse>("/api/2/system/time/sync", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SyncTime", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="syncTOTPRequest"></param>
        /// <returns>SyncTOTP</returns>
        public SyncTOTP SyncUserTOTP(int id, SyncTOTPRequest syncTOTPRequest)
        {
            ElementsSDK.Client.ApiResponse<SyncTOTP> localVarResponse = SyncUserTOTPWithHttpInfo(id, syncTOTPRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="syncTOTPRequest"></param>
        /// <returns>ApiResponse of SyncTOTP</returns>
        public ElementsSDK.Client.ApiResponse<SyncTOTP> SyncUserTOTPWithHttpInfo(int id, SyncTOTPRequest syncTOTPRequest)
        {
            // verify the required parameter 'syncTOTPRequest' is set
            if (syncTOTPRequest == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'syncTOTPRequest' when calling MainApi->SyncUserTOTP");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = syncTOTPRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<SyncTOTP>("/api/2/users/{id}/totp", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SyncUserTOTP", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="syncTOTPRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SyncTOTP</returns>
        public async System.Threading.Tasks.Task<SyncTOTP> SyncUserTOTPAsync(int id, SyncTOTPRequest syncTOTPRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<SyncTOTP> localVarResponse = await SyncUserTOTPWithHttpInfoAsync(id, syncTOTPRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="syncTOTPRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SyncTOTP)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<SyncTOTP>> SyncUserTOTPWithHttpInfoAsync(int id, SyncTOTPRequest syncTOTPRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'syncTOTPRequest' is set
            if (syncTOTPRequest == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'syncTOTPRequest' when calling MainApi->SyncUserTOTP");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = syncTOTPRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<SyncTOTP>("/api/2/users/{id}/totp", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SyncUserTOTP", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testSMTP"></param>
        /// <returns></returns>
        public void TestSMTPConfiguration(TestSMTP testSMTP)
        {
            TestSMTPConfigurationWithHttpInfo(testSMTP);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testSMTP"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> TestSMTPConfigurationWithHttpInfo(TestSMTP testSMTP)
        {
            // verify the required parameter 'testSMTP' is set
            if (testSMTP == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'testSMTP' when calling MainApi->TestSMTPConfiguration");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = testSMTP;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/2/system/smtp/test", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestSMTPConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testSMTP"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TestSMTPConfigurationAsync(TestSMTP testSMTP, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await TestSMTPConfigurationWithHttpInfoAsync(testSMTP, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testSMTP"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> TestSMTPConfigurationWithHttpInfoAsync(TestSMTP testSMTP, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'testSMTP' is set
            if (testSMTP == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'testSMTP' when calling MainApi->TestSMTPConfiguration");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = testSMTP;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/2/system/smtp/test", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestSMTPConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificate"></param>
        /// <returns>Certificate</returns>
        public Certificate UpdateCertificateConfiguration(Certificate certificate)
        {
            ElementsSDK.Client.ApiResponse<Certificate> localVarResponse = UpdateCertificateConfigurationWithHttpInfo(certificate);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificate"></param>
        /// <returns>ApiResponse of Certificate</returns>
        public ElementsSDK.Client.ApiResponse<Certificate> UpdateCertificateConfigurationWithHttpInfo(Certificate certificate)
        {
            // verify the required parameter 'certificate' is set
            if (certificate == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'certificate' when calling MainApi->UpdateCertificateConfiguration");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = certificate;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Certificate>("/api/2/system/certificate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCertificateConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Certificate</returns>
        public async System.Threading.Tasks.Task<Certificate> UpdateCertificateConfigurationAsync(Certificate certificate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<Certificate> localVarResponse = await UpdateCertificateConfigurationWithHttpInfoAsync(certificate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Certificate)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Certificate>> UpdateCertificateConfigurationWithHttpInfoAsync(Certificate certificate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'certificate' is set
            if (certificate == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'certificate' when calling MainApi->UpdateCertificateConfiguration");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = certificate;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Certificate>("/api/2/system/certificate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCertificateConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workstation"></param>
        /// <returns>Workstation</returns>
        public Workstation UpdateCurrentWorkstation(Workstation workstation)
        {
            ElementsSDK.Client.ApiResponse<Workstation> localVarResponse = UpdateCurrentWorkstationWithHttpInfo(workstation);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workstation"></param>
        /// <returns>ApiResponse of Workstation</returns>
        public ElementsSDK.Client.ApiResponse<Workstation> UpdateCurrentWorkstationWithHttpInfo(Workstation workstation)
        {
            // verify the required parameter 'workstation' is set
            if (workstation == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'workstation' when calling MainApi->UpdateCurrentWorkstation");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = workstation;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Workstation>("/api/2/workstations/current", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCurrentWorkstation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workstation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Workstation</returns>
        public async System.Threading.Tasks.Task<Workstation> UpdateCurrentWorkstationAsync(Workstation workstation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<Workstation> localVarResponse = await UpdateCurrentWorkstationWithHttpInfoAsync(workstation, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workstation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Workstation)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Workstation>> UpdateCurrentWorkstationWithHttpInfoAsync(Workstation workstation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workstation' is set
            if (workstation == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'workstation' when calling MainApi->UpdateCurrentWorkstation");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = workstation;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Workstation>("/api/2/workstations/current", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCurrentWorkstation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this download archive.</param>
        /// <param name="downloadArchive"></param>
        /// <returns>DownloadArchive</returns>
        public DownloadArchive UpdateDownloadArchive(Guid id, DownloadArchive downloadArchive)
        {
            ElementsSDK.Client.ApiResponse<DownloadArchive> localVarResponse = UpdateDownloadArchiveWithHttpInfo(id, downloadArchive);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this download archive.</param>
        /// <param name="downloadArchive"></param>
        /// <returns>ApiResponse of DownloadArchive</returns>
        public ElementsSDK.Client.ApiResponse<DownloadArchive> UpdateDownloadArchiveWithHttpInfo(Guid id, DownloadArchive downloadArchive)
        {
            // verify the required parameter 'downloadArchive' is set
            if (downloadArchive == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'downloadArchive' when calling MainApi->UpdateDownloadArchive");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = downloadArchive;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<DownloadArchive>("/api/2/download-archive/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDownloadArchive", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this download archive.</param>
        /// <param name="downloadArchive"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DownloadArchive</returns>
        public async System.Threading.Tasks.Task<DownloadArchive> UpdateDownloadArchiveAsync(Guid id, DownloadArchive downloadArchive, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<DownloadArchive> localVarResponse = await UpdateDownloadArchiveWithHttpInfoAsync(id, downloadArchive, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A UUID string identifying this download archive.</param>
        /// <param name="downloadArchive"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DownloadArchive)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<DownloadArchive>> UpdateDownloadArchiveWithHttpInfoAsync(Guid id, DownloadArchive downloadArchive, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'downloadArchive' is set
            if (downloadArchive == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'downloadArchive' when calling MainApi->UpdateDownloadArchive");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = downloadArchive;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<DownloadArchive>("/api/2/download-archive/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDownloadArchive", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:view&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Group.</param>
        /// <param name="elementsGroupDetail"></param>
        /// <returns>ElementsGroupDetail</returns>
        public ElementsGroupDetail UpdateGroup(int id, ElementsGroupDetail elementsGroupDetail)
        {
            ElementsSDK.Client.ApiResponse<ElementsGroupDetail> localVarResponse = UpdateGroupWithHttpInfo(id, elementsGroupDetail);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:view&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Group.</param>
        /// <param name="elementsGroupDetail"></param>
        /// <returns>ApiResponse of ElementsGroupDetail</returns>
        public ElementsSDK.Client.ApiResponse<ElementsGroupDetail> UpdateGroupWithHttpInfo(int id, ElementsGroupDetail elementsGroupDetail)
        {
            // verify the required parameter 'elementsGroupDetail' is set
            if (elementsGroupDetail == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'elementsGroupDetail' when calling MainApi->UpdateGroup");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = elementsGroupDetail;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ElementsGroupDetail>("/api/2/groups/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:view&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Group.</param>
        /// <param name="elementsGroupDetail"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ElementsGroupDetail</returns>
        public async System.Threading.Tasks.Task<ElementsGroupDetail> UpdateGroupAsync(int id, ElementsGroupDetail elementsGroupDetail, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<ElementsGroupDetail> localVarResponse = await UpdateGroupWithHttpInfoAsync(id, elementsGroupDetail, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;users:view&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Group.</param>
        /// <param name="elementsGroupDetail"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ElementsGroupDetail)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<ElementsGroupDetail>> UpdateGroupWithHttpInfoAsync(int id, ElementsGroupDetail elementsGroupDetail, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'elementsGroupDetail' is set
            if (elementsGroupDetail == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'elementsGroupDetail' when calling MainApi->UpdateGroup");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = elementsGroupDetail;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ElementsGroupDetail>("/api/2/groups/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this NTP Server.</param>
        /// <param name="nTPServer"></param>
        /// <returns>NTPServer</returns>
        public NTPServer UpdateNTPServer(int id, NTPServer nTPServer)
        {
            ElementsSDK.Client.ApiResponse<NTPServer> localVarResponse = UpdateNTPServerWithHttpInfo(id, nTPServer);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this NTP Server.</param>
        /// <param name="nTPServer"></param>
        /// <returns>ApiResponse of NTPServer</returns>
        public ElementsSDK.Client.ApiResponse<NTPServer> UpdateNTPServerWithHttpInfo(int id, NTPServer nTPServer)
        {
            // verify the required parameter 'nTPServer' is set
            if (nTPServer == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'nTPServer' when calling MainApi->UpdateNTPServer");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = nTPServer;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<NTPServer>("/api/2/system/time/servers/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateNTPServer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this NTP Server.</param>
        /// <param name="nTPServer"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NTPServer</returns>
        public async System.Threading.Tasks.Task<NTPServer> UpdateNTPServerAsync(int id, NTPServer nTPServer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<NTPServer> localVarResponse = await UpdateNTPServerWithHttpInfoAsync(id, nTPServer, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this NTP Server.</param>
        /// <param name="nTPServer"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NTPServer)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<NTPServer>> UpdateNTPServerWithHttpInfoAsync(int id, NTPServer nTPServer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'nTPServer' is set
            if (nTPServer == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'nTPServer' when calling MainApi->UpdateNTPServer");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = nTPServer;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<NTPServer>("/api/2/system/time/servers/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateNTPServer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Parameters</returns>
        public Parameters UpdateParameters(Parameters parameters)
        {
            ElementsSDK.Client.ApiResponse<Parameters> localVarResponse = UpdateParametersWithHttpInfo(parameters);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiResponse of Parameters</returns>
        public ElementsSDK.Client.ApiResponse<Parameters> UpdateParametersWithHttpInfo(Parameters parameters)
        {
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'parameters' when calling MainApi->UpdateParameters");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = parameters;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Parameters>("/api/2/parameters", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateParameters", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Parameters</returns>
        public async System.Threading.Tasks.Task<Parameters> UpdateParametersAsync(Parameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<Parameters> localVarResponse = await UpdateParametersWithHttpInfoAsync(parameters, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Parameters)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Parameters>> UpdateParametersWithHttpInfoAsync(Parameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'parameters' when calling MainApi->UpdateParameters");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = parameters;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Parameters>("/api/2/parameters", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateParameters", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="elementsUserProfile"></param>
        /// <returns>ElementsUserProfile</returns>
        public ElementsUserProfile UpdateProfile(ElementsUserProfile elementsUserProfile)
        {
            ElementsSDK.Client.ApiResponse<ElementsUserProfile> localVarResponse = UpdateProfileWithHttpInfo(elementsUserProfile);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="elementsUserProfile"></param>
        /// <returns>ApiResponse of ElementsUserProfile</returns>
        public ElementsSDK.Client.ApiResponse<ElementsUserProfile> UpdateProfileWithHttpInfo(ElementsUserProfile elementsUserProfile)
        {
            // verify the required parameter 'elementsUserProfile' is set
            if (elementsUserProfile == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'elementsUserProfile' when calling MainApi->UpdateProfile");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = elementsUserProfile;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ElementsUserProfile>("/api/2/users/me", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProfile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="elementsUserProfile"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ElementsUserProfile</returns>
        public async System.Threading.Tasks.Task<ElementsUserProfile> UpdateProfileAsync(ElementsUserProfile elementsUserProfile, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<ElementsUserProfile> localVarResponse = await UpdateProfileWithHttpInfoAsync(elementsUserProfile, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="elementsUserProfile"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ElementsUserProfile)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<ElementsUserProfile>> UpdateProfileWithHttpInfoAsync(ElementsUserProfile elementsUserProfile, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'elementsUserProfile' is set
            if (elementsUserProfile == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'elementsUserProfile' when calling MainApi->UpdateProfile");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = elementsUserProfile;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ElementsUserProfile>("/api/2/users/me", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProfile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sMTPConfiguration"></param>
        /// <returns>SMTPConfiguration</returns>
        public SMTPConfiguration UpdateSMTPConfiguration(SMTPConfiguration sMTPConfiguration)
        {
            ElementsSDK.Client.ApiResponse<SMTPConfiguration> localVarResponse = UpdateSMTPConfigurationWithHttpInfo(sMTPConfiguration);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sMTPConfiguration"></param>
        /// <returns>ApiResponse of SMTPConfiguration</returns>
        public ElementsSDK.Client.ApiResponse<SMTPConfiguration> UpdateSMTPConfigurationWithHttpInfo(SMTPConfiguration sMTPConfiguration)
        {
            // verify the required parameter 'sMTPConfiguration' is set
            if (sMTPConfiguration == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'sMTPConfiguration' when calling MainApi->UpdateSMTPConfiguration");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = sMTPConfiguration;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<SMTPConfiguration>("/api/2/system/smtp", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSMTPConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sMTPConfiguration"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SMTPConfiguration</returns>
        public async System.Threading.Tasks.Task<SMTPConfiguration> UpdateSMTPConfigurationAsync(SMTPConfiguration sMTPConfiguration, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<SMTPConfiguration> localVarResponse = await UpdateSMTPConfigurationWithHttpInfoAsync(sMTPConfiguration, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sMTPConfiguration"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SMTPConfiguration)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<SMTPConfiguration>> UpdateSMTPConfigurationWithHttpInfoAsync(SMTPConfiguration sMTPConfiguration, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sMTPConfiguration' is set
            if (sMTPConfiguration == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'sMTPConfiguration' when calling MainApi->UpdateSMTPConfiguration");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = sMTPConfiguration;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<SMTPConfiguration>("/api/2/system/smtp", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSMTPConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="elementsUserDetail"></param>
        /// <returns>ElementsUserDetail</returns>
        public ElementsUserDetail UpdateUser(int id, ElementsUserDetail elementsUserDetail)
        {
            ElementsSDK.Client.ApiResponse<ElementsUserDetail> localVarResponse = UpdateUserWithHttpInfo(id, elementsUserDetail);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="elementsUserDetail"></param>
        /// <returns>ApiResponse of ElementsUserDetail</returns>
        public ElementsSDK.Client.ApiResponse<ElementsUserDetail> UpdateUserWithHttpInfo(int id, ElementsUserDetail elementsUserDetail)
        {
            // verify the required parameter 'elementsUserDetail' is set
            if (elementsUserDetail == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'elementsUserDetail' when calling MainApi->UpdateUser");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = elementsUserDetail;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ElementsUserDetail>("/api/2/users/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="elementsUserDetail"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ElementsUserDetail</returns>
        public async System.Threading.Tasks.Task<ElementsUserDetail> UpdateUserAsync(int id, ElementsUserDetail elementsUserDetail, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<ElementsUserDetail> localVarResponse = await UpdateUserWithHttpInfoAsync(id, elementsUserDetail, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;users:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this User.</param>
        /// <param name="elementsUserDetail"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ElementsUserDetail)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<ElementsUserDetail>> UpdateUserWithHttpInfoAsync(int id, ElementsUserDetail elementsUserDetail, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'elementsUserDetail' is set
            if (elementsUserDetail == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'elementsUserDetail' when calling MainApi->UpdateUser");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = elementsUserDetail;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ElementsUserDetail>("/api/2/users/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user   * Own workstation or User account permission: &#x60;workstations:view&#x60; (read) / &#x60;workstations:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this workstation.</param>
        /// <param name="workstation"></param>
        /// <returns>Workstation</returns>
        public Workstation UpdateWorkstation(string id, Workstation workstation)
        {
            ElementsSDK.Client.ApiResponse<Workstation> localVarResponse = UpdateWorkstationWithHttpInfo(id, workstation);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user   * Own workstation or User account permission: &#x60;workstations:view&#x60; (read) / &#x60;workstations:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this workstation.</param>
        /// <param name="workstation"></param>
        /// <returns>ApiResponse of Workstation</returns>
        public ElementsSDK.Client.ApiResponse<Workstation> UpdateWorkstationWithHttpInfo(string id, Workstation workstation)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'id' when calling MainApi->UpdateWorkstation");

            // verify the required parameter 'workstation' is set
            if (workstation == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'workstation' when calling MainApi->UpdateWorkstation");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = workstation;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Workstation>("/api/2/workstations/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateWorkstation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user   * Own workstation or User account permission: &#x60;workstations:view&#x60; (read) / &#x60;workstations:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this workstation.</param>
        /// <param name="workstation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Workstation</returns>
        public async System.Threading.Tasks.Task<Workstation> UpdateWorkstationAsync(string id, Workstation workstation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<Workstation> localVarResponse = await UpdateWorkstationWithHttpInfoAsync(id, workstation, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user   * Own workstation or User account permission: &#x60;workstations:view&#x60; (read) / &#x60;workstations:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this workstation.</param>
        /// <param name="workstation"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Workstation)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Workstation>> UpdateWorkstationWithHttpInfoAsync(string id, Workstation workstation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'id' when calling MainApi->UpdateWorkstation");

            // verify the required parameter 'workstation' is set
            if (workstation == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'workstation' when calling MainApi->UpdateWorkstation");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = workstation;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Workstation>("/api/2/workstations/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateWorkstation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadChunkEndpointRequest"></param>
        /// <returns></returns>
        public void UploadChunk(UploadChunkEndpointRequest uploadChunkEndpointRequest)
        {
            UploadChunkWithHttpInfo(uploadChunkEndpointRequest);
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadChunkEndpointRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> UploadChunkWithHttpInfo(UploadChunkEndpointRequest uploadChunkEndpointRequest)
        {
            // verify the required parameter 'uploadChunkEndpointRequest' is set
            if (uploadChunkEndpointRequest == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'uploadChunkEndpointRequest' when calling MainApi->UploadChunk");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = uploadChunkEndpointRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/2/uploads/chunk", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadChunk", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadChunkEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UploadChunkAsync(UploadChunkEndpointRequest uploadChunkEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UploadChunkWithHttpInfoAsync(uploadChunkEndpointRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * Authenticated user 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadChunkEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> UploadChunkWithHttpInfoAsync(UploadChunkEndpointRequest uploadChunkEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'uploadChunkEndpointRequest' is set
            if (uploadChunkEndpointRequest == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'uploadChunkEndpointRequest' when calling MainApi->UploadChunk");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = uploadChunkEndpointRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/2/uploads/chunk", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadChunk", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
