/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ElementsSDK.Client;
using ElementsSDK.Model;

namespace ElementsSDK.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIntegrationsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <returns></returns>
        void DeleteSlackConnection(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSlackConnectionWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <returns></returns>
        void DeleteTeamsConnection(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTeamsConnectionWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>List&lt;SlackConnection&gt;</returns>
        List<SlackConnection> GetAllSlackConnections(string ordering = default(string), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;SlackConnection&gt;</returns>
        ApiResponse<List<SlackConnection>> GetAllSlackConnectionsWithHttpInfo(string ordering = default(string), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>List&lt;TeamsConnection&gt;</returns>
        List<TeamsConnection> GetAllTeamsConnections(string ordering = default(string), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;TeamsConnection&gt;</returns>
        ApiResponse<List<TeamsConnection>> GetAllTeamsConnectionsWithHttpInfo(string ordering = default(string), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <returns>List&lt;SlackChannel&gt;</returns>
        List<SlackChannel> GetSlackChannels(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <returns>ApiResponse of List&lt;SlackChannel&gt;</returns>
        ApiResponse<List<SlackChannel>> GetSlackChannelsWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <returns>SlackConnection</returns>
        SlackConnection GetSlackConnection(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <returns>ApiResponse of SlackConnection</returns>
        ApiResponse<SlackConnection> GetSlackConnectionWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <returns>List&lt;SlackEmoji&gt;</returns>
        List<SlackEmoji> GetSlackEmoji(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <returns>ApiResponse of List&lt;SlackEmoji&gt;</returns>
        ApiResponse<List<SlackEmoji>> GetSlackEmojiWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <returns>List&lt;SlackUser&gt;</returns>
        List<SlackUser> GetSlackUsers(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <returns>ApiResponse of List&lt;SlackUser&gt;</returns>
        ApiResponse<List<SlackUser>> GetSlackUsersWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <returns>List&lt;TeamsRecipient&gt;</returns>
        List<TeamsRecipient> GetTeamsChannels(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <returns>ApiResponse of List&lt;TeamsRecipient&gt;</returns>
        ApiResponse<List<TeamsRecipient>> GetTeamsChannelsWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <returns>TeamsConnection</returns>
        TeamsConnection GetTeamsConnection(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <returns>ApiResponse of TeamsConnection</returns>
        ApiResponse<TeamsConnection> GetTeamsConnectionWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <returns>List&lt;TeamsRecipient&gt;</returns>
        List<TeamsRecipient> GetTeamsUsers(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <returns>ApiResponse of List&lt;TeamsRecipient&gt;</returns>
        ApiResponse<List<TeamsRecipient>> GetTeamsUsersWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <param name="slackConnectionPartialUpdate"></param>
        /// <returns>SlackConnection</returns>
        SlackConnection PatchSlackConnection(int id, SlackConnectionPartialUpdate slackConnectionPartialUpdate);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <param name="slackConnectionPartialUpdate"></param>
        /// <returns>ApiResponse of SlackConnection</returns>
        ApiResponse<SlackConnection> PatchSlackConnectionWithHttpInfo(int id, SlackConnectionPartialUpdate slackConnectionPartialUpdate);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <param name="teamsConnectionPartialUpdate"></param>
        /// <returns>TeamsConnection</returns>
        TeamsConnection PatchTeamsConnection(int id, TeamsConnectionPartialUpdate teamsConnectionPartialUpdate);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <param name="teamsConnectionPartialUpdate"></param>
        /// <returns>ApiResponse of TeamsConnection</returns>
        ApiResponse<TeamsConnection> PatchTeamsConnectionWithHttpInfo(int id, TeamsConnectionPartialUpdate teamsConnectionPartialUpdate);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <param name="slackMessage"></param>
        /// <returns></returns>
        void SendSlackMessage(int id, SlackMessage slackMessage);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <param name="slackMessage"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SendSlackMessageWithHttpInfo(int id, SlackMessage slackMessage);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <param name="teamsMessage"></param>
        /// <returns></returns>
        void SendTeamsMessage(int id, TeamsMessage teamsMessage);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <param name="teamsMessage"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SendTeamsMessageWithHttpInfo(int id, TeamsMessage teamsMessage);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns></returns>
        void StartSlackConnectionFlow(string ordering = default(string), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StartSlackConnectionFlowWithHttpInfo(string ordering = default(string), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <returns></returns>
        void StartSlackConnectionTokenRefreshFlow(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StartSlackConnectionTokenRefreshFlowWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="team"> (optional)</param>
        /// <returns></returns>
        void StartTeamsConnectionFlow(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), string team = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="team"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StartTeamsConnectionFlowWithHttpInfo(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), string team = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <param name="team"> (optional)</param>
        /// <returns></returns>
        void StartTeamsConnectionTokenRefreshFlow(int id, string team = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <param name="team"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StartTeamsConnectionTokenRefreshFlowWithHttpInfo(int id, string team = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <param name="slackConnection"></param>
        /// <returns>SlackConnection</returns>
        SlackConnection UpdateSlackConnection(int id, SlackConnection slackConnection);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <param name="slackConnection"></param>
        /// <returns>ApiResponse of SlackConnection</returns>
        ApiResponse<SlackConnection> UpdateSlackConnectionWithHttpInfo(int id, SlackConnection slackConnection);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <param name="teamsConnection"></param>
        /// <returns>TeamsConnection</returns>
        TeamsConnection UpdateTeamsConnection(int id, TeamsConnection teamsConnection);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <param name="teamsConnection"></param>
        /// <returns>ApiResponse of TeamsConnection</returns>
        ApiResponse<TeamsConnection> UpdateTeamsConnectionWithHttpInfo(int id, TeamsConnection teamsConnection);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIntegrationsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSlackConnectionAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSlackConnectionWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTeamsConnectionAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTeamsConnectionWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SlackConnection&gt;</returns>
        System.Threading.Tasks.Task<List<SlackConnection>> GetAllSlackConnectionsAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SlackConnection&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SlackConnection>>> GetAllSlackConnectionsWithHttpInfoAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TeamsConnection&gt;</returns>
        System.Threading.Tasks.Task<List<TeamsConnection>> GetAllTeamsConnectionsAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TeamsConnection&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TeamsConnection>>> GetAllTeamsConnectionsWithHttpInfoAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SlackChannel&gt;</returns>
        System.Threading.Tasks.Task<List<SlackChannel>> GetSlackChannelsAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SlackChannel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SlackChannel>>> GetSlackChannelsWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SlackConnection</returns>
        System.Threading.Tasks.Task<SlackConnection> GetSlackConnectionAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SlackConnection)</returns>
        System.Threading.Tasks.Task<ApiResponse<SlackConnection>> GetSlackConnectionWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SlackEmoji&gt;</returns>
        System.Threading.Tasks.Task<List<SlackEmoji>> GetSlackEmojiAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SlackEmoji&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SlackEmoji>>> GetSlackEmojiWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SlackUser&gt;</returns>
        System.Threading.Tasks.Task<List<SlackUser>> GetSlackUsersAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SlackUser&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SlackUser>>> GetSlackUsersWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TeamsRecipient&gt;</returns>
        System.Threading.Tasks.Task<List<TeamsRecipient>> GetTeamsChannelsAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TeamsRecipient&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TeamsRecipient>>> GetTeamsChannelsWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TeamsConnection</returns>
        System.Threading.Tasks.Task<TeamsConnection> GetTeamsConnectionAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TeamsConnection)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamsConnection>> GetTeamsConnectionWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TeamsRecipient&gt;</returns>
        System.Threading.Tasks.Task<List<TeamsRecipient>> GetTeamsUsersAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TeamsRecipient&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TeamsRecipient>>> GetTeamsUsersWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <param name="slackConnectionPartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SlackConnection</returns>
        System.Threading.Tasks.Task<SlackConnection> PatchSlackConnectionAsync(int id, SlackConnectionPartialUpdate slackConnectionPartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <param name="slackConnectionPartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SlackConnection)</returns>
        System.Threading.Tasks.Task<ApiResponse<SlackConnection>> PatchSlackConnectionWithHttpInfoAsync(int id, SlackConnectionPartialUpdate slackConnectionPartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <param name="teamsConnectionPartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TeamsConnection</returns>
        System.Threading.Tasks.Task<TeamsConnection> PatchTeamsConnectionAsync(int id, TeamsConnectionPartialUpdate teamsConnectionPartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <param name="teamsConnectionPartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TeamsConnection)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamsConnection>> PatchTeamsConnectionWithHttpInfoAsync(int id, TeamsConnectionPartialUpdate teamsConnectionPartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <param name="slackMessage"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SendSlackMessageAsync(int id, SlackMessage slackMessage, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <param name="slackMessage"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SendSlackMessageWithHttpInfoAsync(int id, SlackMessage slackMessage, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <param name="teamsMessage"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SendTeamsMessageAsync(int id, TeamsMessage teamsMessage, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <param name="teamsMessage"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SendTeamsMessageWithHttpInfoAsync(int id, TeamsMessage teamsMessage, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StartSlackConnectionFlowAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StartSlackConnectionFlowWithHttpInfoAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StartSlackConnectionTokenRefreshFlowAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StartSlackConnectionTokenRefreshFlowWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="team"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StartTeamsConnectionFlowAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), string team = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="team"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StartTeamsConnectionFlowWithHttpInfoAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), string team = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <param name="team"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StartTeamsConnectionTokenRefreshFlowAsync(int id, string team = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <param name="team"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StartTeamsConnectionTokenRefreshFlowWithHttpInfoAsync(int id, string team = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <param name="slackConnection"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SlackConnection</returns>
        System.Threading.Tasks.Task<SlackConnection> UpdateSlackConnectionAsync(int id, SlackConnection slackConnection, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <param name="slackConnection"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SlackConnection)</returns>
        System.Threading.Tasks.Task<ApiResponse<SlackConnection>> UpdateSlackConnectionWithHttpInfoAsync(int id, SlackConnection slackConnection, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <param name="teamsConnection"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TeamsConnection</returns>
        System.Threading.Tasks.Task<TeamsConnection> UpdateTeamsConnectionAsync(int id, TeamsConnection teamsConnection, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <param name="teamsConnection"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TeamsConnection)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamsConnection>> UpdateTeamsConnectionWithHttpInfoAsync(int id, TeamsConnection teamsConnection, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIntegrationsApi : IIntegrationsApiSync, IIntegrationsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IntegrationsApi : IIntegrationsApi
    {
        private ElementsSDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IntegrationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IntegrationsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IntegrationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IntegrationsApi(String basePath)
        {
            this.Configuration = ElementsSDK.Client.Configuration.MergeConfigurations(
                ElementsSDK.Client.GlobalConfiguration.Instance,
                new ElementsSDK.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ElementsSDK.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ElementsSDK.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ElementsSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IntegrationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IntegrationsApi(ElementsSDK.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ElementsSDK.Client.Configuration.MergeConfigurations(
                ElementsSDK.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ElementsSDK.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ElementsSDK.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ElementsSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IntegrationsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public IntegrationsApi(ElementsSDK.Client.ISynchronousClient client, ElementsSDK.Client.IAsynchronousClient asyncClient, ElementsSDK.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ElementsSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ElementsSDK.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ElementsSDK.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ElementsSDK.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ElementsSDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <returns></returns>
        public void DeleteSlackConnection(int id)
        {
            DeleteSlackConnectionWithHttpInfo(id);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> DeleteSlackConnectionWithHttpInfo(int id)
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/2/integrations/slack/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSlackConnection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSlackConnectionAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteSlackConnectionWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> DeleteSlackConnectionWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/2/integrations/slack/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSlackConnection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <returns></returns>
        public void DeleteTeamsConnection(int id)
        {
            DeleteTeamsConnectionWithHttpInfo(id);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> DeleteTeamsConnectionWithHttpInfo(int id)
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/2/integrations/teams/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTeamsConnection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTeamsConnectionAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteTeamsConnectionWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> DeleteTeamsConnectionWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/2/integrations/teams/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTeamsConnection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>List&lt;SlackConnection&gt;</returns>
        public List<SlackConnection> GetAllSlackConnections(string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.ApiResponse<List<SlackConnection>> localVarResponse = GetAllSlackConnectionsWithHttpInfo(ordering, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;SlackConnection&gt;</returns>
        public ElementsSDK.Client.ApiResponse<List<SlackConnection>> GetAllSlackConnectionsWithHttpInfo(string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SlackConnection>>("/api/2/integrations/slack", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllSlackConnections", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SlackConnection&gt;</returns>
        public async System.Threading.Tasks.Task<List<SlackConnection>> GetAllSlackConnectionsAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<List<SlackConnection>> localVarResponse = await GetAllSlackConnectionsWithHttpInfoAsync(ordering, limit, offset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SlackConnection&gt;)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<List<SlackConnection>>> GetAllSlackConnectionsWithHttpInfoAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SlackConnection>>("/api/2/integrations/slack", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllSlackConnections", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>List&lt;TeamsConnection&gt;</returns>
        public List<TeamsConnection> GetAllTeamsConnections(string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.ApiResponse<List<TeamsConnection>> localVarResponse = GetAllTeamsConnectionsWithHttpInfo(ordering, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;TeamsConnection&gt;</returns>
        public ElementsSDK.Client.ApiResponse<List<TeamsConnection>> GetAllTeamsConnectionsWithHttpInfo(string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TeamsConnection>>("/api/2/integrations/teams", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllTeamsConnections", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TeamsConnection&gt;</returns>
        public async System.Threading.Tasks.Task<List<TeamsConnection>> GetAllTeamsConnectionsAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<List<TeamsConnection>> localVarResponse = await GetAllTeamsConnectionsWithHttpInfoAsync(ordering, limit, offset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TeamsConnection&gt;)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<List<TeamsConnection>>> GetAllTeamsConnectionsWithHttpInfoAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TeamsConnection>>("/api/2/integrations/teams", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllTeamsConnections", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <returns>List&lt;SlackChannel&gt;</returns>
        public List<SlackChannel> GetSlackChannels(int id)
        {
            ElementsSDK.Client.ApiResponse<List<SlackChannel>> localVarResponse = GetSlackChannelsWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <returns>ApiResponse of List&lt;SlackChannel&gt;</returns>
        public ElementsSDK.Client.ApiResponse<List<SlackChannel>> GetSlackChannelsWithHttpInfo(int id)
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SlackChannel>>("/api/2/integrations/slack/{id}/channels", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSlackChannels", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SlackChannel&gt;</returns>
        public async System.Threading.Tasks.Task<List<SlackChannel>> GetSlackChannelsAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<List<SlackChannel>> localVarResponse = await GetSlackChannelsWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SlackChannel&gt;)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<List<SlackChannel>>> GetSlackChannelsWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SlackChannel>>("/api/2/integrations/slack/{id}/channels", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSlackChannels", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <returns>SlackConnection</returns>
        public SlackConnection GetSlackConnection(int id)
        {
            ElementsSDK.Client.ApiResponse<SlackConnection> localVarResponse = GetSlackConnectionWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <returns>ApiResponse of SlackConnection</returns>
        public ElementsSDK.Client.ApiResponse<SlackConnection> GetSlackConnectionWithHttpInfo(int id)
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SlackConnection>("/api/2/integrations/slack/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSlackConnection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SlackConnection</returns>
        public async System.Threading.Tasks.Task<SlackConnection> GetSlackConnectionAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<SlackConnection> localVarResponse = await GetSlackConnectionWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SlackConnection)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<SlackConnection>> GetSlackConnectionWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SlackConnection>("/api/2/integrations/slack/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSlackConnection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <returns>List&lt;SlackEmoji&gt;</returns>
        public List<SlackEmoji> GetSlackEmoji(int id)
        {
            ElementsSDK.Client.ApiResponse<List<SlackEmoji>> localVarResponse = GetSlackEmojiWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <returns>ApiResponse of List&lt;SlackEmoji&gt;</returns>
        public ElementsSDK.Client.ApiResponse<List<SlackEmoji>> GetSlackEmojiWithHttpInfo(int id)
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SlackEmoji>>("/api/2/integrations/slack/{id}/emoji", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSlackEmoji", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SlackEmoji&gt;</returns>
        public async System.Threading.Tasks.Task<List<SlackEmoji>> GetSlackEmojiAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<List<SlackEmoji>> localVarResponse = await GetSlackEmojiWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SlackEmoji&gt;)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<List<SlackEmoji>>> GetSlackEmojiWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SlackEmoji>>("/api/2/integrations/slack/{id}/emoji", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSlackEmoji", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <returns>List&lt;SlackUser&gt;</returns>
        public List<SlackUser> GetSlackUsers(int id)
        {
            ElementsSDK.Client.ApiResponse<List<SlackUser>> localVarResponse = GetSlackUsersWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <returns>ApiResponse of List&lt;SlackUser&gt;</returns>
        public ElementsSDK.Client.ApiResponse<List<SlackUser>> GetSlackUsersWithHttpInfo(int id)
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SlackUser>>("/api/2/integrations/slack/{id}/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSlackUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SlackUser&gt;</returns>
        public async System.Threading.Tasks.Task<List<SlackUser>> GetSlackUsersAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<List<SlackUser>> localVarResponse = await GetSlackUsersWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SlackUser&gt;)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<List<SlackUser>>> GetSlackUsersWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SlackUser>>("/api/2/integrations/slack/{id}/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSlackUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <returns>List&lt;TeamsRecipient&gt;</returns>
        public List<TeamsRecipient> GetTeamsChannels(int id)
        {
            ElementsSDK.Client.ApiResponse<List<TeamsRecipient>> localVarResponse = GetTeamsChannelsWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <returns>ApiResponse of List&lt;TeamsRecipient&gt;</returns>
        public ElementsSDK.Client.ApiResponse<List<TeamsRecipient>> GetTeamsChannelsWithHttpInfo(int id)
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TeamsRecipient>>("/api/2/integrations/teams/{id}/channels", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamsChannels", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TeamsRecipient&gt;</returns>
        public async System.Threading.Tasks.Task<List<TeamsRecipient>> GetTeamsChannelsAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<List<TeamsRecipient>> localVarResponse = await GetTeamsChannelsWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TeamsRecipient&gt;)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<List<TeamsRecipient>>> GetTeamsChannelsWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TeamsRecipient>>("/api/2/integrations/teams/{id}/channels", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamsChannels", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <returns>TeamsConnection</returns>
        public TeamsConnection GetTeamsConnection(int id)
        {
            ElementsSDK.Client.ApiResponse<TeamsConnection> localVarResponse = GetTeamsConnectionWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <returns>ApiResponse of TeamsConnection</returns>
        public ElementsSDK.Client.ApiResponse<TeamsConnection> GetTeamsConnectionWithHttpInfo(int id)
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TeamsConnection>("/api/2/integrations/teams/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamsConnection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TeamsConnection</returns>
        public async System.Threading.Tasks.Task<TeamsConnection> GetTeamsConnectionAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<TeamsConnection> localVarResponse = await GetTeamsConnectionWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TeamsConnection)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<TeamsConnection>> GetTeamsConnectionWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TeamsConnection>("/api/2/integrations/teams/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamsConnection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <returns>List&lt;TeamsRecipient&gt;</returns>
        public List<TeamsRecipient> GetTeamsUsers(int id)
        {
            ElementsSDK.Client.ApiResponse<List<TeamsRecipient>> localVarResponse = GetTeamsUsersWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <returns>ApiResponse of List&lt;TeamsRecipient&gt;</returns>
        public ElementsSDK.Client.ApiResponse<List<TeamsRecipient>> GetTeamsUsersWithHttpInfo(int id)
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TeamsRecipient>>("/api/2/integrations/teams/{id}/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamsUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TeamsRecipient&gt;</returns>
        public async System.Threading.Tasks.Task<List<TeamsRecipient>> GetTeamsUsersAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<List<TeamsRecipient>> localVarResponse = await GetTeamsUsersWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TeamsRecipient&gt;)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<List<TeamsRecipient>>> GetTeamsUsersWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TeamsRecipient>>("/api/2/integrations/teams/{id}/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeamsUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <param name="slackConnectionPartialUpdate"></param>
        /// <returns>SlackConnection</returns>
        public SlackConnection PatchSlackConnection(int id, SlackConnectionPartialUpdate slackConnectionPartialUpdate)
        {
            ElementsSDK.Client.ApiResponse<SlackConnection> localVarResponse = PatchSlackConnectionWithHttpInfo(id, slackConnectionPartialUpdate);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <param name="slackConnectionPartialUpdate"></param>
        /// <returns>ApiResponse of SlackConnection</returns>
        public ElementsSDK.Client.ApiResponse<SlackConnection> PatchSlackConnectionWithHttpInfo(int id, SlackConnectionPartialUpdate slackConnectionPartialUpdate)
        {
            // verify the required parameter 'slackConnectionPartialUpdate' is set
            if (slackConnectionPartialUpdate == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'slackConnectionPartialUpdate' when calling IntegrationsApi->PatchSlackConnection");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = slackConnectionPartialUpdate;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<SlackConnection>("/api/2/integrations/slack/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchSlackConnection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <param name="slackConnectionPartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SlackConnection</returns>
        public async System.Threading.Tasks.Task<SlackConnection> PatchSlackConnectionAsync(int id, SlackConnectionPartialUpdate slackConnectionPartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<SlackConnection> localVarResponse = await PatchSlackConnectionWithHttpInfoAsync(id, slackConnectionPartialUpdate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <param name="slackConnectionPartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SlackConnection)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<SlackConnection>> PatchSlackConnectionWithHttpInfoAsync(int id, SlackConnectionPartialUpdate slackConnectionPartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'slackConnectionPartialUpdate' is set
            if (slackConnectionPartialUpdate == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'slackConnectionPartialUpdate' when calling IntegrationsApi->PatchSlackConnection");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = slackConnectionPartialUpdate;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<SlackConnection>("/api/2/integrations/slack/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchSlackConnection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <param name="teamsConnectionPartialUpdate"></param>
        /// <returns>TeamsConnection</returns>
        public TeamsConnection PatchTeamsConnection(int id, TeamsConnectionPartialUpdate teamsConnectionPartialUpdate)
        {
            ElementsSDK.Client.ApiResponse<TeamsConnection> localVarResponse = PatchTeamsConnectionWithHttpInfo(id, teamsConnectionPartialUpdate);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <param name="teamsConnectionPartialUpdate"></param>
        /// <returns>ApiResponse of TeamsConnection</returns>
        public ElementsSDK.Client.ApiResponse<TeamsConnection> PatchTeamsConnectionWithHttpInfo(int id, TeamsConnectionPartialUpdate teamsConnectionPartialUpdate)
        {
            // verify the required parameter 'teamsConnectionPartialUpdate' is set
            if (teamsConnectionPartialUpdate == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'teamsConnectionPartialUpdate' when calling IntegrationsApi->PatchTeamsConnection");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = teamsConnectionPartialUpdate;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<TeamsConnection>("/api/2/integrations/teams/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchTeamsConnection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <param name="teamsConnectionPartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TeamsConnection</returns>
        public async System.Threading.Tasks.Task<TeamsConnection> PatchTeamsConnectionAsync(int id, TeamsConnectionPartialUpdate teamsConnectionPartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<TeamsConnection> localVarResponse = await PatchTeamsConnectionWithHttpInfoAsync(id, teamsConnectionPartialUpdate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <param name="teamsConnectionPartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TeamsConnection)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<TeamsConnection>> PatchTeamsConnectionWithHttpInfoAsync(int id, TeamsConnectionPartialUpdate teamsConnectionPartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'teamsConnectionPartialUpdate' is set
            if (teamsConnectionPartialUpdate == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'teamsConnectionPartialUpdate' when calling IntegrationsApi->PatchTeamsConnection");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = teamsConnectionPartialUpdate;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<TeamsConnection>("/api/2/integrations/teams/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchTeamsConnection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <param name="slackMessage"></param>
        /// <returns></returns>
        public void SendSlackMessage(int id, SlackMessage slackMessage)
        {
            SendSlackMessageWithHttpInfo(id, slackMessage);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <param name="slackMessage"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> SendSlackMessageWithHttpInfo(int id, SlackMessage slackMessage)
        {
            // verify the required parameter 'slackMessage' is set
            if (slackMessage == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'slackMessage' when calling IntegrationsApi->SendSlackMessage");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = slackMessage;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/2/integrations/slack/{id}/message", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendSlackMessage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <param name="slackMessage"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SendSlackMessageAsync(int id, SlackMessage slackMessage, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SendSlackMessageWithHttpInfoAsync(id, slackMessage, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <param name="slackMessage"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> SendSlackMessageWithHttpInfoAsync(int id, SlackMessage slackMessage, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'slackMessage' is set
            if (slackMessage == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'slackMessage' when calling IntegrationsApi->SendSlackMessage");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = slackMessage;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/2/integrations/slack/{id}/message", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendSlackMessage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <param name="teamsMessage"></param>
        /// <returns></returns>
        public void SendTeamsMessage(int id, TeamsMessage teamsMessage)
        {
            SendTeamsMessageWithHttpInfo(id, teamsMessage);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <param name="teamsMessage"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> SendTeamsMessageWithHttpInfo(int id, TeamsMessage teamsMessage)
        {
            // verify the required parameter 'teamsMessage' is set
            if (teamsMessage == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'teamsMessage' when calling IntegrationsApi->SendTeamsMessage");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = teamsMessage;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/2/integrations/teams/{id}/send-message", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendTeamsMessage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <param name="teamsMessage"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SendTeamsMessageAsync(int id, TeamsMessage teamsMessage, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SendTeamsMessageWithHttpInfoAsync(id, teamsMessage, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <param name="teamsMessage"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> SendTeamsMessageWithHttpInfoAsync(int id, TeamsMessage teamsMessage, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'teamsMessage' is set
            if (teamsMessage == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'teamsMessage' when calling IntegrationsApi->SendTeamsMessage");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = teamsMessage;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/2/integrations/teams/{id}/send-message", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendTeamsMessage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns></returns>
        public void StartSlackConnectionFlow(string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            StartSlackConnectionFlowWithHttpInfo(ordering, limit, offset);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> StartSlackConnectionFlowWithHttpInfo(string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/2/integrations/slack/connect", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartSlackConnectionFlow", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StartSlackConnectionFlowAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await StartSlackConnectionFlowWithHttpInfoAsync(ordering, limit, offset, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> StartSlackConnectionFlowWithHttpInfoAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/2/integrations/slack/connect", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartSlackConnectionFlow", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <returns></returns>
        public void StartSlackConnectionTokenRefreshFlow(int id)
        {
            StartSlackConnectionTokenRefreshFlowWithHttpInfo(id);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> StartSlackConnectionTokenRefreshFlowWithHttpInfo(int id)
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/2/integrations/slack/{id}/refresh-token", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartSlackConnectionTokenRefreshFlow", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StartSlackConnectionTokenRefreshFlowAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await StartSlackConnectionTokenRefreshFlowWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> StartSlackConnectionTokenRefreshFlowWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/2/integrations/slack/{id}/refresh-token", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartSlackConnectionTokenRefreshFlow", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="team"> (optional)</param>
        /// <returns></returns>
        public void StartTeamsConnectionFlow(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), string team = default(string))
        {
            StartTeamsConnectionFlowWithHttpInfo(ordering, limit, offset, team);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="team"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> StartTeamsConnectionFlowWithHttpInfo(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), string team = default(string))
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (team != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "team", team));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/2/integrations/teams/connect", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartTeamsConnectionFlow", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="team"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StartTeamsConnectionFlowAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), string team = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await StartTeamsConnectionFlowWithHttpInfoAsync(ordering, limit, offset, team, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="team"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> StartTeamsConnectionFlowWithHttpInfoAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), string team = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (team != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "team", team));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/2/integrations/teams/connect", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartTeamsConnectionFlow", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <param name="team"> (optional)</param>
        /// <returns></returns>
        public void StartTeamsConnectionTokenRefreshFlow(int id, string team = default(string))
        {
            StartTeamsConnectionTokenRefreshFlowWithHttpInfo(id, team);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <param name="team"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> StartTeamsConnectionTokenRefreshFlowWithHttpInfo(int id, string team = default(string))
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (team != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "team", team));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/2/integrations/teams/{id}/refresh-token", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartTeamsConnectionTokenRefreshFlow", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <param name="team"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StartTeamsConnectionTokenRefreshFlowAsync(int id, string team = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await StartTeamsConnectionTokenRefreshFlowWithHttpInfoAsync(id, team, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;system:admin-access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <param name="team"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> StartTeamsConnectionTokenRefreshFlowWithHttpInfoAsync(int id, string team = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (team != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "team", team));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/2/integrations/teams/{id}/refresh-token", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartTeamsConnectionTokenRefreshFlow", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <param name="slackConnection"></param>
        /// <returns>SlackConnection</returns>
        public SlackConnection UpdateSlackConnection(int id, SlackConnection slackConnection)
        {
            ElementsSDK.Client.ApiResponse<SlackConnection> localVarResponse = UpdateSlackConnectionWithHttpInfo(id, slackConnection);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <param name="slackConnection"></param>
        /// <returns>ApiResponse of SlackConnection</returns>
        public ElementsSDK.Client.ApiResponse<SlackConnection> UpdateSlackConnectionWithHttpInfo(int id, SlackConnection slackConnection)
        {
            // verify the required parameter 'slackConnection' is set
            if (slackConnection == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'slackConnection' when calling IntegrationsApi->UpdateSlackConnection");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = slackConnection;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<SlackConnection>("/api/2/integrations/slack/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSlackConnection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <param name="slackConnection"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SlackConnection</returns>
        public async System.Threading.Tasks.Task<SlackConnection> UpdateSlackConnectionAsync(int id, SlackConnection slackConnection, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<SlackConnection> localVarResponse = await UpdateSlackConnectionWithHttpInfoAsync(id, slackConnection, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Slack connection.</param>
        /// <param name="slackConnection"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SlackConnection)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<SlackConnection>> UpdateSlackConnectionWithHttpInfoAsync(int id, SlackConnection slackConnection, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'slackConnection' is set
            if (slackConnection == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'slackConnection' when calling IntegrationsApi->UpdateSlackConnection");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = slackConnection;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<SlackConnection>("/api/2/integrations/slack/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSlackConnection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <param name="teamsConnection"></param>
        /// <returns>TeamsConnection</returns>
        public TeamsConnection UpdateTeamsConnection(int id, TeamsConnection teamsConnection)
        {
            ElementsSDK.Client.ApiResponse<TeamsConnection> localVarResponse = UpdateTeamsConnectionWithHttpInfo(id, teamsConnection);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <param name="teamsConnection"></param>
        /// <returns>ApiResponse of TeamsConnection</returns>
        public ElementsSDK.Client.ApiResponse<TeamsConnection> UpdateTeamsConnectionWithHttpInfo(int id, TeamsConnection teamsConnection)
        {
            // verify the required parameter 'teamsConnection' is set
            if (teamsConnection == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'teamsConnection' when calling IntegrationsApi->UpdateTeamsConnection");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = teamsConnection;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<TeamsConnection>("/api/2/integrations/teams/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTeamsConnection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <param name="teamsConnection"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TeamsConnection</returns>
        public async System.Threading.Tasks.Task<TeamsConnection> UpdateTeamsConnectionAsync(int id, TeamsConnection teamsConnection, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<TeamsConnection> localVarResponse = await UpdateTeamsConnectionWithHttpInfoAsync(id, teamsConnection, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;system:admin-access&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Teams connection.</param>
        /// <param name="teamsConnection"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TeamsConnection)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<TeamsConnection>> UpdateTeamsConnectionWithHttpInfoAsync(int id, TeamsConnection teamsConnection, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'teamsConnection' is set
            if (teamsConnection == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'teamsConnection' when calling IntegrationsApi->UpdateTeamsConnection");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = teamsConnection;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<TeamsConnection>("/api/2/integrations/teams/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTeamsConnection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
