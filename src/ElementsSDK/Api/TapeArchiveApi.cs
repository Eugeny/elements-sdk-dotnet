/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ElementsSDK.Client;
using ElementsSDK.Model;

namespace ElementsSDK.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITapeArchiveApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:backup&#x60;   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archiveEndpointRequest"></param>
        /// <returns>List&lt;TapeJob&gt;</returns>
        List<TapeJob> ArchiveToTape(ArchiveEndpointRequest archiveEndpointRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:backup&#x60;   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archiveEndpointRequest"></param>
        /// <returns>ApiResponse of List&lt;TapeJob&gt;</returns>
        ApiResponse<List<TapeJob>> ArchiveToTapeWithHttpInfo(ArchiveEndpointRequest archiveEndpointRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void CancelAllTapeArchiveJobs();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CancelAllTapeArchiveJobsWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryFsckEndpointRequest"></param>
        /// <returns></returns>
        void CheckTape(TapeLibraryFsckEndpointRequest tapeLibraryFsckEndpointRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryFsckEndpointRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CheckTapeWithHttpInfo(TapeLibraryFsckEndpointRequest tapeLibraryFsckEndpointRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tape"></param>
        /// <returns>Tape</returns>
        Tape CreateTape(Tape tape);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tape"></param>
        /// <returns>ApiResponse of Tape</returns>
        ApiResponse<Tape> CreateTapeWithHttpInfo(Tape tape);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeGroup"></param>
        /// <returns>TapeGroup</returns>
        TapeGroup CreateTapeGroup(TapeGroup tapeGroup);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeGroup"></param>
        /// <returns>ApiResponse of TapeGroup</returns>
        ApiResponse<TapeGroup> CreateTapeGroupWithHttpInfo(TapeGroup tapeGroup);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape.</param>
        /// <returns></returns>
        void DeleteTape(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTapeWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteTapeArchiveJob(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTapeArchiveJobWithHttpInfo(string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape group.</param>
        /// <returns></returns>
        void DeleteTapeGroup(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape group.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTapeGroupWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryFormatEndpointRequest"></param>
        /// <returns></returns>
        void FormatTape(TapeLibraryFormatEndpointRequest tapeLibraryFormatEndpointRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryFormatEndpointRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FormatTapeWithHttpInfo(TapeLibraryFormatEndpointRequest tapeLibraryFormatEndpointRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:search&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="isDir">Filter the returned list by &#x60;is_dir&#x60;. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="fullpath">Filter the returned list by &#x60;fullpath&#x60;. (optional)</param>
        /// <param name="parent">Filter the returned list by &#x60;parent&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>List&lt;TapeFile&gt;</returns>
        List<TapeFile> GetAllArchivedFileEntries(decimal? id = default(decimal?), string isDir = default(string), string name = default(string), string fullpath = default(string), string parent = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:search&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="isDir">Filter the returned list by &#x60;is_dir&#x60;. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="fullpath">Filter the returned list by &#x60;fullpath&#x60;. (optional)</param>
        /// <param name="parent">Filter the returned list by &#x60;parent&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;TapeFile&gt;</returns>
        ApiResponse<List<TapeFile>> GetAllArchivedFileEntriesWithHttpInfo(decimal? id = default(decimal?), string isDir = default(string), string name = default(string), string fullpath = default(string), string parent = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>List&lt;TapeJob&gt;</returns>
        List<TapeJob> GetAllTapeArchiveJobs(string ordering = default(string), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;TapeJob&gt;</returns>
        ApiResponse<List<TapeJob>> GetAllTapeArchiveJobsWithHttpInfo(string ordering = default(string), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>List&lt;TapeGroup&gt;</returns>
        List<TapeGroup> GetAllTapeGroups(decimal? id = default(decimal?), string name = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;TapeGroup&gt;</returns>
        ApiResponse<List<TapeGroup>> GetAllTapeGroupsWithHttpInfo(decimal? id = default(decimal?), string name = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="group">Filter the returned list by &#x60;group&#x60;. (optional)</param>
        /// <param name="groupIsnull">Filter the returned list by &#x60;group__isnull&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>List&lt;Tape&gt;</returns>
        List<Tape> GetAllTapes(decimal? id = default(decimal?), string name = default(string), string group = default(string), string groupIsnull = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="group">Filter the returned list by &#x60;group&#x60;. (optional)</param>
        /// <param name="groupIsnull">Filter the returned list by &#x60;group__isnull&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;Tape&gt;</returns>
        ApiResponse<List<Tape>> GetAllTapesWithHttpInfo(decimal? id = default(decimal?), string name = default(string), string group = default(string), string groupIsnull = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:search&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Archived file entry.</param>
        /// <returns>TapeFile</returns>
        TapeFile GetArchivedFileEntry(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:search&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Archived file entry.</param>
        /// <returns>ApiResponse of TapeFile</returns>
        ApiResponse<TapeFile> GetArchivedFileEntryWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape.</param>
        /// <returns>Tape</returns>
        Tape GetTape(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape.</param>
        /// <returns>ApiResponse of Tape</returns>
        ApiResponse<Tape> GetTapeWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>TapeJob</returns>
        TapeJob GetTapeArchiveJob(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of TapeJob</returns>
        ApiResponse<TapeJob> GetTapeArchiveJobWithHttpInfo(string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>List&lt;TapeJobSource&gt;</returns>
        List<TapeJobSource> GetTapeArchiveJobSources(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of List&lt;TapeJobSource&gt;</returns>
        ApiResponse<List<TapeJobSource>> GetTapeArchiveJobSourcesWithHttpInfo(string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape group.</param>
        /// <returns>TapeGroup</returns>
        TapeGroup GetTapeGroup(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape group.</param>
        /// <returns>ApiResponse of TapeGroup</returns>
        ApiResponse<TapeGroup> GetTapeGroupWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TapeLibraryEndpointResponse</returns>
        TapeLibraryEndpointResponse GetTapeLibraryState();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TapeLibraryEndpointResponse</returns>
        ApiResponse<TapeLibraryEndpointResponse> GetTapeLibraryStateWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryLoadEndpointRequest"></param>
        /// <returns></returns>
        void LoadTape(TapeLibraryLoadEndpointRequest tapeLibraryLoadEndpointRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryLoadEndpointRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LoadTapeWithHttpInfo(TapeLibraryLoadEndpointRequest tapeLibraryLoadEndpointRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryMoveEndpointRequest"></param>
        /// <returns></returns>
        void MoveTape(TapeLibraryMoveEndpointRequest tapeLibraryMoveEndpointRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryMoveEndpointRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MoveTapeWithHttpInfo(TapeLibraryMoveEndpointRequest tapeLibraryMoveEndpointRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape.</param>
        /// <param name="tapePartialUpdate"></param>
        /// <returns>Tape</returns>
        Tape PatchTape(int id, TapePartialUpdate tapePartialUpdate);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape.</param>
        /// <param name="tapePartialUpdate"></param>
        /// <returns>ApiResponse of Tape</returns>
        ApiResponse<Tape> PatchTapeWithHttpInfo(int id, TapePartialUpdate tapePartialUpdate);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape group.</param>
        /// <param name="tapeGroupPartialUpdate"></param>
        /// <returns>TapeGroup</returns>
        TapeGroup PatchTapeGroup(int id, TapeGroupPartialUpdate tapeGroupPartialUpdate);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape group.</param>
        /// <param name="tapeGroupPartialUpdate"></param>
        /// <returns>ApiResponse of TapeGroup</returns>
        ApiResponse<TapeGroup> PatchTapeGroupWithHttpInfo(int id, TapeGroupPartialUpdate tapeGroupPartialUpdate);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void PauseTapeArchiveJob(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PauseTapeArchiveJobWithHttpInfo(string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void RefreshTapeLibraryState();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RefreshTapeLibraryStateWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryReindexEndpointRequest"></param>
        /// <returns></returns>
        void ReindexTape(TapeLibraryReindexEndpointRequest tapeLibraryReindexEndpointRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryReindexEndpointRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ReindexTapeWithHttpInfo(TapeLibraryReindexEndpointRequest tapeLibraryReindexEndpointRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void RemoveFinishedTapeArchiveJobs();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveFinishedTapeArchiveJobsWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void RestartTapeArchiveJob(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RestartTapeArchiveJobWithHttpInfo(string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:restore&#x60;   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="restoreEndpointRequest"></param>
        /// <returns>TapeJob</returns>
        TapeJob RestoreFromTape(RestoreEndpointRequest restoreEndpointRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:restore&#x60;   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="restoreEndpointRequest"></param>
        /// <returns>ApiResponse of TapeJob</returns>
        ApiResponse<TapeJob> RestoreFromTapeWithHttpInfo(RestoreEndpointRequest restoreEndpointRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void ResumeTapeArchiveJob(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ResumeTapeArchiveJobWithHttpInfo(string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:search&#x60;   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchEndpointRequest"></param>
        /// <returns>SearchEndpointResponse</returns>
        SearchEndpointResponse SearchTapeArchive(SearchEndpointRequest searchEndpointRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:search&#x60;   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchEndpointRequest"></param>
        /// <returns>ApiResponse of SearchEndpointResponse</returns>
        ApiResponse<SearchEndpointResponse> SearchTapeArchiveWithHttpInfo(SearchEndpointRequest searchEndpointRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryUnloadEndpointRequest"></param>
        /// <returns></returns>
        void UnloadTape(TapeLibraryUnloadEndpointRequest tapeLibraryUnloadEndpointRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryUnloadEndpointRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UnloadTapeWithHttpInfo(TapeLibraryUnloadEndpointRequest tapeLibraryUnloadEndpointRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape.</param>
        /// <param name="tape"></param>
        /// <returns>Tape</returns>
        Tape UpdateTape(int id, Tape tape);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape.</param>
        /// <param name="tape"></param>
        /// <returns>ApiResponse of Tape</returns>
        ApiResponse<Tape> UpdateTapeWithHttpInfo(int id, Tape tape);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape group.</param>
        /// <param name="tapeGroup"></param>
        /// <returns>TapeGroup</returns>
        TapeGroup UpdateTapeGroup(int id, TapeGroup tapeGroup);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape group.</param>
        /// <param name="tapeGroup"></param>
        /// <returns>ApiResponse of TapeGroup</returns>
        ApiResponse<TapeGroup> UpdateTapeGroupWithHttpInfo(int id, TapeGroup tapeGroup);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITapeArchiveApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:backup&#x60;   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archiveEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TapeJob&gt;</returns>
        System.Threading.Tasks.Task<List<TapeJob>> ArchiveToTapeAsync(ArchiveEndpointRequest archiveEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:backup&#x60;   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archiveEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TapeJob&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TapeJob>>> ArchiveToTapeWithHttpInfoAsync(ArchiveEndpointRequest archiveEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CancelAllTapeArchiveJobsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelAllTapeArchiveJobsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryFsckEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CheckTapeAsync(TapeLibraryFsckEndpointRequest tapeLibraryFsckEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryFsckEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CheckTapeWithHttpInfoAsync(TapeLibraryFsckEndpointRequest tapeLibraryFsckEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tape"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Tape</returns>
        System.Threading.Tasks.Task<Tape> CreateTapeAsync(Tape tape, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tape"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Tape)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tape>> CreateTapeWithHttpInfoAsync(Tape tape, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeGroup"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TapeGroup</returns>
        System.Threading.Tasks.Task<TapeGroup> CreateTapeGroupAsync(TapeGroup tapeGroup, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeGroup"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TapeGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<TapeGroup>> CreateTapeGroupWithHttpInfoAsync(TapeGroup tapeGroup, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTapeAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTapeWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTapeArchiveJobAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTapeArchiveJobWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTapeGroupAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTapeGroupWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryFormatEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FormatTapeAsync(TapeLibraryFormatEndpointRequest tapeLibraryFormatEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryFormatEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FormatTapeWithHttpInfoAsync(TapeLibraryFormatEndpointRequest tapeLibraryFormatEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:search&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="isDir">Filter the returned list by &#x60;is_dir&#x60;. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="fullpath">Filter the returned list by &#x60;fullpath&#x60;. (optional)</param>
        /// <param name="parent">Filter the returned list by &#x60;parent&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TapeFile&gt;</returns>
        System.Threading.Tasks.Task<List<TapeFile>> GetAllArchivedFileEntriesAsync(decimal? id = default(decimal?), string isDir = default(string), string name = default(string), string fullpath = default(string), string parent = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:search&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="isDir">Filter the returned list by &#x60;is_dir&#x60;. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="fullpath">Filter the returned list by &#x60;fullpath&#x60;. (optional)</param>
        /// <param name="parent">Filter the returned list by &#x60;parent&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TapeFile&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TapeFile>>> GetAllArchivedFileEntriesWithHttpInfoAsync(decimal? id = default(decimal?), string isDir = default(string), string name = default(string), string fullpath = default(string), string parent = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TapeJob&gt;</returns>
        System.Threading.Tasks.Task<List<TapeJob>> GetAllTapeArchiveJobsAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TapeJob&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TapeJob>>> GetAllTapeArchiveJobsWithHttpInfoAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TapeGroup&gt;</returns>
        System.Threading.Tasks.Task<List<TapeGroup>> GetAllTapeGroupsAsync(decimal? id = default(decimal?), string name = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TapeGroup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TapeGroup>>> GetAllTapeGroupsWithHttpInfoAsync(decimal? id = default(decimal?), string name = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="group">Filter the returned list by &#x60;group&#x60;. (optional)</param>
        /// <param name="groupIsnull">Filter the returned list by &#x60;group__isnull&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Tape&gt;</returns>
        System.Threading.Tasks.Task<List<Tape>> GetAllTapesAsync(decimal? id = default(decimal?), string name = default(string), string group = default(string), string groupIsnull = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="group">Filter the returned list by &#x60;group&#x60;. (optional)</param>
        /// <param name="groupIsnull">Filter the returned list by &#x60;group__isnull&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Tape&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Tape>>> GetAllTapesWithHttpInfoAsync(decimal? id = default(decimal?), string name = default(string), string group = default(string), string groupIsnull = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:search&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Archived file entry.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TapeFile</returns>
        System.Threading.Tasks.Task<TapeFile> GetArchivedFileEntryAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:search&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Archived file entry.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TapeFile)</returns>
        System.Threading.Tasks.Task<ApiResponse<TapeFile>> GetArchivedFileEntryWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Tape</returns>
        System.Threading.Tasks.Task<Tape> GetTapeAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Tape)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tape>> GetTapeWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TapeJob</returns>
        System.Threading.Tasks.Task<TapeJob> GetTapeArchiveJobAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TapeJob)</returns>
        System.Threading.Tasks.Task<ApiResponse<TapeJob>> GetTapeArchiveJobWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TapeJobSource&gt;</returns>
        System.Threading.Tasks.Task<List<TapeJobSource>> GetTapeArchiveJobSourcesAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TapeJobSource&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TapeJobSource>>> GetTapeArchiveJobSourcesWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TapeGroup</returns>
        System.Threading.Tasks.Task<TapeGroup> GetTapeGroupAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TapeGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<TapeGroup>> GetTapeGroupWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TapeLibraryEndpointResponse</returns>
        System.Threading.Tasks.Task<TapeLibraryEndpointResponse> GetTapeLibraryStateAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TapeLibraryEndpointResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TapeLibraryEndpointResponse>> GetTapeLibraryStateWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryLoadEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LoadTapeAsync(TapeLibraryLoadEndpointRequest tapeLibraryLoadEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryLoadEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LoadTapeWithHttpInfoAsync(TapeLibraryLoadEndpointRequest tapeLibraryLoadEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryMoveEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MoveTapeAsync(TapeLibraryMoveEndpointRequest tapeLibraryMoveEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryMoveEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MoveTapeWithHttpInfoAsync(TapeLibraryMoveEndpointRequest tapeLibraryMoveEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape.</param>
        /// <param name="tapePartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Tape</returns>
        System.Threading.Tasks.Task<Tape> PatchTapeAsync(int id, TapePartialUpdate tapePartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape.</param>
        /// <param name="tapePartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Tape)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tape>> PatchTapeWithHttpInfoAsync(int id, TapePartialUpdate tapePartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape group.</param>
        /// <param name="tapeGroupPartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TapeGroup</returns>
        System.Threading.Tasks.Task<TapeGroup> PatchTapeGroupAsync(int id, TapeGroupPartialUpdate tapeGroupPartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape group.</param>
        /// <param name="tapeGroupPartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TapeGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<TapeGroup>> PatchTapeGroupWithHttpInfoAsync(int id, TapeGroupPartialUpdate tapeGroupPartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PauseTapeArchiveJobAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PauseTapeArchiveJobWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RefreshTapeLibraryStateAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RefreshTapeLibraryStateWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryReindexEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ReindexTapeAsync(TapeLibraryReindexEndpointRequest tapeLibraryReindexEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryReindexEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReindexTapeWithHttpInfoAsync(TapeLibraryReindexEndpointRequest tapeLibraryReindexEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveFinishedTapeArchiveJobsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveFinishedTapeArchiveJobsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RestartTapeArchiveJobAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RestartTapeArchiveJobWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:restore&#x60;   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="restoreEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TapeJob</returns>
        System.Threading.Tasks.Task<TapeJob> RestoreFromTapeAsync(RestoreEndpointRequest restoreEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:restore&#x60;   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="restoreEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TapeJob)</returns>
        System.Threading.Tasks.Task<ApiResponse<TapeJob>> RestoreFromTapeWithHttpInfoAsync(RestoreEndpointRequest restoreEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ResumeTapeArchiveJobAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ResumeTapeArchiveJobWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:search&#x60;   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchEndpointResponse</returns>
        System.Threading.Tasks.Task<SearchEndpointResponse> SearchTapeArchiveAsync(SearchEndpointRequest searchEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:search&#x60;   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchEndpointResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchEndpointResponse>> SearchTapeArchiveWithHttpInfoAsync(SearchEndpointRequest searchEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryUnloadEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnloadTapeAsync(TapeLibraryUnloadEndpointRequest tapeLibraryUnloadEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryUnloadEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnloadTapeWithHttpInfoAsync(TapeLibraryUnloadEndpointRequest tapeLibraryUnloadEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape.</param>
        /// <param name="tape"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Tape</returns>
        System.Threading.Tasks.Task<Tape> UpdateTapeAsync(int id, Tape tape, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape.</param>
        /// <param name="tape"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Tape)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tape>> UpdateTapeWithHttpInfoAsync(int id, Tape tape, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape group.</param>
        /// <param name="tapeGroup"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TapeGroup</returns>
        System.Threading.Tasks.Task<TapeGroup> UpdateTapeGroupAsync(int id, TapeGroup tapeGroup, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape group.</param>
        /// <param name="tapeGroup"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TapeGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<TapeGroup>> UpdateTapeGroupWithHttpInfoAsync(int id, TapeGroup tapeGroup, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITapeArchiveApi : ITapeArchiveApiSync, ITapeArchiveApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TapeArchiveApi : ITapeArchiveApi
    {
        private ElementsSDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TapeArchiveApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TapeArchiveApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TapeArchiveApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TapeArchiveApi(String basePath)
        {
            this.Configuration = ElementsSDK.Client.Configuration.MergeConfigurations(
                ElementsSDK.Client.GlobalConfiguration.Instance,
                new ElementsSDK.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ElementsSDK.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ElementsSDK.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ElementsSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TapeArchiveApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TapeArchiveApi(ElementsSDK.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ElementsSDK.Client.Configuration.MergeConfigurations(
                ElementsSDK.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ElementsSDK.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ElementsSDK.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ElementsSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TapeArchiveApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TapeArchiveApi(ElementsSDK.Client.ISynchronousClient client, ElementsSDK.Client.IAsynchronousClient asyncClient, ElementsSDK.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ElementsSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ElementsSDK.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ElementsSDK.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ElementsSDK.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ElementsSDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:backup&#x60;   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archiveEndpointRequest"></param>
        /// <returns>List&lt;TapeJob&gt;</returns>
        public List<TapeJob> ArchiveToTape(ArchiveEndpointRequest archiveEndpointRequest)
        {
            ElementsSDK.Client.ApiResponse<List<TapeJob>> localVarResponse = ArchiveToTapeWithHttpInfo(archiveEndpointRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:backup&#x60;   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archiveEndpointRequest"></param>
        /// <returns>ApiResponse of List&lt;TapeJob&gt;</returns>
        public ElementsSDK.Client.ApiResponse<List<TapeJob>> ArchiveToTapeWithHttpInfo(ArchiveEndpointRequest archiveEndpointRequest)
        {
            // verify the required parameter 'archiveEndpointRequest' is set
            if (archiveEndpointRequest == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'archiveEndpointRequest' when calling TapeArchiveApi->ArchiveToTape");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = archiveEndpointRequest;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<TapeJob>>("/api/2/archive/tape/archive", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArchiveToTape", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:backup&#x60;   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archiveEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TapeJob&gt;</returns>
        public async System.Threading.Tasks.Task<List<TapeJob>> ArchiveToTapeAsync(ArchiveEndpointRequest archiveEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<List<TapeJob>> localVarResponse = await ArchiveToTapeWithHttpInfoAsync(archiveEndpointRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:backup&#x60;   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archiveEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TapeJob&gt;)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<List<TapeJob>>> ArchiveToTapeWithHttpInfoAsync(ArchiveEndpointRequest archiveEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'archiveEndpointRequest' is set
            if (archiveEndpointRequest == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'archiveEndpointRequest' when calling TapeArchiveApi->ArchiveToTape");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = archiveEndpointRequest;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<TapeJob>>("/api/2/archive/tape/archive", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArchiveToTape", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void CancelAllTapeArchiveJobs()
        {
            CancelAllTapeArchiveJobsWithHttpInfo();
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> CancelAllTapeArchiveJobsWithHttpInfo()
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/2/archive/tape/jobs/cancel-all", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelAllTapeArchiveJobs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CancelAllTapeArchiveJobsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CancelAllTapeArchiveJobsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> CancelAllTapeArchiveJobsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/2/archive/tape/jobs/cancel-all", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelAllTapeArchiveJobs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryFsckEndpointRequest"></param>
        /// <returns></returns>
        public void CheckTape(TapeLibraryFsckEndpointRequest tapeLibraryFsckEndpointRequest)
        {
            CheckTapeWithHttpInfo(tapeLibraryFsckEndpointRequest);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryFsckEndpointRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> CheckTapeWithHttpInfo(TapeLibraryFsckEndpointRequest tapeLibraryFsckEndpointRequest)
        {
            // verify the required parameter 'tapeLibraryFsckEndpointRequest' is set
            if (tapeLibraryFsckEndpointRequest == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'tapeLibraryFsckEndpointRequest' when calling TapeArchiveApi->CheckTape");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = tapeLibraryFsckEndpointRequest;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/2/archive/tape/library/check", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckTape", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryFsckEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CheckTapeAsync(TapeLibraryFsckEndpointRequest tapeLibraryFsckEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CheckTapeWithHttpInfoAsync(tapeLibraryFsckEndpointRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryFsckEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> CheckTapeWithHttpInfoAsync(TapeLibraryFsckEndpointRequest tapeLibraryFsckEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tapeLibraryFsckEndpointRequest' is set
            if (tapeLibraryFsckEndpointRequest == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'tapeLibraryFsckEndpointRequest' when calling TapeArchiveApi->CheckTape");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = tapeLibraryFsckEndpointRequest;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/2/archive/tape/library/check", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckTape", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tape"></param>
        /// <returns>Tape</returns>
        public Tape CreateTape(Tape tape)
        {
            ElementsSDK.Client.ApiResponse<Tape> localVarResponse = CreateTapeWithHttpInfo(tape);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tape"></param>
        /// <returns>ApiResponse of Tape</returns>
        public ElementsSDK.Client.ApiResponse<Tape> CreateTapeWithHttpInfo(Tape tape)
        {
            // verify the required parameter 'tape' is set
            if (tape == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'tape' when calling TapeArchiveApi->CreateTape");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = tape;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Tape>("/api/2/archive/tape/tapes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTape", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tape"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Tape</returns>
        public async System.Threading.Tasks.Task<Tape> CreateTapeAsync(Tape tape, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<Tape> localVarResponse = await CreateTapeWithHttpInfoAsync(tape, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tape"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Tape)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Tape>> CreateTapeWithHttpInfoAsync(Tape tape, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tape' is set
            if (tape == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'tape' when calling TapeArchiveApi->CreateTape");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = tape;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Tape>("/api/2/archive/tape/tapes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTape", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeGroup"></param>
        /// <returns>TapeGroup</returns>
        public TapeGroup CreateTapeGroup(TapeGroup tapeGroup)
        {
            ElementsSDK.Client.ApiResponse<TapeGroup> localVarResponse = CreateTapeGroupWithHttpInfo(tapeGroup);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeGroup"></param>
        /// <returns>ApiResponse of TapeGroup</returns>
        public ElementsSDK.Client.ApiResponse<TapeGroup> CreateTapeGroupWithHttpInfo(TapeGroup tapeGroup)
        {
            // verify the required parameter 'tapeGroup' is set
            if (tapeGroup == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'tapeGroup' when calling TapeArchiveApi->CreateTapeGroup");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = tapeGroup;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TapeGroup>("/api/2/archive/tape/groups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTapeGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeGroup"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TapeGroup</returns>
        public async System.Threading.Tasks.Task<TapeGroup> CreateTapeGroupAsync(TapeGroup tapeGroup, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<TapeGroup> localVarResponse = await CreateTapeGroupWithHttpInfoAsync(tapeGroup, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeGroup"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TapeGroup)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<TapeGroup>> CreateTapeGroupWithHttpInfoAsync(TapeGroup tapeGroup, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tapeGroup' is set
            if (tapeGroup == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'tapeGroup' when calling TapeArchiveApi->CreateTapeGroup");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = tapeGroup;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TapeGroup>("/api/2/archive/tape/groups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTapeGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape.</param>
        /// <returns></returns>
        public void DeleteTape(int id)
        {
            DeleteTapeWithHttpInfo(id);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> DeleteTapeWithHttpInfo(int id)
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/2/archive/tape/tapes/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTape", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTapeAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteTapeWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> DeleteTapeWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/2/archive/tape/tapes/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTape", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteTapeArchiveJob(string id)
        {
            DeleteTapeArchiveJobWithHttpInfo(id);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> DeleteTapeArchiveJobWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'id' when calling TapeArchiveApi->DeleteTapeArchiveJob");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/2/archive/tape/jobs/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTapeArchiveJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTapeArchiveJobAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteTapeArchiveJobWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> DeleteTapeArchiveJobWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'id' when calling TapeArchiveApi->DeleteTapeArchiveJob");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/2/archive/tape/jobs/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTapeArchiveJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape group.</param>
        /// <returns></returns>
        public void DeleteTapeGroup(int id)
        {
            DeleteTapeGroupWithHttpInfo(id);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape group.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> DeleteTapeGroupWithHttpInfo(int id)
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/2/archive/tape/groups/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTapeGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTapeGroupAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteTapeGroupWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> DeleteTapeGroupWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/2/archive/tape/groups/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTapeGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryFormatEndpointRequest"></param>
        /// <returns></returns>
        public void FormatTape(TapeLibraryFormatEndpointRequest tapeLibraryFormatEndpointRequest)
        {
            FormatTapeWithHttpInfo(tapeLibraryFormatEndpointRequest);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryFormatEndpointRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> FormatTapeWithHttpInfo(TapeLibraryFormatEndpointRequest tapeLibraryFormatEndpointRequest)
        {
            // verify the required parameter 'tapeLibraryFormatEndpointRequest' is set
            if (tapeLibraryFormatEndpointRequest == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'tapeLibraryFormatEndpointRequest' when calling TapeArchiveApi->FormatTape");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = tapeLibraryFormatEndpointRequest;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/2/archive/tape/library/format", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FormatTape", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryFormatEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FormatTapeAsync(TapeLibraryFormatEndpointRequest tapeLibraryFormatEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await FormatTapeWithHttpInfoAsync(tapeLibraryFormatEndpointRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryFormatEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> FormatTapeWithHttpInfoAsync(TapeLibraryFormatEndpointRequest tapeLibraryFormatEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tapeLibraryFormatEndpointRequest' is set
            if (tapeLibraryFormatEndpointRequest == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'tapeLibraryFormatEndpointRequest' when calling TapeArchiveApi->FormatTape");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = tapeLibraryFormatEndpointRequest;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/2/archive/tape/library/format", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FormatTape", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:search&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="isDir">Filter the returned list by &#x60;is_dir&#x60;. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="fullpath">Filter the returned list by &#x60;fullpath&#x60;. (optional)</param>
        /// <param name="parent">Filter the returned list by &#x60;parent&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>List&lt;TapeFile&gt;</returns>
        public List<TapeFile> GetAllArchivedFileEntries(decimal? id = default(decimal?), string isDir = default(string), string name = default(string), string fullpath = default(string), string parent = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.ApiResponse<List<TapeFile>> localVarResponse = GetAllArchivedFileEntriesWithHttpInfo(id, isDir, name, fullpath, parent, ordering, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:search&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="isDir">Filter the returned list by &#x60;is_dir&#x60;. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="fullpath">Filter the returned list by &#x60;fullpath&#x60;. (optional)</param>
        /// <param name="parent">Filter the returned list by &#x60;parent&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;TapeFile&gt;</returns>
        public ElementsSDK.Client.ApiResponse<List<TapeFile>> GetAllArchivedFileEntriesWithHttpInfo(decimal? id = default(decimal?), string isDir = default(string), string name = default(string), string fullpath = default(string), string parent = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (isDir != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "is_dir", isDir));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (fullpath != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "fullpath", fullpath));
            }
            if (parent != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "parent", parent));
            }
            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TapeFile>>("/api/2/archive/tape/files", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllArchivedFileEntries", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:search&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="isDir">Filter the returned list by &#x60;is_dir&#x60;. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="fullpath">Filter the returned list by &#x60;fullpath&#x60;. (optional)</param>
        /// <param name="parent">Filter the returned list by &#x60;parent&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TapeFile&gt;</returns>
        public async System.Threading.Tasks.Task<List<TapeFile>> GetAllArchivedFileEntriesAsync(decimal? id = default(decimal?), string isDir = default(string), string name = default(string), string fullpath = default(string), string parent = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<List<TapeFile>> localVarResponse = await GetAllArchivedFileEntriesWithHttpInfoAsync(id, isDir, name, fullpath, parent, ordering, limit, offset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:search&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="isDir">Filter the returned list by &#x60;is_dir&#x60;. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="fullpath">Filter the returned list by &#x60;fullpath&#x60;. (optional)</param>
        /// <param name="parent">Filter the returned list by &#x60;parent&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TapeFile&gt;)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<List<TapeFile>>> GetAllArchivedFileEntriesWithHttpInfoAsync(decimal? id = default(decimal?), string isDir = default(string), string name = default(string), string fullpath = default(string), string parent = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (isDir != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "is_dir", isDir));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (fullpath != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "fullpath", fullpath));
            }
            if (parent != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "parent", parent));
            }
            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TapeFile>>("/api/2/archive/tape/files", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllArchivedFileEntries", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>List&lt;TapeJob&gt;</returns>
        public List<TapeJob> GetAllTapeArchiveJobs(string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.ApiResponse<List<TapeJob>> localVarResponse = GetAllTapeArchiveJobsWithHttpInfo(ordering, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;TapeJob&gt;</returns>
        public ElementsSDK.Client.ApiResponse<List<TapeJob>> GetAllTapeArchiveJobsWithHttpInfo(string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TapeJob>>("/api/2/archive/tape/jobs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllTapeArchiveJobs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TapeJob&gt;</returns>
        public async System.Threading.Tasks.Task<List<TapeJob>> GetAllTapeArchiveJobsAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<List<TapeJob>> localVarResponse = await GetAllTapeArchiveJobsWithHttpInfoAsync(ordering, limit, offset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TapeJob&gt;)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<List<TapeJob>>> GetAllTapeArchiveJobsWithHttpInfoAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TapeJob>>("/api/2/archive/tape/jobs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllTapeArchiveJobs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>List&lt;TapeGroup&gt;</returns>
        public List<TapeGroup> GetAllTapeGroups(decimal? id = default(decimal?), string name = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.ApiResponse<List<TapeGroup>> localVarResponse = GetAllTapeGroupsWithHttpInfo(id, name, ordering, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;TapeGroup&gt;</returns>
        public ElementsSDK.Client.ApiResponse<List<TapeGroup>> GetAllTapeGroupsWithHttpInfo(decimal? id = default(decimal?), string name = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TapeGroup>>("/api/2/archive/tape/groups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllTapeGroups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TapeGroup&gt;</returns>
        public async System.Threading.Tasks.Task<List<TapeGroup>> GetAllTapeGroupsAsync(decimal? id = default(decimal?), string name = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<List<TapeGroup>> localVarResponse = await GetAllTapeGroupsWithHttpInfoAsync(id, name, ordering, limit, offset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TapeGroup&gt;)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<List<TapeGroup>>> GetAllTapeGroupsWithHttpInfoAsync(decimal? id = default(decimal?), string name = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TapeGroup>>("/api/2/archive/tape/groups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllTapeGroups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="group">Filter the returned list by &#x60;group&#x60;. (optional)</param>
        /// <param name="groupIsnull">Filter the returned list by &#x60;group__isnull&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>List&lt;Tape&gt;</returns>
        public List<Tape> GetAllTapes(decimal? id = default(decimal?), string name = default(string), string group = default(string), string groupIsnull = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.ApiResponse<List<Tape>> localVarResponse = GetAllTapesWithHttpInfo(id, name, group, groupIsnull, ordering, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="group">Filter the returned list by &#x60;group&#x60;. (optional)</param>
        /// <param name="groupIsnull">Filter the returned list by &#x60;group__isnull&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;Tape&gt;</returns>
        public ElementsSDK.Client.ApiResponse<List<Tape>> GetAllTapesWithHttpInfo(decimal? id = default(decimal?), string name = default(string), string group = default(string), string groupIsnull = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (group != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "group", group));
            }
            if (groupIsnull != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "group__isnull", groupIsnull));
            }
            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Tape>>("/api/2/archive/tape/tapes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllTapes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="group">Filter the returned list by &#x60;group&#x60;. (optional)</param>
        /// <param name="groupIsnull">Filter the returned list by &#x60;group__isnull&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Tape&gt;</returns>
        public async System.Threading.Tasks.Task<List<Tape>> GetAllTapesAsync(decimal? id = default(decimal?), string name = default(string), string group = default(string), string groupIsnull = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<List<Tape>> localVarResponse = await GetAllTapesWithHttpInfoAsync(id, name, group, groupIsnull, ordering, limit, offset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="group">Filter the returned list by &#x60;group&#x60;. (optional)</param>
        /// <param name="groupIsnull">Filter the returned list by &#x60;group__isnull&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Tape&gt;)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<List<Tape>>> GetAllTapesWithHttpInfoAsync(decimal? id = default(decimal?), string name = default(string), string group = default(string), string groupIsnull = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (group != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "group", group));
            }
            if (groupIsnull != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "group__isnull", groupIsnull));
            }
            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Tape>>("/api/2/archive/tape/tapes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllTapes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:search&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Archived file entry.</param>
        /// <returns>TapeFile</returns>
        public TapeFile GetArchivedFileEntry(int id)
        {
            ElementsSDK.Client.ApiResponse<TapeFile> localVarResponse = GetArchivedFileEntryWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:search&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Archived file entry.</param>
        /// <returns>ApiResponse of TapeFile</returns>
        public ElementsSDK.Client.ApiResponse<TapeFile> GetArchivedFileEntryWithHttpInfo(int id)
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TapeFile>("/api/2/archive/tape/files/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetArchivedFileEntry", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:search&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Archived file entry.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TapeFile</returns>
        public async System.Threading.Tasks.Task<TapeFile> GetArchivedFileEntryAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<TapeFile> localVarResponse = await GetArchivedFileEntryWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:search&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Archived file entry.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TapeFile)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<TapeFile>> GetArchivedFileEntryWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TapeFile>("/api/2/archive/tape/files/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetArchivedFileEntry", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape.</param>
        /// <returns>Tape</returns>
        public Tape GetTape(int id)
        {
            ElementsSDK.Client.ApiResponse<Tape> localVarResponse = GetTapeWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape.</param>
        /// <returns>ApiResponse of Tape</returns>
        public ElementsSDK.Client.ApiResponse<Tape> GetTapeWithHttpInfo(int id)
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Tape>("/api/2/archive/tape/tapes/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTape", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Tape</returns>
        public async System.Threading.Tasks.Task<Tape> GetTapeAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<Tape> localVarResponse = await GetTapeWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Tape)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Tape>> GetTapeWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Tape>("/api/2/archive/tape/tapes/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTape", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>TapeJob</returns>
        public TapeJob GetTapeArchiveJob(string id)
        {
            ElementsSDK.Client.ApiResponse<TapeJob> localVarResponse = GetTapeArchiveJobWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of TapeJob</returns>
        public ElementsSDK.Client.ApiResponse<TapeJob> GetTapeArchiveJobWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'id' when calling TapeArchiveApi->GetTapeArchiveJob");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TapeJob>("/api/2/archive/tape/jobs/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTapeArchiveJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TapeJob</returns>
        public async System.Threading.Tasks.Task<TapeJob> GetTapeArchiveJobAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<TapeJob> localVarResponse = await GetTapeArchiveJobWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TapeJob)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<TapeJob>> GetTapeArchiveJobWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'id' when calling TapeArchiveApi->GetTapeArchiveJob");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TapeJob>("/api/2/archive/tape/jobs/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTapeArchiveJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>List&lt;TapeJobSource&gt;</returns>
        public List<TapeJobSource> GetTapeArchiveJobSources(string id)
        {
            ElementsSDK.Client.ApiResponse<List<TapeJobSource>> localVarResponse = GetTapeArchiveJobSourcesWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of List&lt;TapeJobSource&gt;</returns>
        public ElementsSDK.Client.ApiResponse<List<TapeJobSource>> GetTapeArchiveJobSourcesWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'id' when calling TapeArchiveApi->GetTapeArchiveJobSources");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TapeJobSource>>("/api/2/archive/tape/jobs/{id}/sources", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTapeArchiveJobSources", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TapeJobSource&gt;</returns>
        public async System.Threading.Tasks.Task<List<TapeJobSource>> GetTapeArchiveJobSourcesAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<List<TapeJobSource>> localVarResponse = await GetTapeArchiveJobSourcesWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TapeJobSource&gt;)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<List<TapeJobSource>>> GetTapeArchiveJobSourcesWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'id' when calling TapeArchiveApi->GetTapeArchiveJobSources");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TapeJobSource>>("/api/2/archive/tape/jobs/{id}/sources", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTapeArchiveJobSources", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape group.</param>
        /// <returns>TapeGroup</returns>
        public TapeGroup GetTapeGroup(int id)
        {
            ElementsSDK.Client.ApiResponse<TapeGroup> localVarResponse = GetTapeGroupWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape group.</param>
        /// <returns>ApiResponse of TapeGroup</returns>
        public ElementsSDK.Client.ApiResponse<TapeGroup> GetTapeGroupWithHttpInfo(int id)
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TapeGroup>("/api/2/archive/tape/groups/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTapeGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TapeGroup</returns>
        public async System.Threading.Tasks.Task<TapeGroup> GetTapeGroupAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<TapeGroup> localVarResponse = await GetTapeGroupWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TapeGroup)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<TapeGroup>> GetTapeGroupWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TapeGroup>("/api/2/archive/tape/groups/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTapeGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TapeLibraryEndpointResponse</returns>
        public TapeLibraryEndpointResponse GetTapeLibraryState()
        {
            ElementsSDK.Client.ApiResponse<TapeLibraryEndpointResponse> localVarResponse = GetTapeLibraryStateWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TapeLibraryEndpointResponse</returns>
        public ElementsSDK.Client.ApiResponse<TapeLibraryEndpointResponse> GetTapeLibraryStateWithHttpInfo()
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TapeLibraryEndpointResponse>("/api/2/archive/tape/library", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTapeLibraryState", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TapeLibraryEndpointResponse</returns>
        public async System.Threading.Tasks.Task<TapeLibraryEndpointResponse> GetTapeLibraryStateAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<TapeLibraryEndpointResponse> localVarResponse = await GetTapeLibraryStateWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TapeLibraryEndpointResponse)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<TapeLibraryEndpointResponse>> GetTapeLibraryStateWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TapeLibraryEndpointResponse>("/api/2/archive/tape/library", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTapeLibraryState", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryLoadEndpointRequest"></param>
        /// <returns></returns>
        public void LoadTape(TapeLibraryLoadEndpointRequest tapeLibraryLoadEndpointRequest)
        {
            LoadTapeWithHttpInfo(tapeLibraryLoadEndpointRequest);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryLoadEndpointRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> LoadTapeWithHttpInfo(TapeLibraryLoadEndpointRequest tapeLibraryLoadEndpointRequest)
        {
            // verify the required parameter 'tapeLibraryLoadEndpointRequest' is set
            if (tapeLibraryLoadEndpointRequest == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'tapeLibraryLoadEndpointRequest' when calling TapeArchiveApi->LoadTape");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = tapeLibraryLoadEndpointRequest;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/2/archive/tape/library/load", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LoadTape", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryLoadEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LoadTapeAsync(TapeLibraryLoadEndpointRequest tapeLibraryLoadEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await LoadTapeWithHttpInfoAsync(tapeLibraryLoadEndpointRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryLoadEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> LoadTapeWithHttpInfoAsync(TapeLibraryLoadEndpointRequest tapeLibraryLoadEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tapeLibraryLoadEndpointRequest' is set
            if (tapeLibraryLoadEndpointRequest == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'tapeLibraryLoadEndpointRequest' when calling TapeArchiveApi->LoadTape");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = tapeLibraryLoadEndpointRequest;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/2/archive/tape/library/load", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LoadTape", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryMoveEndpointRequest"></param>
        /// <returns></returns>
        public void MoveTape(TapeLibraryMoveEndpointRequest tapeLibraryMoveEndpointRequest)
        {
            MoveTapeWithHttpInfo(tapeLibraryMoveEndpointRequest);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryMoveEndpointRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> MoveTapeWithHttpInfo(TapeLibraryMoveEndpointRequest tapeLibraryMoveEndpointRequest)
        {
            // verify the required parameter 'tapeLibraryMoveEndpointRequest' is set
            if (tapeLibraryMoveEndpointRequest == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'tapeLibraryMoveEndpointRequest' when calling TapeArchiveApi->MoveTape");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = tapeLibraryMoveEndpointRequest;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/2/archive/tape/library/move", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MoveTape", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryMoveEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MoveTapeAsync(TapeLibraryMoveEndpointRequest tapeLibraryMoveEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await MoveTapeWithHttpInfoAsync(tapeLibraryMoveEndpointRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryMoveEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> MoveTapeWithHttpInfoAsync(TapeLibraryMoveEndpointRequest tapeLibraryMoveEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tapeLibraryMoveEndpointRequest' is set
            if (tapeLibraryMoveEndpointRequest == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'tapeLibraryMoveEndpointRequest' when calling TapeArchiveApi->MoveTape");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = tapeLibraryMoveEndpointRequest;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/2/archive/tape/library/move", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MoveTape", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape.</param>
        /// <param name="tapePartialUpdate"></param>
        /// <returns>Tape</returns>
        public Tape PatchTape(int id, TapePartialUpdate tapePartialUpdate)
        {
            ElementsSDK.Client.ApiResponse<Tape> localVarResponse = PatchTapeWithHttpInfo(id, tapePartialUpdate);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape.</param>
        /// <param name="tapePartialUpdate"></param>
        /// <returns>ApiResponse of Tape</returns>
        public ElementsSDK.Client.ApiResponse<Tape> PatchTapeWithHttpInfo(int id, TapePartialUpdate tapePartialUpdate)
        {
            // verify the required parameter 'tapePartialUpdate' is set
            if (tapePartialUpdate == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'tapePartialUpdate' when calling TapeArchiveApi->PatchTape");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = tapePartialUpdate;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Tape>("/api/2/archive/tape/tapes/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchTape", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape.</param>
        /// <param name="tapePartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Tape</returns>
        public async System.Threading.Tasks.Task<Tape> PatchTapeAsync(int id, TapePartialUpdate tapePartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<Tape> localVarResponse = await PatchTapeWithHttpInfoAsync(id, tapePartialUpdate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape.</param>
        /// <param name="tapePartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Tape)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Tape>> PatchTapeWithHttpInfoAsync(int id, TapePartialUpdate tapePartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tapePartialUpdate' is set
            if (tapePartialUpdate == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'tapePartialUpdate' when calling TapeArchiveApi->PatchTape");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = tapePartialUpdate;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Tape>("/api/2/archive/tape/tapes/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchTape", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape group.</param>
        /// <param name="tapeGroupPartialUpdate"></param>
        /// <returns>TapeGroup</returns>
        public TapeGroup PatchTapeGroup(int id, TapeGroupPartialUpdate tapeGroupPartialUpdate)
        {
            ElementsSDK.Client.ApiResponse<TapeGroup> localVarResponse = PatchTapeGroupWithHttpInfo(id, tapeGroupPartialUpdate);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape group.</param>
        /// <param name="tapeGroupPartialUpdate"></param>
        /// <returns>ApiResponse of TapeGroup</returns>
        public ElementsSDK.Client.ApiResponse<TapeGroup> PatchTapeGroupWithHttpInfo(int id, TapeGroupPartialUpdate tapeGroupPartialUpdate)
        {
            // verify the required parameter 'tapeGroupPartialUpdate' is set
            if (tapeGroupPartialUpdate == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'tapeGroupPartialUpdate' when calling TapeArchiveApi->PatchTapeGroup");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = tapeGroupPartialUpdate;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<TapeGroup>("/api/2/archive/tape/groups/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchTapeGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape group.</param>
        /// <param name="tapeGroupPartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TapeGroup</returns>
        public async System.Threading.Tasks.Task<TapeGroup> PatchTapeGroupAsync(int id, TapeGroupPartialUpdate tapeGroupPartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<TapeGroup> localVarResponse = await PatchTapeGroupWithHttpInfoAsync(id, tapeGroupPartialUpdate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape group.</param>
        /// <param name="tapeGroupPartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TapeGroup)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<TapeGroup>> PatchTapeGroupWithHttpInfoAsync(int id, TapeGroupPartialUpdate tapeGroupPartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tapeGroupPartialUpdate' is set
            if (tapeGroupPartialUpdate == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'tapeGroupPartialUpdate' when calling TapeArchiveApi->PatchTapeGroup");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = tapeGroupPartialUpdate;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<TapeGroup>("/api/2/archive/tape/groups/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchTapeGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void PauseTapeArchiveJob(string id)
        {
            PauseTapeArchiveJobWithHttpInfo(id);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> PauseTapeArchiveJobWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'id' when calling TapeArchiveApi->PauseTapeArchiveJob");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/2/archive/tape/jobs/{id}/pause", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PauseTapeArchiveJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PauseTapeArchiveJobAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PauseTapeArchiveJobWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> PauseTapeArchiveJobWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'id' when calling TapeArchiveApi->PauseTapeArchiveJob");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/2/archive/tape/jobs/{id}/pause", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PauseTapeArchiveJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void RefreshTapeLibraryState()
        {
            RefreshTapeLibraryStateWithHttpInfo();
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> RefreshTapeLibraryStateWithHttpInfo()
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/2/archive/tape/library/refresh", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefreshTapeLibraryState", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RefreshTapeLibraryStateAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RefreshTapeLibraryStateWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> RefreshTapeLibraryStateWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/2/archive/tape/library/refresh", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefreshTapeLibraryState", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryReindexEndpointRequest"></param>
        /// <returns></returns>
        public void ReindexTape(TapeLibraryReindexEndpointRequest tapeLibraryReindexEndpointRequest)
        {
            ReindexTapeWithHttpInfo(tapeLibraryReindexEndpointRequest);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryReindexEndpointRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> ReindexTapeWithHttpInfo(TapeLibraryReindexEndpointRequest tapeLibraryReindexEndpointRequest)
        {
            // verify the required parameter 'tapeLibraryReindexEndpointRequest' is set
            if (tapeLibraryReindexEndpointRequest == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'tapeLibraryReindexEndpointRequest' when calling TapeArchiveApi->ReindexTape");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = tapeLibraryReindexEndpointRequest;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/2/archive/tape/library/reindex", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReindexTape", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryReindexEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ReindexTapeAsync(TapeLibraryReindexEndpointRequest tapeLibraryReindexEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ReindexTapeWithHttpInfoAsync(tapeLibraryReindexEndpointRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryReindexEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> ReindexTapeWithHttpInfoAsync(TapeLibraryReindexEndpointRequest tapeLibraryReindexEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tapeLibraryReindexEndpointRequest' is set
            if (tapeLibraryReindexEndpointRequest == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'tapeLibraryReindexEndpointRequest' when calling TapeArchiveApi->ReindexTape");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = tapeLibraryReindexEndpointRequest;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/2/archive/tape/library/reindex", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReindexTape", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void RemoveFinishedTapeArchiveJobs()
        {
            RemoveFinishedTapeArchiveJobsWithHttpInfo();
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> RemoveFinishedTapeArchiveJobsWithHttpInfo()
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/2/archive/tape/jobs/remove-finished", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveFinishedTapeArchiveJobs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveFinishedTapeArchiveJobsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RemoveFinishedTapeArchiveJobsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> RemoveFinishedTapeArchiveJobsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/2/archive/tape/jobs/remove-finished", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveFinishedTapeArchiveJobs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void RestartTapeArchiveJob(string id)
        {
            RestartTapeArchiveJobWithHttpInfo(id);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> RestartTapeArchiveJobWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'id' when calling TapeArchiveApi->RestartTapeArchiveJob");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/2/archive/tape/jobs/{id}/restart", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RestartTapeArchiveJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RestartTapeArchiveJobAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RestartTapeArchiveJobWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> RestartTapeArchiveJobWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'id' when calling TapeArchiveApi->RestartTapeArchiveJob");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/2/archive/tape/jobs/{id}/restart", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RestartTapeArchiveJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:restore&#x60;   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="restoreEndpointRequest"></param>
        /// <returns>TapeJob</returns>
        public TapeJob RestoreFromTape(RestoreEndpointRequest restoreEndpointRequest)
        {
            ElementsSDK.Client.ApiResponse<TapeJob> localVarResponse = RestoreFromTapeWithHttpInfo(restoreEndpointRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:restore&#x60;   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="restoreEndpointRequest"></param>
        /// <returns>ApiResponse of TapeJob</returns>
        public ElementsSDK.Client.ApiResponse<TapeJob> RestoreFromTapeWithHttpInfo(RestoreEndpointRequest restoreEndpointRequest)
        {
            // verify the required parameter 'restoreEndpointRequest' is set
            if (restoreEndpointRequest == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'restoreEndpointRequest' when calling TapeArchiveApi->RestoreFromTape");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = restoreEndpointRequest;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TapeJob>("/api/2/archive/tape/restore", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RestoreFromTape", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:restore&#x60;   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="restoreEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TapeJob</returns>
        public async System.Threading.Tasks.Task<TapeJob> RestoreFromTapeAsync(RestoreEndpointRequest restoreEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<TapeJob> localVarResponse = await RestoreFromTapeWithHttpInfoAsync(restoreEndpointRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:restore&#x60;   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="restoreEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TapeJob)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<TapeJob>> RestoreFromTapeWithHttpInfoAsync(RestoreEndpointRequest restoreEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'restoreEndpointRequest' is set
            if (restoreEndpointRequest == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'restoreEndpointRequest' when calling TapeArchiveApi->RestoreFromTape");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = restoreEndpointRequest;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TapeJob>("/api/2/archive/tape/restore", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RestoreFromTape", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void ResumeTapeArchiveJob(string id)
        {
            ResumeTapeArchiveJobWithHttpInfo(id);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> ResumeTapeArchiveJobWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'id' when calling TapeArchiveApi->ResumeTapeArchiveJob");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/2/archive/tape/jobs/{id}/resume", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResumeTapeArchiveJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ResumeTapeArchiveJobAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ResumeTapeArchiveJobWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> ResumeTapeArchiveJobWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'id' when calling TapeArchiveApi->ResumeTapeArchiveJob");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/2/archive/tape/jobs/{id}/resume", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResumeTapeArchiveJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:search&#x60;   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchEndpointRequest"></param>
        /// <returns>SearchEndpointResponse</returns>
        public SearchEndpointResponse SearchTapeArchive(SearchEndpointRequest searchEndpointRequest)
        {
            ElementsSDK.Client.ApiResponse<SearchEndpointResponse> localVarResponse = SearchTapeArchiveWithHttpInfo(searchEndpointRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:search&#x60;   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchEndpointRequest"></param>
        /// <returns>ApiResponse of SearchEndpointResponse</returns>
        public ElementsSDK.Client.ApiResponse<SearchEndpointResponse> SearchTapeArchiveWithHttpInfo(SearchEndpointRequest searchEndpointRequest)
        {
            // verify the required parameter 'searchEndpointRequest' is set
            if (searchEndpointRequest == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'searchEndpointRequest' when calling TapeArchiveApi->SearchTapeArchive");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = searchEndpointRequest;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SearchEndpointResponse>("/api/2/archive/tape/search", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchTapeArchive", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:search&#x60;   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchEndpointResponse</returns>
        public async System.Threading.Tasks.Task<SearchEndpointResponse> SearchTapeArchiveAsync(SearchEndpointRequest searchEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<SearchEndpointResponse> localVarResponse = await SearchTapeArchiveWithHttpInfoAsync(searchEndpointRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:search&#x60;   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchEndpointResponse)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<SearchEndpointResponse>> SearchTapeArchiveWithHttpInfoAsync(SearchEndpointRequest searchEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'searchEndpointRequest' is set
            if (searchEndpointRequest == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'searchEndpointRequest' when calling TapeArchiveApi->SearchTapeArchive");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = searchEndpointRequest;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SearchEndpointResponse>("/api/2/archive/tape/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchTapeArchive", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryUnloadEndpointRequest"></param>
        /// <returns></returns>
        public void UnloadTape(TapeLibraryUnloadEndpointRequest tapeLibraryUnloadEndpointRequest)
        {
            UnloadTapeWithHttpInfo(tapeLibraryUnloadEndpointRequest);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryUnloadEndpointRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> UnloadTapeWithHttpInfo(TapeLibraryUnloadEndpointRequest tapeLibraryUnloadEndpointRequest)
        {
            // verify the required parameter 'tapeLibraryUnloadEndpointRequest' is set
            if (tapeLibraryUnloadEndpointRequest == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'tapeLibraryUnloadEndpointRequest' when calling TapeArchiveApi->UnloadTape");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = tapeLibraryUnloadEndpointRequest;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/2/archive/tape/library/unload", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnloadTape", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryUnloadEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnloadTapeAsync(TapeLibraryUnloadEndpointRequest tapeLibraryUnloadEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UnloadTapeWithHttpInfoAsync(tapeLibraryUnloadEndpointRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;ltfs:manage&#x60;   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryUnloadEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> UnloadTapeWithHttpInfoAsync(TapeLibraryUnloadEndpointRequest tapeLibraryUnloadEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tapeLibraryUnloadEndpointRequest' is set
            if (tapeLibraryUnloadEndpointRequest == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'tapeLibraryUnloadEndpointRequest' when calling TapeArchiveApi->UnloadTape");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = tapeLibraryUnloadEndpointRequest;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/2/archive/tape/library/unload", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnloadTape", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape.</param>
        /// <param name="tape"></param>
        /// <returns>Tape</returns>
        public Tape UpdateTape(int id, Tape tape)
        {
            ElementsSDK.Client.ApiResponse<Tape> localVarResponse = UpdateTapeWithHttpInfo(id, tape);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape.</param>
        /// <param name="tape"></param>
        /// <returns>ApiResponse of Tape</returns>
        public ElementsSDK.Client.ApiResponse<Tape> UpdateTapeWithHttpInfo(int id, Tape tape)
        {
            // verify the required parameter 'tape' is set
            if (tape == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'tape' when calling TapeArchiveApi->UpdateTape");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = tape;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Tape>("/api/2/archive/tape/tapes/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTape", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape.</param>
        /// <param name="tape"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Tape</returns>
        public async System.Threading.Tasks.Task<Tape> UpdateTapeAsync(int id, Tape tape, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<Tape> localVarResponse = await UpdateTapeWithHttpInfoAsync(id, tape, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape.</param>
        /// <param name="tape"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Tape)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Tape>> UpdateTapeWithHttpInfoAsync(int id, Tape tape, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tape' is set
            if (tape == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'tape' when calling TapeArchiveApi->UpdateTape");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = tape;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Tape>("/api/2/archive/tape/tapes/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTape", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape group.</param>
        /// <param name="tapeGroup"></param>
        /// <returns>TapeGroup</returns>
        public TapeGroup UpdateTapeGroup(int id, TapeGroup tapeGroup)
        {
            ElementsSDK.Client.ApiResponse<TapeGroup> localVarResponse = UpdateTapeGroupWithHttpInfo(id, tapeGroup);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape group.</param>
        /// <param name="tapeGroup"></param>
        /// <returns>ApiResponse of TapeGroup</returns>
        public ElementsSDK.Client.ApiResponse<TapeGroup> UpdateTapeGroupWithHttpInfo(int id, TapeGroup tapeGroup)
        {
            // verify the required parameter 'tapeGroup' is set
            if (tapeGroup == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'tapeGroup' when calling TapeArchiveApi->UpdateTapeGroup");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = tapeGroup;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<TapeGroup>("/api/2/archive/tape/groups/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTapeGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape group.</param>
        /// <param name="tapeGroup"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TapeGroup</returns>
        public async System.Threading.Tasks.Task<TapeGroup> UpdateTapeGroupAsync(int id, TapeGroup tapeGroup, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<TapeGroup> localVarResponse = await UpdateTapeGroupWithHttpInfoAsync(id, tapeGroup, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;ltfs:tapegroups:manage&#x60; (write)   * License component: ltfs 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this tape group.</param>
        /// <param name="tapeGroup"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TapeGroup)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<TapeGroup>> UpdateTapeGroupWithHttpInfoAsync(int id, TapeGroup tapeGroup, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tapeGroup' is set
            if (tapeGroup == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'tapeGroup' when calling TapeArchiveApi->UpdateTapeGroup");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = tapeGroup;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<TapeGroup>("/api/2/archive/tape/groups/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTapeGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
