/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ElementsSDK.Client;
using ElementsSDK.Model;

namespace ElementsSDK.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISatelliteApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;rdc:access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Satellite host.</param>
        /// <returns>RDCActivation</returns>
        RDCActivation ActivateSatelliteHost(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;rdc:access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Satellite host.</param>
        /// <returns>ApiResponse of RDCActivation</returns>
        ApiResponse<RDCActivation> ActivateSatelliteHostWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>RDCHost</returns>
        RDCHost AnnounceSatelliteHost();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RDCHost</returns>
        ApiResponse<RDCHost> AnnounceSatelliteHostWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * License component: rdc 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rDCSessionCreate"></param>
        /// <returns>RDCSession</returns>
        RDCSession CreateSatelliteSession(RDCSessionCreate rDCSessionCreate);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * License component: rdc 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rDCSessionCreate"></param>
        /// <returns>ApiResponse of RDCSession</returns>
        ApiResponse<RDCSession> CreateSatelliteSessionWithHttpInfo(RDCSessionCreate rDCSessionCreate);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * License component: rdc 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Satellite session.</param>
        /// <returns></returns>
        void DeleteSatelliteSession(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * License component: rdc 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Satellite session.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSatelliteSessionWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;rdc:access&#x60;   * License component: rdc 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>List&lt;RDCHost&gt;</returns>
        List<RDCHost> GetAllSatelliteHosts(string ordering = default(string), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;rdc:access&#x60;   * License component: rdc 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;RDCHost&gt;</returns>
        ApiResponse<List<RDCHost>> GetAllSatelliteHostsWithHttpInfo(string ordering = default(string), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * License component: rdc 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>List&lt;RDCSession&gt;</returns>
        List<RDCSession> GetAllSatelliteSessions(string ordering = default(string), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * License component: rdc 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;RDCSession&gt;</returns>
        ApiResponse<List<RDCSession>> GetAllSatelliteSessionsWithHttpInfo(string ordering = default(string), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;rdc:access&#x60;   * License component: rdc 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Satellite host.</param>
        /// <returns>RDCHost</returns>
        RDCHost GetSatelliteHost(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;rdc:access&#x60;   * License component: rdc 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Satellite host.</param>
        /// <returns>ApiResponse of RDCHost</returns>
        ApiResponse<RDCHost> GetSatelliteHostWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * License component: rdc 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Satellite session.</param>
        /// <returns>RDCSession</returns>
        RDCSession GetSatelliteSession(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * License component: rdc 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Satellite session.</param>
        /// <returns>ApiResponse of RDCSession</returns>
        ApiResponse<RDCSession> GetSatelliteSessionWithHttpInfo(int id);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISatelliteApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;rdc:access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Satellite host.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RDCActivation</returns>
        System.Threading.Tasks.Task<RDCActivation> ActivateSatelliteHostAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;rdc:access&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Satellite host.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RDCActivation)</returns>
        System.Threading.Tasks.Task<ApiResponse<RDCActivation>> ActivateSatelliteHostWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RDCHost</returns>
        System.Threading.Tasks.Task<RDCHost> AnnounceSatelliteHostAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RDCHost)</returns>
        System.Threading.Tasks.Task<ApiResponse<RDCHost>> AnnounceSatelliteHostWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * License component: rdc 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rDCSessionCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RDCSession</returns>
        System.Threading.Tasks.Task<RDCSession> CreateSatelliteSessionAsync(RDCSessionCreate rDCSessionCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * License component: rdc 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rDCSessionCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RDCSession)</returns>
        System.Threading.Tasks.Task<ApiResponse<RDCSession>> CreateSatelliteSessionWithHttpInfoAsync(RDCSessionCreate rDCSessionCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * License component: rdc 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Satellite session.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSatelliteSessionAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * License component: rdc 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Satellite session.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSatelliteSessionWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;rdc:access&#x60;   * License component: rdc 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;RDCHost&gt;</returns>
        System.Threading.Tasks.Task<List<RDCHost>> GetAllSatelliteHostsAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;rdc:access&#x60;   * License component: rdc 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;RDCHost&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RDCHost>>> GetAllSatelliteHostsWithHttpInfoAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * License component: rdc 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;RDCSession&gt;</returns>
        System.Threading.Tasks.Task<List<RDCSession>> GetAllSatelliteSessionsAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * License component: rdc 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;RDCSession&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RDCSession>>> GetAllSatelliteSessionsWithHttpInfoAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;rdc:access&#x60;   * License component: rdc 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Satellite host.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RDCHost</returns>
        System.Threading.Tasks.Task<RDCHost> GetSatelliteHostAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;rdc:access&#x60;   * License component: rdc 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Satellite host.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RDCHost)</returns>
        System.Threading.Tasks.Task<ApiResponse<RDCHost>> GetSatelliteHostWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * License component: rdc 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Satellite session.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RDCSession</returns>
        System.Threading.Tasks.Task<RDCSession> GetSatelliteSessionAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * License component: rdc 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Satellite session.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RDCSession)</returns>
        System.Threading.Tasks.Task<ApiResponse<RDCSession>> GetSatelliteSessionWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISatelliteApi : ISatelliteApiSync, ISatelliteApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SatelliteApi : ISatelliteApi
    {
        private ElementsSDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SatelliteApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SatelliteApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SatelliteApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SatelliteApi(string basePath)
        {
            this.Configuration = ElementsSDK.Client.Configuration.MergeConfigurations(
                ElementsSDK.Client.GlobalConfiguration.Instance,
                new ElementsSDK.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ElementsSDK.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ElementsSDK.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ElementsSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SatelliteApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SatelliteApi(ElementsSDK.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ElementsSDK.Client.Configuration.MergeConfigurations(
                ElementsSDK.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ElementsSDK.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ElementsSDK.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ElementsSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SatelliteApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SatelliteApi(ElementsSDK.Client.ISynchronousClient client, ElementsSDK.Client.IAsynchronousClient asyncClient, ElementsSDK.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ElementsSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ElementsSDK.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ElementsSDK.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ElementsSDK.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ElementsSDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;rdc:access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Satellite host.</param>
        /// <returns>RDCActivation</returns>
        public RDCActivation ActivateSatelliteHost(int id)
        {
            ElementsSDK.Client.ApiResponse<RDCActivation> localVarResponse = ActivateSatelliteHostWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;rdc:access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Satellite host.</param>
        /// <returns>ApiResponse of RDCActivation</returns>
        public ElementsSDK.Client.ApiResponse<RDCActivation> ActivateSatelliteHostWithHttpInfo(int id)
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RDCActivation>("/api/2/rdc/hosts/{id}/activate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ActivateSatelliteHost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;rdc:access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Satellite host.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RDCActivation</returns>
        public async System.Threading.Tasks.Task<RDCActivation> ActivateSatelliteHostAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<RDCActivation> localVarResponse = await ActivateSatelliteHostWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;rdc:access&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Satellite host.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RDCActivation)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<RDCActivation>> ActivateSatelliteHostWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<RDCActivation>("/api/2/rdc/hosts/{id}/activate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ActivateSatelliteHost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>RDCHost</returns>
        public RDCHost AnnounceSatelliteHost()
        {
            ElementsSDK.Client.ApiResponse<RDCHost> localVarResponse = AnnounceSatelliteHostWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RDCHost</returns>
        public ElementsSDK.Client.ApiResponse<RDCHost> AnnounceSatelliteHostWithHttpInfo()
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RDCHost>("/api/2/rdc/hosts/announce", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AnnounceSatelliteHost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RDCHost</returns>
        public async System.Threading.Tasks.Task<RDCHost> AnnounceSatelliteHostAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<RDCHost> localVarResponse = await AnnounceSatelliteHostWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RDCHost)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<RDCHost>> AnnounceSatelliteHostWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<RDCHost>("/api/2/rdc/hosts/announce", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AnnounceSatelliteHost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * License component: rdc 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rDCSessionCreate"></param>
        /// <returns>RDCSession</returns>
        public RDCSession CreateSatelliteSession(RDCSessionCreate rDCSessionCreate)
        {
            ElementsSDK.Client.ApiResponse<RDCSession> localVarResponse = CreateSatelliteSessionWithHttpInfo(rDCSessionCreate);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * License component: rdc 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rDCSessionCreate"></param>
        /// <returns>ApiResponse of RDCSession</returns>
        public ElementsSDK.Client.ApiResponse<RDCSession> CreateSatelliteSessionWithHttpInfo(RDCSessionCreate rDCSessionCreate)
        {
            // verify the required parameter 'rDCSessionCreate' is set
            if (rDCSessionCreate == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'rDCSessionCreate' when calling SatelliteApi->CreateSatelliteSession");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = rDCSessionCreate;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RDCSession>("/api/2/rdc/sessions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSatelliteSession", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * License component: rdc 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rDCSessionCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RDCSession</returns>
        public async System.Threading.Tasks.Task<RDCSession> CreateSatelliteSessionAsync(RDCSessionCreate rDCSessionCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<RDCSession> localVarResponse = await CreateSatelliteSessionWithHttpInfoAsync(rDCSessionCreate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * License component: rdc 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rDCSessionCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RDCSession)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<RDCSession>> CreateSatelliteSessionWithHttpInfoAsync(RDCSessionCreate rDCSessionCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'rDCSessionCreate' is set
            if (rDCSessionCreate == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'rDCSessionCreate' when calling SatelliteApi->CreateSatelliteSession");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = rDCSessionCreate;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<RDCSession>("/api/2/rdc/sessions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSatelliteSession", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * License component: rdc 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Satellite session.</param>
        /// <returns></returns>
        public void DeleteSatelliteSession(int id)
        {
            DeleteSatelliteSessionWithHttpInfo(id);
        }

        /// <summary>
        ///  ### Required permissions    * License component: rdc 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Satellite session.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> DeleteSatelliteSessionWithHttpInfo(int id)
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/2/rdc/sessions/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSatelliteSession", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * License component: rdc 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Satellite session.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSatelliteSessionAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteSatelliteSessionWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * License component: rdc 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Satellite session.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> DeleteSatelliteSessionWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/2/rdc/sessions/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSatelliteSession", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;rdc:access&#x60;   * License component: rdc 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>List&lt;RDCHost&gt;</returns>
        public List<RDCHost> GetAllSatelliteHosts(string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.ApiResponse<List<RDCHost>> localVarResponse = GetAllSatelliteHostsWithHttpInfo(ordering, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;rdc:access&#x60;   * License component: rdc 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;RDCHost&gt;</returns>
        public ElementsSDK.Client.ApiResponse<List<RDCHost>> GetAllSatelliteHostsWithHttpInfo(string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<RDCHost>>("/api/2/rdc/hosts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllSatelliteHosts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;rdc:access&#x60;   * License component: rdc 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;RDCHost&gt;</returns>
        public async System.Threading.Tasks.Task<List<RDCHost>> GetAllSatelliteHostsAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<List<RDCHost>> localVarResponse = await GetAllSatelliteHostsWithHttpInfoAsync(ordering, limit, offset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;rdc:access&#x60;   * License component: rdc 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;RDCHost&gt;)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<List<RDCHost>>> GetAllSatelliteHostsWithHttpInfoAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<RDCHost>>("/api/2/rdc/hosts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllSatelliteHosts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * License component: rdc 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>List&lt;RDCSession&gt;</returns>
        public List<RDCSession> GetAllSatelliteSessions(string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.ApiResponse<List<RDCSession>> localVarResponse = GetAllSatelliteSessionsWithHttpInfo(ordering, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * License component: rdc 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;RDCSession&gt;</returns>
        public ElementsSDK.Client.ApiResponse<List<RDCSession>> GetAllSatelliteSessionsWithHttpInfo(string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<RDCSession>>("/api/2/rdc/sessions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllSatelliteSessions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * License component: rdc 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;RDCSession&gt;</returns>
        public async System.Threading.Tasks.Task<List<RDCSession>> GetAllSatelliteSessionsAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<List<RDCSession>> localVarResponse = await GetAllSatelliteSessionsWithHttpInfoAsync(ordering, limit, offset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * License component: rdc 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;RDCSession&gt;)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<List<RDCSession>>> GetAllSatelliteSessionsWithHttpInfoAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<RDCSession>>("/api/2/rdc/sessions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllSatelliteSessions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;rdc:access&#x60;   * License component: rdc 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Satellite host.</param>
        /// <returns>RDCHost</returns>
        public RDCHost GetSatelliteHost(int id)
        {
            ElementsSDK.Client.ApiResponse<RDCHost> localVarResponse = GetSatelliteHostWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;rdc:access&#x60;   * License component: rdc 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Satellite host.</param>
        /// <returns>ApiResponse of RDCHost</returns>
        public ElementsSDK.Client.ApiResponse<RDCHost> GetSatelliteHostWithHttpInfo(int id)
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RDCHost>("/api/2/rdc/hosts/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSatelliteHost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;rdc:access&#x60;   * License component: rdc 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Satellite host.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RDCHost</returns>
        public async System.Threading.Tasks.Task<RDCHost> GetSatelliteHostAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<RDCHost> localVarResponse = await GetSatelliteHostWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;rdc:access&#x60;   * License component: rdc 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Satellite host.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RDCHost)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<RDCHost>> GetSatelliteHostWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<RDCHost>("/api/2/rdc/hosts/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSatelliteHost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * License component: rdc 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Satellite session.</param>
        /// <returns>RDCSession</returns>
        public RDCSession GetSatelliteSession(int id)
        {
            ElementsSDK.Client.ApiResponse<RDCSession> localVarResponse = GetSatelliteSessionWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * License component: rdc 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Satellite session.</param>
        /// <returns>ApiResponse of RDCSession</returns>
        public ElementsSDK.Client.ApiResponse<RDCSession> GetSatelliteSessionWithHttpInfo(int id)
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RDCSession>("/api/2/rdc/sessions/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSatelliteSession", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * License component: rdc 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Satellite session.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RDCSession</returns>
        public async System.Threading.Tasks.Task<RDCSession> GetSatelliteSessionAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<RDCSession> localVarResponse = await GetSatelliteSessionWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * License component: rdc 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this Satellite session.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RDCSession)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<RDCSession>> GetSatelliteSessionWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<RDCSession>("/api/2/rdc/sessions/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSatelliteSession", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
