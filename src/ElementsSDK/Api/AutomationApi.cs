/*
 * ELEMENTS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ElementsSDK.Client;
using ElementsSDK.Model;

namespace ElementsSDK.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAutomationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <returns></returns>
        void AbortTask(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AbortTaskWithHttpInfo(string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="job"></param>
        /// <returns>Job</returns>
        Job CreateJob(Job job);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="job"></param>
        /// <returns>ApiResponse of Job</returns>
        ApiResponse<Job> CreateJobWithHttpInfo(Job job);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schedule"></param>
        /// <returns>Schedule</returns>
        Schedule CreateSchedule(Schedule schedule);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schedule"></param>
        /// <returns>ApiResponse of Schedule</returns>
        ApiResponse<Schedule> CreateScheduleWithHttpInfo(Schedule schedule);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subtask"></param>
        /// <returns>Subtask</returns>
        Subtask CreateSubtask(Subtask subtask);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subtask"></param>
        /// <returns>ApiResponse of Subtask</returns>
        ApiResponse<Subtask> CreateSubtaskWithHttpInfo(Subtask subtask);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void DeleteFinishedTasks();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFinishedTasksWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this job.</param>
        /// <returns></returns>
        void DeleteJob(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this job.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteJobWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this schedule.</param>
        /// <returns></returns>
        void DeleteSchedule(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this schedule.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteScheduleWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this subtask.</param>
        /// <returns></returns>
        void DeleteSubtask(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this subtask.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSubtaskWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <returns></returns>
        void DeleteTask(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTaskWithHttpInfo(string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobInstance">Filter the returned list by &#x60;job_instance&#x60;. (optional)</param>
        /// <param name="jobInstanceIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="subtask">Filter the returned list by &#x60;subtask&#x60;. (optional)</param>
        /// <param name="state">Filter the returned list by &#x60;state&#x60;. (optional)</param>
        /// <param name="stateIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="idIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="taskName">Filter the returned list by &#x60;task_name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns></returns>
        void DownloadAllTaskLogs(string jobInstance = default(string), string jobInstanceIn = default(string), string subtask = default(string), string state = default(string), decimal? stateIn = default(decimal?), string id = default(string), string idIn = default(string), string name = default(string), string taskName = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobInstance">Filter the returned list by &#x60;job_instance&#x60;. (optional)</param>
        /// <param name="jobInstanceIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="subtask">Filter the returned list by &#x60;subtask&#x60;. (optional)</param>
        /// <param name="state">Filter the returned list by &#x60;state&#x60;. (optional)</param>
        /// <param name="stateIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="idIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="taskName">Filter the returned list by &#x60;task_name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DownloadAllTaskLogsWithHttpInfo(string jobInstance = default(string), string jobInstanceIn = default(string), string subtask = default(string), string state = default(string), decimal? stateIn = default(decimal?), string id = default(string), string idIn = default(string), string name = default(string), string taskName = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <returns></returns>
        void DownloadTaskLog(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DownloadTaskLogWithHttpInfo(string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 GetAllEvents(string ordering = default(string), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> GetAllEventsWithHttpInfo(string ordering = default(string), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specialType">Filter the returned list by &#x60;special_type&#x60;. (optional)</param>
        /// <param name="specialTypeIsnull">Filter the returned list by &#x60;special_type__isnull&#x60;. (optional)</param>
        /// <param name="hook">Filter the returned list by &#x60;hook&#x60;. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>List&lt;Job&gt;</returns>
        List<Job> GetAllJobs(string specialType = default(string), string specialTypeIsnull = default(string), string hook = default(string), string name = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specialType">Filter the returned list by &#x60;special_type&#x60;. (optional)</param>
        /// <param name="specialTypeIsnull">Filter the returned list by &#x60;special_type__isnull&#x60;. (optional)</param>
        /// <param name="hook">Filter the returned list by &#x60;hook&#x60;. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;Job&gt;</returns>
        ApiResponse<List<Job>> GetAllJobsWithHttpInfo(string specialType = default(string), string specialTypeIsnull = default(string), string hook = default(string), string name = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="job">Filter the returned list by &#x60;job&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>List&lt;Schedule&gt;</returns>
        List<Schedule> GetAllSchedules(string job = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="job">Filter the returned list by &#x60;job&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;Schedule&gt;</returns>
        ApiResponse<List<Schedule>> GetAllSchedulesWithHttpInfo(string job = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">Filter the returned list by &#x60;parent&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>List&lt;Subtask&gt;</returns>
        List<Subtask> GetAllSubtasks(string parent = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">Filter the returned list by &#x60;parent&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;Subtask&gt;</returns>
        ApiResponse<List<Subtask>> GetAllSubtasksWithHttpInfo(string parent = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 GetAllTaskQueues(string ordering = default(string), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> GetAllTaskQueuesWithHttpInfo(string ordering = default(string), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>InlineResponse2004</returns>
        InlineResponse2004 GetAllTaskTypes(string ordering = default(string), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        ApiResponse<InlineResponse2004> GetAllTaskTypesWithHttpInfo(string ordering = default(string), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobInstance">Filter the returned list by &#x60;job_instance&#x60;. (optional)</param>
        /// <param name="jobInstanceIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="subtask">Filter the returned list by &#x60;subtask&#x60;. (optional)</param>
        /// <param name="state">Filter the returned list by &#x60;state&#x60;. (optional)</param>
        /// <param name="stateIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="idIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="taskName">Filter the returned list by &#x60;task_name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>List&lt;TaskInfo&gt;</returns>
        List<TaskInfo> GetAllTasks(string jobInstance = default(string), string jobInstanceIn = default(string), string subtask = default(string), string state = default(string), decimal? stateIn = default(decimal?), string id = default(string), string idIn = default(string), string name = default(string), string taskName = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobInstance">Filter the returned list by &#x60;job_instance&#x60;. (optional)</param>
        /// <param name="jobInstanceIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="subtask">Filter the returned list by &#x60;subtask&#x60;. (optional)</param>
        /// <param name="state">Filter the returned list by &#x60;state&#x60;. (optional)</param>
        /// <param name="stateIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="idIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="taskName">Filter the returned list by &#x60;task_name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;TaskInfo&gt;</returns>
        ApiResponse<List<TaskInfo>> GetAllTasksWithHttpInfo(string jobInstance = default(string), string jobInstanceIn = default(string), string subtask = default(string), string state = default(string), decimal? stateIn = default(decimal?), string id = default(string), string idIn = default(string), string name = default(string), string taskName = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Event</returns>
        Event GetEvent(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Event</returns>
        ApiResponse<Event> GetEventWithHttpInfo(string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobInstance">Filter the returned list by &#x60;job_instance&#x60;. (optional)</param>
        /// <param name="jobInstanceIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="subtask">Filter the returned list by &#x60;subtask&#x60;. (optional)</param>
        /// <param name="state">Filter the returned list by &#x60;state&#x60;. (optional)</param>
        /// <param name="stateIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="idIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="taskName">Filter the returned list by &#x60;task_name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>List&lt;TaskInfo&gt;</returns>
        List<TaskInfo> GetFinishedTasks(string jobInstance = default(string), string jobInstanceIn = default(string), string subtask = default(string), string state = default(string), decimal? stateIn = default(decimal?), string id = default(string), string idIn = default(string), string name = default(string), string taskName = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobInstance">Filter the returned list by &#x60;job_instance&#x60;. (optional)</param>
        /// <param name="jobInstanceIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="subtask">Filter the returned list by &#x60;subtask&#x60;. (optional)</param>
        /// <param name="state">Filter the returned list by &#x60;state&#x60;. (optional)</param>
        /// <param name="stateIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="idIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="taskName">Filter the returned list by &#x60;task_name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;TaskInfo&gt;</returns>
        ApiResponse<List<TaskInfo>> GetFinishedTasksWithHttpInfo(string jobInstance = default(string), string jobInstanceIn = default(string), string subtask = default(string), string state = default(string), decimal? stateIn = default(decimal?), string id = default(string), string idIn = default(string), string name = default(string), string taskName = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this job.</param>
        /// <returns>Job</returns>
        Job GetJob(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this job.</param>
        /// <returns>ApiResponse of Job</returns>
        ApiResponse<Job> GetJobWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobInstance">Filter the returned list by &#x60;job_instance&#x60;. (optional)</param>
        /// <param name="jobInstanceIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="subtask">Filter the returned list by &#x60;subtask&#x60;. (optional)</param>
        /// <param name="state">Filter the returned list by &#x60;state&#x60;. (optional)</param>
        /// <param name="stateIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="idIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="taskName">Filter the returned list by &#x60;task_name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>List&lt;TaskInfo&gt;</returns>
        List<TaskInfo> GetPendingTasks(string jobInstance = default(string), string jobInstanceIn = default(string), string subtask = default(string), string state = default(string), decimal? stateIn = default(decimal?), string id = default(string), string idIn = default(string), string name = default(string), string taskName = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobInstance">Filter the returned list by &#x60;job_instance&#x60;. (optional)</param>
        /// <param name="jobInstanceIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="subtask">Filter the returned list by &#x60;subtask&#x60;. (optional)</param>
        /// <param name="state">Filter the returned list by &#x60;state&#x60;. (optional)</param>
        /// <param name="stateIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="idIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="taskName">Filter the returned list by &#x60;task_name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;TaskInfo&gt;</returns>
        ApiResponse<List<TaskInfo>> GetPendingTasksWithHttpInfo(string jobInstance = default(string), string jobInstanceIn = default(string), string subtask = default(string), string state = default(string), decimal? stateIn = default(decimal?), string id = default(string), string idIn = default(string), string name = default(string), string taskName = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PythonEnvironment&gt;</returns>
        List<PythonEnvironment> GetPythonEnvironments();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PythonEnvironment&gt;</returns>
        ApiResponse<List<PythonEnvironment>> GetPythonEnvironmentsWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this schedule.</param>
        /// <returns>Schedule</returns>
        Schedule GetSchedule(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this schedule.</param>
        /// <returns>ApiResponse of Schedule</returns>
        ApiResponse<Schedule> GetScheduleWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this subtask.</param>
        /// <returns>Subtask</returns>
        Subtask GetSubtask(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this subtask.</param>
        /// <returns>ApiResponse of Subtask</returns>
        ApiResponse<Subtask> GetSubtaskWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <returns>TaskInfo</returns>
        TaskInfo GetTask(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        ApiResponse<TaskInfo> GetTaskWithHttpInfo(string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <returns>TaskLog</returns>
        TaskLog GetTaskLog(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <returns>ApiResponse of TaskLog</returns>
        ApiResponse<TaskLog> GetTaskLogWithHttpInfo(string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <returns>TaskType</returns>
        TaskType GetTaskType(string type);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <returns>ApiResponse of TaskType</returns>
        ApiResponse<TaskType> GetTaskTypeWithHttpInfo(string type);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobInstance">Filter the returned list by &#x60;job_instance&#x60;. (optional)</param>
        /// <param name="jobInstanceIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="subtask">Filter the returned list by &#x60;subtask&#x60;. (optional)</param>
        /// <param name="state">Filter the returned list by &#x60;state&#x60;. (optional)</param>
        /// <param name="stateIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="idIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="taskName">Filter the returned list by &#x60;task_name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>TasksSummary</returns>
        TasksSummary GetTasksSummary(string jobInstance = default(string), string jobInstanceIn = default(string), string subtask = default(string), string state = default(string), decimal? stateIn = default(decimal?), string id = default(string), string idIn = default(string), string name = default(string), string taskName = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobInstance">Filter the returned list by &#x60;job_instance&#x60;. (optional)</param>
        /// <param name="jobInstanceIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="subtask">Filter the returned list by &#x60;subtask&#x60;. (optional)</param>
        /// <param name="state">Filter the returned list by &#x60;state&#x60;. (optional)</param>
        /// <param name="stateIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="idIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="taskName">Filter the returned list by &#x60;task_name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of TasksSummary</returns>
        ApiResponse<TasksSummary> GetTasksSummaryWithHttpInfo(string jobInstance = default(string), string jobInstanceIn = default(string), string subtask = default(string), string state = default(string), decimal? stateIn = default(decimal?), string id = default(string), string idIn = default(string), string name = default(string), string taskName = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void KillAllPendingTasks();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> KillAllPendingTasksWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <returns></returns>
        void KillTask(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> KillTaskWithHttpInfo(string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this job.</param>
        /// <param name="jobPartialUpdate"></param>
        /// <returns>Job</returns>
        Job PatchJob(int id, JobPartialUpdate jobPartialUpdate);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this job.</param>
        /// <param name="jobPartialUpdate"></param>
        /// <returns>ApiResponse of Job</returns>
        ApiResponse<Job> PatchJobWithHttpInfo(int id, JobPartialUpdate jobPartialUpdate);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this schedule.</param>
        /// <param name="schedulePartialUpdate"></param>
        /// <returns>Schedule</returns>
        Schedule PatchSchedule(int id, SchedulePartialUpdate schedulePartialUpdate);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this schedule.</param>
        /// <param name="schedulePartialUpdate"></param>
        /// <returns>ApiResponse of Schedule</returns>
        ApiResponse<Schedule> PatchScheduleWithHttpInfo(int id, SchedulePartialUpdate schedulePartialUpdate);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this subtask.</param>
        /// <param name="subtaskPartialUpdate"></param>
        /// <returns>Subtask</returns>
        Subtask PatchSubtask(int id, SubtaskPartialUpdate subtaskPartialUpdate);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this subtask.</param>
        /// <param name="subtaskPartialUpdate"></param>
        /// <returns>ApiResponse of Subtask</returns>
        ApiResponse<Subtask> PatchSubtaskWithHttpInfo(int id, SubtaskPartialUpdate subtaskPartialUpdate);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <returns>TaskInfo</returns>
        TaskInfo RestartTask(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        ApiResponse<TaskInfo> RestartTaskWithHttpInfo(string id);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this job.</param>
        /// <param name="startJobRequest"></param>
        /// <returns>List&lt;TaskInfo&gt;</returns>
        List<TaskInfo> StartJob(int id, StartJobRequest startJobRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this job.</param>
        /// <param name="startJobRequest"></param>
        /// <returns>ApiResponse of List&lt;TaskInfo&gt;</returns>
        ApiResponse<List<TaskInfo>> StartJobWithHttpInfo(int id, StartJobRequest startJobRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTaskRequest"></param>
        /// <returns>TaskInfo</returns>
        TaskInfo StartTask(StartTaskRequest startTaskRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTaskRequest"></param>
        /// <returns>ApiResponse of TaskInfo</returns>
        ApiResponse<TaskInfo> StartTaskWithHttpInfo(StartTaskRequest startTaskRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this job.</param>
        /// <param name="job"></param>
        /// <returns>Job</returns>
        Job UpdateJob(int id, Job job);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this job.</param>
        /// <param name="job"></param>
        /// <returns>ApiResponse of Job</returns>
        ApiResponse<Job> UpdateJobWithHttpInfo(int id, Job job);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this schedule.</param>
        /// <param name="schedule"></param>
        /// <returns>Schedule</returns>
        Schedule UpdateSchedule(int id, Schedule schedule);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this schedule.</param>
        /// <param name="schedule"></param>
        /// <returns>ApiResponse of Schedule</returns>
        ApiResponse<Schedule> UpdateScheduleWithHttpInfo(int id, Schedule schedule);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this subtask.</param>
        /// <param name="subtask"></param>
        /// <returns>Subtask</returns>
        Subtask UpdateSubtask(int id, Subtask subtask);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this subtask.</param>
        /// <param name="subtask"></param>
        /// <returns>ApiResponse of Subtask</returns>
        ApiResponse<Subtask> UpdateSubtaskWithHttpInfo(int id, Subtask subtask);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAutomationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AbortTaskAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AbortTaskWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="job"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Job</returns>
        System.Threading.Tasks.Task<Job> CreateJobAsync(Job job, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="job"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Job)</returns>
        System.Threading.Tasks.Task<ApiResponse<Job>> CreateJobWithHttpInfoAsync(Job job, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schedule"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Schedule</returns>
        System.Threading.Tasks.Task<Schedule> CreateScheduleAsync(Schedule schedule, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schedule"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Schedule)</returns>
        System.Threading.Tasks.Task<ApiResponse<Schedule>> CreateScheduleWithHttpInfoAsync(Schedule schedule, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subtask"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Subtask</returns>
        System.Threading.Tasks.Task<Subtask> CreateSubtaskAsync(Subtask subtask, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subtask"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Subtask)</returns>
        System.Threading.Tasks.Task<ApiResponse<Subtask>> CreateSubtaskWithHttpInfoAsync(Subtask subtask, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFinishedTasksAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFinishedTasksWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this job.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteJobAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this job.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteJobWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this schedule.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteScheduleAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this schedule.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteScheduleWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this subtask.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSubtaskAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this subtask.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSubtaskWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTaskAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTaskWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobInstance">Filter the returned list by &#x60;job_instance&#x60;. (optional)</param>
        /// <param name="jobInstanceIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="subtask">Filter the returned list by &#x60;subtask&#x60;. (optional)</param>
        /// <param name="state">Filter the returned list by &#x60;state&#x60;. (optional)</param>
        /// <param name="stateIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="idIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="taskName">Filter the returned list by &#x60;task_name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DownloadAllTaskLogsAsync(string jobInstance = default(string), string jobInstanceIn = default(string), string subtask = default(string), string state = default(string), decimal? stateIn = default(decimal?), string id = default(string), string idIn = default(string), string name = default(string), string taskName = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobInstance">Filter the returned list by &#x60;job_instance&#x60;. (optional)</param>
        /// <param name="jobInstanceIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="subtask">Filter the returned list by &#x60;subtask&#x60;. (optional)</param>
        /// <param name="state">Filter the returned list by &#x60;state&#x60;. (optional)</param>
        /// <param name="stateIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="idIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="taskName">Filter the returned list by &#x60;task_name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DownloadAllTaskLogsWithHttpInfoAsync(string jobInstance = default(string), string jobInstanceIn = default(string), string subtask = default(string), string state = default(string), decimal? stateIn = default(decimal?), string id = default(string), string idIn = default(string), string name = default(string), string taskName = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DownloadTaskLogAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DownloadTaskLogWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> GetAllEventsAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> GetAllEventsWithHttpInfoAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specialType">Filter the returned list by &#x60;special_type&#x60;. (optional)</param>
        /// <param name="specialTypeIsnull">Filter the returned list by &#x60;special_type__isnull&#x60;. (optional)</param>
        /// <param name="hook">Filter the returned list by &#x60;hook&#x60;. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Job&gt;</returns>
        System.Threading.Tasks.Task<List<Job>> GetAllJobsAsync(string specialType = default(string), string specialTypeIsnull = default(string), string hook = default(string), string name = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specialType">Filter the returned list by &#x60;special_type&#x60;. (optional)</param>
        /// <param name="specialTypeIsnull">Filter the returned list by &#x60;special_type__isnull&#x60;. (optional)</param>
        /// <param name="hook">Filter the returned list by &#x60;hook&#x60;. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Job&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Job>>> GetAllJobsWithHttpInfoAsync(string specialType = default(string), string specialTypeIsnull = default(string), string hook = default(string), string name = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="job">Filter the returned list by &#x60;job&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Schedule&gt;</returns>
        System.Threading.Tasks.Task<List<Schedule>> GetAllSchedulesAsync(string job = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="job">Filter the returned list by &#x60;job&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Schedule&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Schedule>>> GetAllSchedulesWithHttpInfoAsync(string job = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">Filter the returned list by &#x60;parent&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Subtask&gt;</returns>
        System.Threading.Tasks.Task<List<Subtask>> GetAllSubtasksAsync(string parent = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">Filter the returned list by &#x60;parent&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Subtask&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Subtask>>> GetAllSubtasksWithHttpInfoAsync(string parent = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> GetAllTaskQueuesAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> GetAllTaskQueuesWithHttpInfoAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2004</returns>
        System.Threading.Tasks.Task<InlineResponse2004> GetAllTaskTypesAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> GetAllTaskTypesWithHttpInfoAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobInstance">Filter the returned list by &#x60;job_instance&#x60;. (optional)</param>
        /// <param name="jobInstanceIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="subtask">Filter the returned list by &#x60;subtask&#x60;. (optional)</param>
        /// <param name="state">Filter the returned list by &#x60;state&#x60;. (optional)</param>
        /// <param name="stateIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="idIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="taskName">Filter the returned list by &#x60;task_name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TaskInfo&gt;</returns>
        System.Threading.Tasks.Task<List<TaskInfo>> GetAllTasksAsync(string jobInstance = default(string), string jobInstanceIn = default(string), string subtask = default(string), string state = default(string), decimal? stateIn = default(decimal?), string id = default(string), string idIn = default(string), string name = default(string), string taskName = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobInstance">Filter the returned list by &#x60;job_instance&#x60;. (optional)</param>
        /// <param name="jobInstanceIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="subtask">Filter the returned list by &#x60;subtask&#x60;. (optional)</param>
        /// <param name="state">Filter the returned list by &#x60;state&#x60;. (optional)</param>
        /// <param name="stateIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="idIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="taskName">Filter the returned list by &#x60;task_name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TaskInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TaskInfo>>> GetAllTasksWithHttpInfoAsync(string jobInstance = default(string), string jobInstanceIn = default(string), string subtask = default(string), string state = default(string), decimal? stateIn = default(decimal?), string id = default(string), string idIn = default(string), string name = default(string), string taskName = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Event</returns>
        System.Threading.Tasks.Task<Event> GetEventAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Event)</returns>
        System.Threading.Tasks.Task<ApiResponse<Event>> GetEventWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobInstance">Filter the returned list by &#x60;job_instance&#x60;. (optional)</param>
        /// <param name="jobInstanceIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="subtask">Filter the returned list by &#x60;subtask&#x60;. (optional)</param>
        /// <param name="state">Filter the returned list by &#x60;state&#x60;. (optional)</param>
        /// <param name="stateIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="idIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="taskName">Filter the returned list by &#x60;task_name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TaskInfo&gt;</returns>
        System.Threading.Tasks.Task<List<TaskInfo>> GetFinishedTasksAsync(string jobInstance = default(string), string jobInstanceIn = default(string), string subtask = default(string), string state = default(string), decimal? stateIn = default(decimal?), string id = default(string), string idIn = default(string), string name = default(string), string taskName = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobInstance">Filter the returned list by &#x60;job_instance&#x60;. (optional)</param>
        /// <param name="jobInstanceIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="subtask">Filter the returned list by &#x60;subtask&#x60;. (optional)</param>
        /// <param name="state">Filter the returned list by &#x60;state&#x60;. (optional)</param>
        /// <param name="stateIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="idIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="taskName">Filter the returned list by &#x60;task_name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TaskInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TaskInfo>>> GetFinishedTasksWithHttpInfoAsync(string jobInstance = default(string), string jobInstanceIn = default(string), string subtask = default(string), string state = default(string), decimal? stateIn = default(decimal?), string id = default(string), string idIn = default(string), string name = default(string), string taskName = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this job.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Job</returns>
        System.Threading.Tasks.Task<Job> GetJobAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this job.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Job)</returns>
        System.Threading.Tasks.Task<ApiResponse<Job>> GetJobWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobInstance">Filter the returned list by &#x60;job_instance&#x60;. (optional)</param>
        /// <param name="jobInstanceIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="subtask">Filter the returned list by &#x60;subtask&#x60;. (optional)</param>
        /// <param name="state">Filter the returned list by &#x60;state&#x60;. (optional)</param>
        /// <param name="stateIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="idIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="taskName">Filter the returned list by &#x60;task_name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TaskInfo&gt;</returns>
        System.Threading.Tasks.Task<List<TaskInfo>> GetPendingTasksAsync(string jobInstance = default(string), string jobInstanceIn = default(string), string subtask = default(string), string state = default(string), decimal? stateIn = default(decimal?), string id = default(string), string idIn = default(string), string name = default(string), string taskName = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobInstance">Filter the returned list by &#x60;job_instance&#x60;. (optional)</param>
        /// <param name="jobInstanceIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="subtask">Filter the returned list by &#x60;subtask&#x60;. (optional)</param>
        /// <param name="state">Filter the returned list by &#x60;state&#x60;. (optional)</param>
        /// <param name="stateIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="idIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="taskName">Filter the returned list by &#x60;task_name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TaskInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TaskInfo>>> GetPendingTasksWithHttpInfoAsync(string jobInstance = default(string), string jobInstanceIn = default(string), string subtask = default(string), string state = default(string), decimal? stateIn = default(decimal?), string id = default(string), string idIn = default(string), string name = default(string), string taskName = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PythonEnvironment&gt;</returns>
        System.Threading.Tasks.Task<List<PythonEnvironment>> GetPythonEnvironmentsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PythonEnvironment&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PythonEnvironment>>> GetPythonEnvironmentsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this schedule.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Schedule</returns>
        System.Threading.Tasks.Task<Schedule> GetScheduleAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this schedule.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Schedule)</returns>
        System.Threading.Tasks.Task<ApiResponse<Schedule>> GetScheduleWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this subtask.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Subtask</returns>
        System.Threading.Tasks.Task<Subtask> GetSubtaskAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this subtask.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Subtask)</returns>
        System.Threading.Tasks.Task<ApiResponse<Subtask>> GetSubtaskWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        System.Threading.Tasks.Task<TaskInfo> GetTaskAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskInfo>> GetTaskWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskLog</returns>
        System.Threading.Tasks.Task<TaskLog> GetTaskLogAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskLog>> GetTaskLogWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskType</returns>
        System.Threading.Tasks.Task<TaskType> GetTaskTypeAsync(string type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskType)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskType>> GetTaskTypeWithHttpInfoAsync(string type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobInstance">Filter the returned list by &#x60;job_instance&#x60;. (optional)</param>
        /// <param name="jobInstanceIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="subtask">Filter the returned list by &#x60;subtask&#x60;. (optional)</param>
        /// <param name="state">Filter the returned list by &#x60;state&#x60;. (optional)</param>
        /// <param name="stateIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="idIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="taskName">Filter the returned list by &#x60;task_name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TasksSummary</returns>
        System.Threading.Tasks.Task<TasksSummary> GetTasksSummaryAsync(string jobInstance = default(string), string jobInstanceIn = default(string), string subtask = default(string), string state = default(string), decimal? stateIn = default(decimal?), string id = default(string), string idIn = default(string), string name = default(string), string taskName = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobInstance">Filter the returned list by &#x60;job_instance&#x60;. (optional)</param>
        /// <param name="jobInstanceIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="subtask">Filter the returned list by &#x60;subtask&#x60;. (optional)</param>
        /// <param name="state">Filter the returned list by &#x60;state&#x60;. (optional)</param>
        /// <param name="stateIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="idIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="taskName">Filter the returned list by &#x60;task_name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TasksSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<TasksSummary>> GetTasksSummaryWithHttpInfoAsync(string jobInstance = default(string), string jobInstanceIn = default(string), string subtask = default(string), string state = default(string), decimal? stateIn = default(decimal?), string id = default(string), string idIn = default(string), string name = default(string), string taskName = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task KillAllPendingTasksAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> KillAllPendingTasksWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task KillTaskAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> KillTaskWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this job.</param>
        /// <param name="jobPartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Job</returns>
        System.Threading.Tasks.Task<Job> PatchJobAsync(int id, JobPartialUpdate jobPartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this job.</param>
        /// <param name="jobPartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Job)</returns>
        System.Threading.Tasks.Task<ApiResponse<Job>> PatchJobWithHttpInfoAsync(int id, JobPartialUpdate jobPartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this schedule.</param>
        /// <param name="schedulePartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Schedule</returns>
        System.Threading.Tasks.Task<Schedule> PatchScheduleAsync(int id, SchedulePartialUpdate schedulePartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this schedule.</param>
        /// <param name="schedulePartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Schedule)</returns>
        System.Threading.Tasks.Task<ApiResponse<Schedule>> PatchScheduleWithHttpInfoAsync(int id, SchedulePartialUpdate schedulePartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this subtask.</param>
        /// <param name="subtaskPartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Subtask</returns>
        System.Threading.Tasks.Task<Subtask> PatchSubtaskAsync(int id, SubtaskPartialUpdate subtaskPartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this subtask.</param>
        /// <param name="subtaskPartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Subtask)</returns>
        System.Threading.Tasks.Task<ApiResponse<Subtask>> PatchSubtaskWithHttpInfoAsync(int id, SubtaskPartialUpdate subtaskPartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        System.Threading.Tasks.Task<TaskInfo> RestartTaskAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskInfo>> RestartTaskWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this job.</param>
        /// <param name="startJobRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TaskInfo&gt;</returns>
        System.Threading.Tasks.Task<List<TaskInfo>> StartJobAsync(int id, StartJobRequest startJobRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this job.</param>
        /// <param name="startJobRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TaskInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TaskInfo>>> StartJobWithHttpInfoAsync(int id, StartJobRequest startJobRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTaskRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        System.Threading.Tasks.Task<TaskInfo> StartTaskAsync(StartTaskRequest startTaskRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTaskRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskInfo>> StartTaskWithHttpInfoAsync(StartTaskRequest startTaskRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this job.</param>
        /// <param name="job"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Job</returns>
        System.Threading.Tasks.Task<Job> UpdateJobAsync(int id, Job job, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this job.</param>
        /// <param name="job"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Job)</returns>
        System.Threading.Tasks.Task<ApiResponse<Job>> UpdateJobWithHttpInfoAsync(int id, Job job, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this schedule.</param>
        /// <param name="schedule"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Schedule</returns>
        System.Threading.Tasks.Task<Schedule> UpdateScheduleAsync(int id, Schedule schedule, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this schedule.</param>
        /// <param name="schedule"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Schedule)</returns>
        System.Threading.Tasks.Task<ApiResponse<Schedule>> UpdateScheduleWithHttpInfoAsync(int id, Schedule schedule, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this subtask.</param>
        /// <param name="subtask"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Subtask</returns>
        System.Threading.Tasks.Task<Subtask> UpdateSubtaskAsync(int id, Subtask subtask, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </remarks>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this subtask.</param>
        /// <param name="subtask"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Subtask)</returns>
        System.Threading.Tasks.Task<ApiResponse<Subtask>> UpdateSubtaskWithHttpInfoAsync(int id, Subtask subtask, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAutomationApi : IAutomationApiSync, IAutomationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AutomationApi : IAutomationApi
    {
        private ElementsSDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AutomationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AutomationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AutomationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AutomationApi(String basePath)
        {
            this.Configuration = ElementsSDK.Client.Configuration.MergeConfigurations(
                ElementsSDK.Client.GlobalConfiguration.Instance,
                new ElementsSDK.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ElementsSDK.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ElementsSDK.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ElementsSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AutomationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AutomationApi(ElementsSDK.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ElementsSDK.Client.Configuration.MergeConfigurations(
                ElementsSDK.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ElementsSDK.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ElementsSDK.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ElementsSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AutomationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AutomationApi(ElementsSDK.Client.ISynchronousClient client, ElementsSDK.Client.IAsynchronousClient asyncClient, ElementsSDK.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ElementsSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ElementsSDK.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ElementsSDK.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ElementsSDK.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ElementsSDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <returns></returns>
        public void AbortTask(string id)
        {
            AbortTaskWithHttpInfo(id);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> AbortTaskWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'id' when calling AutomationApi->AbortTask");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/2/tasks/{id}/abort", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AbortTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AbortTaskAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AbortTaskWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> AbortTaskWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'id' when calling AutomationApi->AbortTask");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/2/tasks/{id}/abort", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AbortTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="job"></param>
        /// <returns>Job</returns>
        public Job CreateJob(Job job)
        {
            ElementsSDK.Client.ApiResponse<Job> localVarResponse = CreateJobWithHttpInfo(job);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="job"></param>
        /// <returns>ApiResponse of Job</returns>
        public ElementsSDK.Client.ApiResponse<Job> CreateJobWithHttpInfo(Job job)
        {
            // verify the required parameter 'job' is set
            if (job == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'job' when calling AutomationApi->CreateJob");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = job;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Job>("/api/2/jobs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="job"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Job</returns>
        public async System.Threading.Tasks.Task<Job> CreateJobAsync(Job job, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<Job> localVarResponse = await CreateJobWithHttpInfoAsync(job, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="job"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Job)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Job>> CreateJobWithHttpInfoAsync(Job job, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'job' is set
            if (job == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'job' when calling AutomationApi->CreateJob");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = job;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Job>("/api/2/jobs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schedule"></param>
        /// <returns>Schedule</returns>
        public Schedule CreateSchedule(Schedule schedule)
        {
            ElementsSDK.Client.ApiResponse<Schedule> localVarResponse = CreateScheduleWithHttpInfo(schedule);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schedule"></param>
        /// <returns>ApiResponse of Schedule</returns>
        public ElementsSDK.Client.ApiResponse<Schedule> CreateScheduleWithHttpInfo(Schedule schedule)
        {
            // verify the required parameter 'schedule' is set
            if (schedule == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'schedule' when calling AutomationApi->CreateSchedule");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = schedule;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Schedule>("/api/2/schedules", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSchedule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schedule"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Schedule</returns>
        public async System.Threading.Tasks.Task<Schedule> CreateScheduleAsync(Schedule schedule, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<Schedule> localVarResponse = await CreateScheduleWithHttpInfoAsync(schedule, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schedule"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Schedule)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Schedule>> CreateScheduleWithHttpInfoAsync(Schedule schedule, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'schedule' is set
            if (schedule == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'schedule' when calling AutomationApi->CreateSchedule");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = schedule;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Schedule>("/api/2/schedules", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSchedule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subtask"></param>
        /// <returns>Subtask</returns>
        public Subtask CreateSubtask(Subtask subtask)
        {
            ElementsSDK.Client.ApiResponse<Subtask> localVarResponse = CreateSubtaskWithHttpInfo(subtask);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subtask"></param>
        /// <returns>ApiResponse of Subtask</returns>
        public ElementsSDK.Client.ApiResponse<Subtask> CreateSubtaskWithHttpInfo(Subtask subtask)
        {
            // verify the required parameter 'subtask' is set
            if (subtask == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'subtask' when calling AutomationApi->CreateSubtask");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = subtask;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Subtask>("/api/2/subtasks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSubtask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subtask"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Subtask</returns>
        public async System.Threading.Tasks.Task<Subtask> CreateSubtaskAsync(Subtask subtask, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<Subtask> localVarResponse = await CreateSubtaskWithHttpInfoAsync(subtask, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subtask"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Subtask)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Subtask>> CreateSubtaskWithHttpInfoAsync(Subtask subtask, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subtask' is set
            if (subtask == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'subtask' when calling AutomationApi->CreateSubtask");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = subtask;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Subtask>("/api/2/subtasks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSubtask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void DeleteFinishedTasks()
        {
            DeleteFinishedTasksWithHttpInfo();
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> DeleteFinishedTasksWithHttpInfo()
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/2/tasks/finished", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFinishedTasks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFinishedTasksAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteFinishedTasksWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> DeleteFinishedTasksWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/2/tasks/finished", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFinishedTasks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this job.</param>
        /// <returns></returns>
        public void DeleteJob(int id)
        {
            DeleteJobWithHttpInfo(id);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this job.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> DeleteJobWithHttpInfo(int id)
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/2/jobs/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this job.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteJobAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteJobWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this job.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> DeleteJobWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/2/jobs/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this schedule.</param>
        /// <returns></returns>
        public void DeleteSchedule(int id)
        {
            DeleteScheduleWithHttpInfo(id);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this schedule.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> DeleteScheduleWithHttpInfo(int id)
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/2/schedules/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSchedule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this schedule.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteScheduleAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteScheduleWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this schedule.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> DeleteScheduleWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/2/schedules/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSchedule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this subtask.</param>
        /// <returns></returns>
        public void DeleteSubtask(int id)
        {
            DeleteSubtaskWithHttpInfo(id);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this subtask.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> DeleteSubtaskWithHttpInfo(int id)
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/2/subtasks/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSubtask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this subtask.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSubtaskAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteSubtaskWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this subtask.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> DeleteSubtaskWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/2/subtasks/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSubtask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <returns></returns>
        public void DeleteTask(string id)
        {
            DeleteTaskWithHttpInfo(id);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> DeleteTaskWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'id' when calling AutomationApi->DeleteTask");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/2/tasks/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTaskAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteTaskWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> DeleteTaskWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'id' when calling AutomationApi->DeleteTask");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/2/tasks/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobInstance">Filter the returned list by &#x60;job_instance&#x60;. (optional)</param>
        /// <param name="jobInstanceIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="subtask">Filter the returned list by &#x60;subtask&#x60;. (optional)</param>
        /// <param name="state">Filter the returned list by &#x60;state&#x60;. (optional)</param>
        /// <param name="stateIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="idIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="taskName">Filter the returned list by &#x60;task_name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns></returns>
        public void DownloadAllTaskLogs(string jobInstance = default(string), string jobInstanceIn = default(string), string subtask = default(string), string state = default(string), decimal? stateIn = default(decimal?), string id = default(string), string idIn = default(string), string name = default(string), string taskName = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            DownloadAllTaskLogsWithHttpInfo(jobInstance, jobInstanceIn, subtask, state, stateIn, id, idIn, name, taskName, ordering, limit, offset);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobInstance">Filter the returned list by &#x60;job_instance&#x60;. (optional)</param>
        /// <param name="jobInstanceIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="subtask">Filter the returned list by &#x60;subtask&#x60;. (optional)</param>
        /// <param name="state">Filter the returned list by &#x60;state&#x60;. (optional)</param>
        /// <param name="stateIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="idIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="taskName">Filter the returned list by &#x60;task_name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> DownloadAllTaskLogsWithHttpInfo(string jobInstance = default(string), string jobInstanceIn = default(string), string subtask = default(string), string state = default(string), decimal? stateIn = default(decimal?), string id = default(string), string idIn = default(string), string name = default(string), string taskName = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (jobInstance != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "job_instance", jobInstance));
            }
            if (jobInstanceIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "job_instance__in", jobInstanceIn));
            }
            if (subtask != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "subtask", subtask));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (stateIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "state__in", stateIn));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (idIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "id__in", idIn));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (taskName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "task_name", taskName));
            }
            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/2/tasks/logs/download", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadAllTaskLogs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobInstance">Filter the returned list by &#x60;job_instance&#x60;. (optional)</param>
        /// <param name="jobInstanceIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="subtask">Filter the returned list by &#x60;subtask&#x60;. (optional)</param>
        /// <param name="state">Filter the returned list by &#x60;state&#x60;. (optional)</param>
        /// <param name="stateIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="idIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="taskName">Filter the returned list by &#x60;task_name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DownloadAllTaskLogsAsync(string jobInstance = default(string), string jobInstanceIn = default(string), string subtask = default(string), string state = default(string), decimal? stateIn = default(decimal?), string id = default(string), string idIn = default(string), string name = default(string), string taskName = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DownloadAllTaskLogsWithHttpInfoAsync(jobInstance, jobInstanceIn, subtask, state, stateIn, id, idIn, name, taskName, ordering, limit, offset, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobInstance">Filter the returned list by &#x60;job_instance&#x60;. (optional)</param>
        /// <param name="jobInstanceIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="subtask">Filter the returned list by &#x60;subtask&#x60;. (optional)</param>
        /// <param name="state">Filter the returned list by &#x60;state&#x60;. (optional)</param>
        /// <param name="stateIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="idIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="taskName">Filter the returned list by &#x60;task_name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> DownloadAllTaskLogsWithHttpInfoAsync(string jobInstance = default(string), string jobInstanceIn = default(string), string subtask = default(string), string state = default(string), decimal? stateIn = default(decimal?), string id = default(string), string idIn = default(string), string name = default(string), string taskName = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (jobInstance != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "job_instance", jobInstance));
            }
            if (jobInstanceIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "job_instance__in", jobInstanceIn));
            }
            if (subtask != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "subtask", subtask));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (stateIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "state__in", stateIn));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (idIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "id__in", idIn));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (taskName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "task_name", taskName));
            }
            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/2/tasks/logs/download", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadAllTaskLogs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <returns></returns>
        public void DownloadTaskLog(string id)
        {
            DownloadTaskLogWithHttpInfo(id);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> DownloadTaskLogWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'id' when calling AutomationApi->DownloadTaskLog");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/2/tasks/{id}/log/download", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadTaskLog", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DownloadTaskLogAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DownloadTaskLogWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> DownloadTaskLogWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'id' when calling AutomationApi->DownloadTaskLog");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/2/tasks/{id}/log/download", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadTaskLog", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 GetAllEvents(string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.ApiResponse<InlineResponse2002> localVarResponse = GetAllEventsWithHttpInfo(ordering, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public ElementsSDK.Client.ApiResponse<InlineResponse2002> GetAllEventsWithHttpInfo(string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse2002>("/api/2/events", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllEvents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002> GetAllEventsAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<InlineResponse2002> localVarResponse = await GetAllEventsWithHttpInfoAsync(ordering, limit, offset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<InlineResponse2002>> GetAllEventsWithHttpInfoAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2002>("/api/2/events", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllEvents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specialType">Filter the returned list by &#x60;special_type&#x60;. (optional)</param>
        /// <param name="specialTypeIsnull">Filter the returned list by &#x60;special_type__isnull&#x60;. (optional)</param>
        /// <param name="hook">Filter the returned list by &#x60;hook&#x60;. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>List&lt;Job&gt;</returns>
        public List<Job> GetAllJobs(string specialType = default(string), string specialTypeIsnull = default(string), string hook = default(string), string name = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.ApiResponse<List<Job>> localVarResponse = GetAllJobsWithHttpInfo(specialType, specialTypeIsnull, hook, name, ordering, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specialType">Filter the returned list by &#x60;special_type&#x60;. (optional)</param>
        /// <param name="specialTypeIsnull">Filter the returned list by &#x60;special_type__isnull&#x60;. (optional)</param>
        /// <param name="hook">Filter the returned list by &#x60;hook&#x60;. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;Job&gt;</returns>
        public ElementsSDK.Client.ApiResponse<List<Job>> GetAllJobsWithHttpInfo(string specialType = default(string), string specialTypeIsnull = default(string), string hook = default(string), string name = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (specialType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "special_type", specialType));
            }
            if (specialTypeIsnull != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "special_type__isnull", specialTypeIsnull));
            }
            if (hook != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "hook", hook));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Job>>("/api/2/jobs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllJobs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specialType">Filter the returned list by &#x60;special_type&#x60;. (optional)</param>
        /// <param name="specialTypeIsnull">Filter the returned list by &#x60;special_type__isnull&#x60;. (optional)</param>
        /// <param name="hook">Filter the returned list by &#x60;hook&#x60;. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Job&gt;</returns>
        public async System.Threading.Tasks.Task<List<Job>> GetAllJobsAsync(string specialType = default(string), string specialTypeIsnull = default(string), string hook = default(string), string name = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<List<Job>> localVarResponse = await GetAllJobsWithHttpInfoAsync(specialType, specialTypeIsnull, hook, name, ordering, limit, offset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="specialType">Filter the returned list by &#x60;special_type&#x60;. (optional)</param>
        /// <param name="specialTypeIsnull">Filter the returned list by &#x60;special_type__isnull&#x60;. (optional)</param>
        /// <param name="hook">Filter the returned list by &#x60;hook&#x60;. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Job&gt;)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<List<Job>>> GetAllJobsWithHttpInfoAsync(string specialType = default(string), string specialTypeIsnull = default(string), string hook = default(string), string name = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (specialType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "special_type", specialType));
            }
            if (specialTypeIsnull != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "special_type__isnull", specialTypeIsnull));
            }
            if (hook != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "hook", hook));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Job>>("/api/2/jobs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllJobs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="job">Filter the returned list by &#x60;job&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>List&lt;Schedule&gt;</returns>
        public List<Schedule> GetAllSchedules(string job = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.ApiResponse<List<Schedule>> localVarResponse = GetAllSchedulesWithHttpInfo(job, ordering, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="job">Filter the returned list by &#x60;job&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;Schedule&gt;</returns>
        public ElementsSDK.Client.ApiResponse<List<Schedule>> GetAllSchedulesWithHttpInfo(string job = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (job != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "job", job));
            }
            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Schedule>>("/api/2/schedules", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllSchedules", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="job">Filter the returned list by &#x60;job&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Schedule&gt;</returns>
        public async System.Threading.Tasks.Task<List<Schedule>> GetAllSchedulesAsync(string job = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<List<Schedule>> localVarResponse = await GetAllSchedulesWithHttpInfoAsync(job, ordering, limit, offset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="job">Filter the returned list by &#x60;job&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Schedule&gt;)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<List<Schedule>>> GetAllSchedulesWithHttpInfoAsync(string job = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (job != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "job", job));
            }
            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Schedule>>("/api/2/schedules", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllSchedules", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">Filter the returned list by &#x60;parent&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>List&lt;Subtask&gt;</returns>
        public List<Subtask> GetAllSubtasks(string parent = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.ApiResponse<List<Subtask>> localVarResponse = GetAllSubtasksWithHttpInfo(parent, ordering, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">Filter the returned list by &#x60;parent&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;Subtask&gt;</returns>
        public ElementsSDK.Client.ApiResponse<List<Subtask>> GetAllSubtasksWithHttpInfo(string parent = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (parent != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "parent", parent));
            }
            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Subtask>>("/api/2/subtasks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllSubtasks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">Filter the returned list by &#x60;parent&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Subtask&gt;</returns>
        public async System.Threading.Tasks.Task<List<Subtask>> GetAllSubtasksAsync(string parent = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<List<Subtask>> localVarResponse = await GetAllSubtasksWithHttpInfoAsync(parent, ordering, limit, offset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent">Filter the returned list by &#x60;parent&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Subtask&gt;)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<List<Subtask>>> GetAllSubtasksWithHttpInfoAsync(string parent = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (parent != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "parent", parent));
            }
            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Subtask>>("/api/2/subtasks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllSubtasks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 GetAllTaskQueues(string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.ApiResponse<InlineResponse2003> localVarResponse = GetAllTaskQueuesWithHttpInfo(ordering, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ElementsSDK.Client.ApiResponse<InlineResponse2003> GetAllTaskQueuesWithHttpInfo(string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse2003>("/api/2/tasks/queues", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllTaskQueues", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> GetAllTaskQueuesAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<InlineResponse2003> localVarResponse = await GetAllTaskQueuesWithHttpInfoAsync(ordering, limit, offset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<InlineResponse2003>> GetAllTaskQueuesWithHttpInfoAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2003>("/api/2/tasks/queues", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllTaskQueues", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>InlineResponse2004</returns>
        public InlineResponse2004 GetAllTaskTypes(string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.ApiResponse<InlineResponse2004> localVarResponse = GetAllTaskTypesWithHttpInfo(ordering, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        public ElementsSDK.Client.ApiResponse<InlineResponse2004> GetAllTaskTypesWithHttpInfo(string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse2004>("/api/2/tasks/types", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllTaskTypes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2004</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004> GetAllTaskTypesAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<InlineResponse2004> localVarResponse = await GetAllTaskTypesWithHttpInfoAsync(ordering, limit, offset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<InlineResponse2004>> GetAllTaskTypesWithHttpInfoAsync(string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2004>("/api/2/tasks/types", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllTaskTypes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobInstance">Filter the returned list by &#x60;job_instance&#x60;. (optional)</param>
        /// <param name="jobInstanceIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="subtask">Filter the returned list by &#x60;subtask&#x60;. (optional)</param>
        /// <param name="state">Filter the returned list by &#x60;state&#x60;. (optional)</param>
        /// <param name="stateIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="idIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="taskName">Filter the returned list by &#x60;task_name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>List&lt;TaskInfo&gt;</returns>
        public List<TaskInfo> GetAllTasks(string jobInstance = default(string), string jobInstanceIn = default(string), string subtask = default(string), string state = default(string), decimal? stateIn = default(decimal?), string id = default(string), string idIn = default(string), string name = default(string), string taskName = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.ApiResponse<List<TaskInfo>> localVarResponse = GetAllTasksWithHttpInfo(jobInstance, jobInstanceIn, subtask, state, stateIn, id, idIn, name, taskName, ordering, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobInstance">Filter the returned list by &#x60;job_instance&#x60;. (optional)</param>
        /// <param name="jobInstanceIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="subtask">Filter the returned list by &#x60;subtask&#x60;. (optional)</param>
        /// <param name="state">Filter the returned list by &#x60;state&#x60;. (optional)</param>
        /// <param name="stateIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="idIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="taskName">Filter the returned list by &#x60;task_name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;TaskInfo&gt;</returns>
        public ElementsSDK.Client.ApiResponse<List<TaskInfo>> GetAllTasksWithHttpInfo(string jobInstance = default(string), string jobInstanceIn = default(string), string subtask = default(string), string state = default(string), decimal? stateIn = default(decimal?), string id = default(string), string idIn = default(string), string name = default(string), string taskName = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (jobInstance != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "job_instance", jobInstance));
            }
            if (jobInstanceIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "job_instance__in", jobInstanceIn));
            }
            if (subtask != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "subtask", subtask));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (stateIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "state__in", stateIn));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (idIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "id__in", idIn));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (taskName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "task_name", taskName));
            }
            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TaskInfo>>("/api/2/tasks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllTasks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobInstance">Filter the returned list by &#x60;job_instance&#x60;. (optional)</param>
        /// <param name="jobInstanceIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="subtask">Filter the returned list by &#x60;subtask&#x60;. (optional)</param>
        /// <param name="state">Filter the returned list by &#x60;state&#x60;. (optional)</param>
        /// <param name="stateIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="idIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="taskName">Filter the returned list by &#x60;task_name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TaskInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<TaskInfo>> GetAllTasksAsync(string jobInstance = default(string), string jobInstanceIn = default(string), string subtask = default(string), string state = default(string), decimal? stateIn = default(decimal?), string id = default(string), string idIn = default(string), string name = default(string), string taskName = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<List<TaskInfo>> localVarResponse = await GetAllTasksWithHttpInfoAsync(jobInstance, jobInstanceIn, subtask, state, stateIn, id, idIn, name, taskName, ordering, limit, offset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobInstance">Filter the returned list by &#x60;job_instance&#x60;. (optional)</param>
        /// <param name="jobInstanceIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="subtask">Filter the returned list by &#x60;subtask&#x60;. (optional)</param>
        /// <param name="state">Filter the returned list by &#x60;state&#x60;. (optional)</param>
        /// <param name="stateIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="idIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="taskName">Filter the returned list by &#x60;task_name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TaskInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<List<TaskInfo>>> GetAllTasksWithHttpInfoAsync(string jobInstance = default(string), string jobInstanceIn = default(string), string subtask = default(string), string state = default(string), decimal? stateIn = default(decimal?), string id = default(string), string idIn = default(string), string name = default(string), string taskName = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (jobInstance != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "job_instance", jobInstance));
            }
            if (jobInstanceIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "job_instance__in", jobInstanceIn));
            }
            if (subtask != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "subtask", subtask));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (stateIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "state__in", stateIn));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (idIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "id__in", idIn));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (taskName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "task_name", taskName));
            }
            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TaskInfo>>("/api/2/tasks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllTasks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Event</returns>
        public Event GetEvent(string id)
        {
            ElementsSDK.Client.ApiResponse<Event> localVarResponse = GetEventWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Event</returns>
        public ElementsSDK.Client.ApiResponse<Event> GetEventWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'id' when calling AutomationApi->GetEvent");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Event>("/api/2/events/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEvent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Event</returns>
        public async System.Threading.Tasks.Task<Event> GetEventAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<Event> localVarResponse = await GetEventWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Event)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Event>> GetEventWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'id' when calling AutomationApi->GetEvent");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Event>("/api/2/events/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEvent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobInstance">Filter the returned list by &#x60;job_instance&#x60;. (optional)</param>
        /// <param name="jobInstanceIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="subtask">Filter the returned list by &#x60;subtask&#x60;. (optional)</param>
        /// <param name="state">Filter the returned list by &#x60;state&#x60;. (optional)</param>
        /// <param name="stateIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="idIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="taskName">Filter the returned list by &#x60;task_name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>List&lt;TaskInfo&gt;</returns>
        public List<TaskInfo> GetFinishedTasks(string jobInstance = default(string), string jobInstanceIn = default(string), string subtask = default(string), string state = default(string), decimal? stateIn = default(decimal?), string id = default(string), string idIn = default(string), string name = default(string), string taskName = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.ApiResponse<List<TaskInfo>> localVarResponse = GetFinishedTasksWithHttpInfo(jobInstance, jobInstanceIn, subtask, state, stateIn, id, idIn, name, taskName, ordering, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobInstance">Filter the returned list by &#x60;job_instance&#x60;. (optional)</param>
        /// <param name="jobInstanceIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="subtask">Filter the returned list by &#x60;subtask&#x60;. (optional)</param>
        /// <param name="state">Filter the returned list by &#x60;state&#x60;. (optional)</param>
        /// <param name="stateIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="idIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="taskName">Filter the returned list by &#x60;task_name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;TaskInfo&gt;</returns>
        public ElementsSDK.Client.ApiResponse<List<TaskInfo>> GetFinishedTasksWithHttpInfo(string jobInstance = default(string), string jobInstanceIn = default(string), string subtask = default(string), string state = default(string), decimal? stateIn = default(decimal?), string id = default(string), string idIn = default(string), string name = default(string), string taskName = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (jobInstance != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "job_instance", jobInstance));
            }
            if (jobInstanceIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "job_instance__in", jobInstanceIn));
            }
            if (subtask != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "subtask", subtask));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (stateIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "state__in", stateIn));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (idIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "id__in", idIn));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (taskName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "task_name", taskName));
            }
            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TaskInfo>>("/api/2/tasks/finished", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFinishedTasks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobInstance">Filter the returned list by &#x60;job_instance&#x60;. (optional)</param>
        /// <param name="jobInstanceIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="subtask">Filter the returned list by &#x60;subtask&#x60;. (optional)</param>
        /// <param name="state">Filter the returned list by &#x60;state&#x60;. (optional)</param>
        /// <param name="stateIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="idIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="taskName">Filter the returned list by &#x60;task_name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TaskInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<TaskInfo>> GetFinishedTasksAsync(string jobInstance = default(string), string jobInstanceIn = default(string), string subtask = default(string), string state = default(string), decimal? stateIn = default(decimal?), string id = default(string), string idIn = default(string), string name = default(string), string taskName = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<List<TaskInfo>> localVarResponse = await GetFinishedTasksWithHttpInfoAsync(jobInstance, jobInstanceIn, subtask, state, stateIn, id, idIn, name, taskName, ordering, limit, offset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobInstance">Filter the returned list by &#x60;job_instance&#x60;. (optional)</param>
        /// <param name="jobInstanceIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="subtask">Filter the returned list by &#x60;subtask&#x60;. (optional)</param>
        /// <param name="state">Filter the returned list by &#x60;state&#x60;. (optional)</param>
        /// <param name="stateIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="idIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="taskName">Filter the returned list by &#x60;task_name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TaskInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<List<TaskInfo>>> GetFinishedTasksWithHttpInfoAsync(string jobInstance = default(string), string jobInstanceIn = default(string), string subtask = default(string), string state = default(string), decimal? stateIn = default(decimal?), string id = default(string), string idIn = default(string), string name = default(string), string taskName = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (jobInstance != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "job_instance", jobInstance));
            }
            if (jobInstanceIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "job_instance__in", jobInstanceIn));
            }
            if (subtask != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "subtask", subtask));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (stateIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "state__in", stateIn));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (idIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "id__in", idIn));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (taskName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "task_name", taskName));
            }
            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TaskInfo>>("/api/2/tasks/finished", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFinishedTasks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this job.</param>
        /// <returns>Job</returns>
        public Job GetJob(int id)
        {
            ElementsSDK.Client.ApiResponse<Job> localVarResponse = GetJobWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this job.</param>
        /// <returns>ApiResponse of Job</returns>
        public ElementsSDK.Client.ApiResponse<Job> GetJobWithHttpInfo(int id)
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Job>("/api/2/jobs/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this job.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Job</returns>
        public async System.Threading.Tasks.Task<Job> GetJobAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<Job> localVarResponse = await GetJobWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this job.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Job)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Job>> GetJobWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Job>("/api/2/jobs/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobInstance">Filter the returned list by &#x60;job_instance&#x60;. (optional)</param>
        /// <param name="jobInstanceIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="subtask">Filter the returned list by &#x60;subtask&#x60;. (optional)</param>
        /// <param name="state">Filter the returned list by &#x60;state&#x60;. (optional)</param>
        /// <param name="stateIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="idIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="taskName">Filter the returned list by &#x60;task_name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>List&lt;TaskInfo&gt;</returns>
        public List<TaskInfo> GetPendingTasks(string jobInstance = default(string), string jobInstanceIn = default(string), string subtask = default(string), string state = default(string), decimal? stateIn = default(decimal?), string id = default(string), string idIn = default(string), string name = default(string), string taskName = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.ApiResponse<List<TaskInfo>> localVarResponse = GetPendingTasksWithHttpInfo(jobInstance, jobInstanceIn, subtask, state, stateIn, id, idIn, name, taskName, ordering, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobInstance">Filter the returned list by &#x60;job_instance&#x60;. (optional)</param>
        /// <param name="jobInstanceIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="subtask">Filter the returned list by &#x60;subtask&#x60;. (optional)</param>
        /// <param name="state">Filter the returned list by &#x60;state&#x60;. (optional)</param>
        /// <param name="stateIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="idIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="taskName">Filter the returned list by &#x60;task_name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;TaskInfo&gt;</returns>
        public ElementsSDK.Client.ApiResponse<List<TaskInfo>> GetPendingTasksWithHttpInfo(string jobInstance = default(string), string jobInstanceIn = default(string), string subtask = default(string), string state = default(string), decimal? stateIn = default(decimal?), string id = default(string), string idIn = default(string), string name = default(string), string taskName = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (jobInstance != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "job_instance", jobInstance));
            }
            if (jobInstanceIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "job_instance__in", jobInstanceIn));
            }
            if (subtask != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "subtask", subtask));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (stateIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "state__in", stateIn));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (idIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "id__in", idIn));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (taskName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "task_name", taskName));
            }
            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TaskInfo>>("/api/2/tasks/pending", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPendingTasks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobInstance">Filter the returned list by &#x60;job_instance&#x60;. (optional)</param>
        /// <param name="jobInstanceIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="subtask">Filter the returned list by &#x60;subtask&#x60;. (optional)</param>
        /// <param name="state">Filter the returned list by &#x60;state&#x60;. (optional)</param>
        /// <param name="stateIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="idIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="taskName">Filter the returned list by &#x60;task_name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TaskInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<TaskInfo>> GetPendingTasksAsync(string jobInstance = default(string), string jobInstanceIn = default(string), string subtask = default(string), string state = default(string), decimal? stateIn = default(decimal?), string id = default(string), string idIn = default(string), string name = default(string), string taskName = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<List<TaskInfo>> localVarResponse = await GetPendingTasksWithHttpInfoAsync(jobInstance, jobInstanceIn, subtask, state, stateIn, id, idIn, name, taskName, ordering, limit, offset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobInstance">Filter the returned list by &#x60;job_instance&#x60;. (optional)</param>
        /// <param name="jobInstanceIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="subtask">Filter the returned list by &#x60;subtask&#x60;. (optional)</param>
        /// <param name="state">Filter the returned list by &#x60;state&#x60;. (optional)</param>
        /// <param name="stateIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="idIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="taskName">Filter the returned list by &#x60;task_name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TaskInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<List<TaskInfo>>> GetPendingTasksWithHttpInfoAsync(string jobInstance = default(string), string jobInstanceIn = default(string), string subtask = default(string), string state = default(string), decimal? stateIn = default(decimal?), string id = default(string), string idIn = default(string), string name = default(string), string taskName = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (jobInstance != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "job_instance", jobInstance));
            }
            if (jobInstanceIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "job_instance__in", jobInstanceIn));
            }
            if (subtask != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "subtask", subtask));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (stateIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "state__in", stateIn));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (idIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "id__in", idIn));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (taskName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "task_name", taskName));
            }
            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TaskInfo>>("/api/2/tasks/pending", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPendingTasks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PythonEnvironment&gt;</returns>
        public List<PythonEnvironment> GetPythonEnvironments()
        {
            ElementsSDK.Client.ApiResponse<List<PythonEnvironment>> localVarResponse = GetPythonEnvironmentsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PythonEnvironment&gt;</returns>
        public ElementsSDK.Client.ApiResponse<List<PythonEnvironment>> GetPythonEnvironmentsWithHttpInfo()
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PythonEnvironment>>("/api/2/python/environments", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPythonEnvironments", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PythonEnvironment&gt;</returns>
        public async System.Threading.Tasks.Task<List<PythonEnvironment>> GetPythonEnvironmentsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<List<PythonEnvironment>> localVarResponse = await GetPythonEnvironmentsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PythonEnvironment&gt;)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<List<PythonEnvironment>>> GetPythonEnvironmentsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PythonEnvironment>>("/api/2/python/environments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPythonEnvironments", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this schedule.</param>
        /// <returns>Schedule</returns>
        public Schedule GetSchedule(int id)
        {
            ElementsSDK.Client.ApiResponse<Schedule> localVarResponse = GetScheduleWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this schedule.</param>
        /// <returns>ApiResponse of Schedule</returns>
        public ElementsSDK.Client.ApiResponse<Schedule> GetScheduleWithHttpInfo(int id)
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Schedule>("/api/2/schedules/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSchedule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this schedule.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Schedule</returns>
        public async System.Threading.Tasks.Task<Schedule> GetScheduleAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<Schedule> localVarResponse = await GetScheduleWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this schedule.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Schedule)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Schedule>> GetScheduleWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Schedule>("/api/2/schedules/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSchedule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this subtask.</param>
        /// <returns>Subtask</returns>
        public Subtask GetSubtask(int id)
        {
            ElementsSDK.Client.ApiResponse<Subtask> localVarResponse = GetSubtaskWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this subtask.</param>
        /// <returns>ApiResponse of Subtask</returns>
        public ElementsSDK.Client.ApiResponse<Subtask> GetSubtaskWithHttpInfo(int id)
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Subtask>("/api/2/subtasks/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSubtask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this subtask.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Subtask</returns>
        public async System.Threading.Tasks.Task<Subtask> GetSubtaskAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<Subtask> localVarResponse = await GetSubtaskWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this subtask.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Subtask)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Subtask>> GetSubtaskWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Subtask>("/api/2/subtasks/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSubtask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <returns>TaskInfo</returns>
        public TaskInfo GetTask(string id)
        {
            ElementsSDK.Client.ApiResponse<TaskInfo> localVarResponse = GetTaskWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        public ElementsSDK.Client.ApiResponse<TaskInfo> GetTaskWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'id' when calling AutomationApi->GetTask");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TaskInfo>("/api/2/tasks/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        public async System.Threading.Tasks.Task<TaskInfo> GetTaskAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<TaskInfo> localVarResponse = await GetTaskWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<TaskInfo>> GetTaskWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'id' when calling AutomationApi->GetTask");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TaskInfo>("/api/2/tasks/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <returns>TaskLog</returns>
        public TaskLog GetTaskLog(string id)
        {
            ElementsSDK.Client.ApiResponse<TaskLog> localVarResponse = GetTaskLogWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <returns>ApiResponse of TaskLog</returns>
        public ElementsSDK.Client.ApiResponse<TaskLog> GetTaskLogWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'id' when calling AutomationApi->GetTaskLog");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TaskLog>("/api/2/tasks/{id}/log", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTaskLog", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskLog</returns>
        public async System.Threading.Tasks.Task<TaskLog> GetTaskLogAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<TaskLog> localVarResponse = await GetTaskLogWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskLog)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<TaskLog>> GetTaskLogWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'id' when calling AutomationApi->GetTaskLog");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TaskLog>("/api/2/tasks/{id}/log", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTaskLog", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <returns>TaskType</returns>
        public TaskType GetTaskType(string type)
        {
            ElementsSDK.Client.ApiResponse<TaskType> localVarResponse = GetTaskTypeWithHttpInfo(type);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <returns>ApiResponse of TaskType</returns>
        public ElementsSDK.Client.ApiResponse<TaskType> GetTaskTypeWithHttpInfo(string type)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'type' when calling AutomationApi->GetTaskType");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("type", ElementsSDK.Client.ClientUtils.ParameterToString(type)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TaskType>("/api/2/tasks/types/{type}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTaskType", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskType</returns>
        public async System.Threading.Tasks.Task<TaskType> GetTaskTypeAsync(string type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<TaskType> localVarResponse = await GetTaskTypeWithHttpInfoAsync(type, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * &lt;class &#39;rest_framework.permissions.AllowAny&#39;&gt; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskType)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<TaskType>> GetTaskTypeWithHttpInfoAsync(string type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'type' when calling AutomationApi->GetTaskType");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("type", ElementsSDK.Client.ClientUtils.ParameterToString(type)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TaskType>("/api/2/tasks/types/{type}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTaskType", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobInstance">Filter the returned list by &#x60;job_instance&#x60;. (optional)</param>
        /// <param name="jobInstanceIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="subtask">Filter the returned list by &#x60;subtask&#x60;. (optional)</param>
        /// <param name="state">Filter the returned list by &#x60;state&#x60;. (optional)</param>
        /// <param name="stateIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="idIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="taskName">Filter the returned list by &#x60;task_name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>TasksSummary</returns>
        public TasksSummary GetTasksSummary(string jobInstance = default(string), string jobInstanceIn = default(string), string subtask = default(string), string state = default(string), decimal? stateIn = default(decimal?), string id = default(string), string idIn = default(string), string name = default(string), string taskName = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.ApiResponse<TasksSummary> localVarResponse = GetTasksSummaryWithHttpInfo(jobInstance, jobInstanceIn, subtask, state, stateIn, id, idIn, name, taskName, ordering, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobInstance">Filter the returned list by &#x60;job_instance&#x60;. (optional)</param>
        /// <param name="jobInstanceIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="subtask">Filter the returned list by &#x60;subtask&#x60;. (optional)</param>
        /// <param name="state">Filter the returned list by &#x60;state&#x60;. (optional)</param>
        /// <param name="stateIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="idIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="taskName">Filter the returned list by &#x60;task_name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of TasksSummary</returns>
        public ElementsSDK.Client.ApiResponse<TasksSummary> GetTasksSummaryWithHttpInfo(string jobInstance = default(string), string jobInstanceIn = default(string), string subtask = default(string), string state = default(string), decimal? stateIn = default(decimal?), string id = default(string), string idIn = default(string), string name = default(string), string taskName = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?))
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (jobInstance != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "job_instance", jobInstance));
            }
            if (jobInstanceIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "job_instance__in", jobInstanceIn));
            }
            if (subtask != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "subtask", subtask));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (stateIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "state__in", stateIn));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (idIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "id__in", idIn));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (taskName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "task_name", taskName));
            }
            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TasksSummary>("/api/2/tasks/summary", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTasksSummary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobInstance">Filter the returned list by &#x60;job_instance&#x60;. (optional)</param>
        /// <param name="jobInstanceIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="subtask">Filter the returned list by &#x60;subtask&#x60;. (optional)</param>
        /// <param name="state">Filter the returned list by &#x60;state&#x60;. (optional)</param>
        /// <param name="stateIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="idIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="taskName">Filter the returned list by &#x60;task_name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TasksSummary</returns>
        public async System.Threading.Tasks.Task<TasksSummary> GetTasksSummaryAsync(string jobInstance = default(string), string jobInstanceIn = default(string), string subtask = default(string), string state = default(string), decimal? stateIn = default(decimal?), string id = default(string), string idIn = default(string), string name = default(string), string taskName = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<TasksSummary> localVarResponse = await GetTasksSummaryWithHttpInfoAsync(jobInstance, jobInstanceIn, subtask, state, stateIn, id, idIn, name, taskName, ordering, limit, offset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobInstance">Filter the returned list by &#x60;job_instance&#x60;. (optional)</param>
        /// <param name="jobInstanceIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="subtask">Filter the returned list by &#x60;subtask&#x60;. (optional)</param>
        /// <param name="state">Filter the returned list by &#x60;state&#x60;. (optional)</param>
        /// <param name="stateIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="id">Filter the returned list by &#x60;id&#x60;. (optional)</param>
        /// <param name="idIn">Multiple values may be separated by commas. (optional)</param>
        /// <param name="name">Filter the returned list by &#x60;name&#x60;. (optional)</param>
        /// <param name="taskName">Filter the returned list by &#x60;task_name&#x60;. (optional)</param>
        /// <param name="ordering">Which field to use when ordering the results. (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TasksSummary)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<TasksSummary>> GetTasksSummaryWithHttpInfoAsync(string jobInstance = default(string), string jobInstanceIn = default(string), string subtask = default(string), string state = default(string), decimal? stateIn = default(decimal?), string id = default(string), string idIn = default(string), string name = default(string), string taskName = default(string), string ordering = default(string), int? limit = default(int?), int? offset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (jobInstance != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "job_instance", jobInstance));
            }
            if (jobInstanceIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "job_instance__in", jobInstanceIn));
            }
            if (subtask != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "subtask", subtask));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (stateIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "state__in", stateIn));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (idIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "id__in", idIn));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (taskName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "task_name", taskName));
            }
            if (ordering != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "ordering", ordering));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ElementsSDK.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TasksSummary>("/api/2/tasks/summary", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTasksSummary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void KillAllPendingTasks()
        {
            KillAllPendingTasksWithHttpInfo();
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> KillAllPendingTasksWithHttpInfo()
        {
            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/2/tasks/pending", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("KillAllPendingTasks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task KillAllPendingTasksAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await KillAllPendingTasksWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> KillAllPendingTasksWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/2/tasks/pending", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("KillAllPendingTasks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <returns></returns>
        public void KillTask(string id)
        {
            KillTaskWithHttpInfo(id);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ElementsSDK.Client.ApiResponse<Object> KillTaskWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'id' when calling AutomationApi->KillTask");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/2/tasks/{id}/kill", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("KillTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task KillTaskAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await KillTaskWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Object>> KillTaskWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'id' when calling AutomationApi->KillTask");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/2/tasks/{id}/kill", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("KillTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this job.</param>
        /// <param name="jobPartialUpdate"></param>
        /// <returns>Job</returns>
        public Job PatchJob(int id, JobPartialUpdate jobPartialUpdate)
        {
            ElementsSDK.Client.ApiResponse<Job> localVarResponse = PatchJobWithHttpInfo(id, jobPartialUpdate);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this job.</param>
        /// <param name="jobPartialUpdate"></param>
        /// <returns>ApiResponse of Job</returns>
        public ElementsSDK.Client.ApiResponse<Job> PatchJobWithHttpInfo(int id, JobPartialUpdate jobPartialUpdate)
        {
            // verify the required parameter 'jobPartialUpdate' is set
            if (jobPartialUpdate == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'jobPartialUpdate' when calling AutomationApi->PatchJob");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = jobPartialUpdate;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Job>("/api/2/jobs/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this job.</param>
        /// <param name="jobPartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Job</returns>
        public async System.Threading.Tasks.Task<Job> PatchJobAsync(int id, JobPartialUpdate jobPartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<Job> localVarResponse = await PatchJobWithHttpInfoAsync(id, jobPartialUpdate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this job.</param>
        /// <param name="jobPartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Job)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Job>> PatchJobWithHttpInfoAsync(int id, JobPartialUpdate jobPartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'jobPartialUpdate' is set
            if (jobPartialUpdate == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'jobPartialUpdate' when calling AutomationApi->PatchJob");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = jobPartialUpdate;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Job>("/api/2/jobs/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this schedule.</param>
        /// <param name="schedulePartialUpdate"></param>
        /// <returns>Schedule</returns>
        public Schedule PatchSchedule(int id, SchedulePartialUpdate schedulePartialUpdate)
        {
            ElementsSDK.Client.ApiResponse<Schedule> localVarResponse = PatchScheduleWithHttpInfo(id, schedulePartialUpdate);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this schedule.</param>
        /// <param name="schedulePartialUpdate"></param>
        /// <returns>ApiResponse of Schedule</returns>
        public ElementsSDK.Client.ApiResponse<Schedule> PatchScheduleWithHttpInfo(int id, SchedulePartialUpdate schedulePartialUpdate)
        {
            // verify the required parameter 'schedulePartialUpdate' is set
            if (schedulePartialUpdate == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'schedulePartialUpdate' when calling AutomationApi->PatchSchedule");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = schedulePartialUpdate;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Schedule>("/api/2/schedules/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchSchedule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this schedule.</param>
        /// <param name="schedulePartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Schedule</returns>
        public async System.Threading.Tasks.Task<Schedule> PatchScheduleAsync(int id, SchedulePartialUpdate schedulePartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<Schedule> localVarResponse = await PatchScheduleWithHttpInfoAsync(id, schedulePartialUpdate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this schedule.</param>
        /// <param name="schedulePartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Schedule)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Schedule>> PatchScheduleWithHttpInfoAsync(int id, SchedulePartialUpdate schedulePartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'schedulePartialUpdate' is set
            if (schedulePartialUpdate == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'schedulePartialUpdate' when calling AutomationApi->PatchSchedule");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = schedulePartialUpdate;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Schedule>("/api/2/schedules/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchSchedule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this subtask.</param>
        /// <param name="subtaskPartialUpdate"></param>
        /// <returns>Subtask</returns>
        public Subtask PatchSubtask(int id, SubtaskPartialUpdate subtaskPartialUpdate)
        {
            ElementsSDK.Client.ApiResponse<Subtask> localVarResponse = PatchSubtaskWithHttpInfo(id, subtaskPartialUpdate);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this subtask.</param>
        /// <param name="subtaskPartialUpdate"></param>
        /// <returns>ApiResponse of Subtask</returns>
        public ElementsSDK.Client.ApiResponse<Subtask> PatchSubtaskWithHttpInfo(int id, SubtaskPartialUpdate subtaskPartialUpdate)
        {
            // verify the required parameter 'subtaskPartialUpdate' is set
            if (subtaskPartialUpdate == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'subtaskPartialUpdate' when calling AutomationApi->PatchSubtask");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = subtaskPartialUpdate;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Subtask>("/api/2/subtasks/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchSubtask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this subtask.</param>
        /// <param name="subtaskPartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Subtask</returns>
        public async System.Threading.Tasks.Task<Subtask> PatchSubtaskAsync(int id, SubtaskPartialUpdate subtaskPartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<Subtask> localVarResponse = await PatchSubtaskWithHttpInfoAsync(id, subtaskPartialUpdate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this subtask.</param>
        /// <param name="subtaskPartialUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Subtask)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Subtask>> PatchSubtaskWithHttpInfoAsync(int id, SubtaskPartialUpdate subtaskPartialUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subtaskPartialUpdate' is set
            if (subtaskPartialUpdate == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'subtaskPartialUpdate' when calling AutomationApi->PatchSubtask");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = subtaskPartialUpdate;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Subtask>("/api/2/subtasks/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchSubtask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <returns>TaskInfo</returns>
        public TaskInfo RestartTask(string id)
        {
            ElementsSDK.Client.ApiResponse<TaskInfo> localVarResponse = RestartTaskWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <returns>ApiResponse of TaskInfo</returns>
        public ElementsSDK.Client.ApiResponse<TaskInfo> RestartTaskWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'id' when calling AutomationApi->RestartTask");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TaskInfo>("/api/2/tasks/{id}/restart", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RestartTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        public async System.Threading.Tasks.Task<TaskInfo> RestartTaskAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<TaskInfo> localVarResponse = await RestartTaskWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique value identifying this task info.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<TaskInfo>> RestartTaskWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'id' when calling AutomationApi->RestartTask");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TaskInfo>("/api/2/tasks/{id}/restart", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RestartTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this job.</param>
        /// <param name="startJobRequest"></param>
        /// <returns>List&lt;TaskInfo&gt;</returns>
        public List<TaskInfo> StartJob(int id, StartJobRequest startJobRequest)
        {
            ElementsSDK.Client.ApiResponse<List<TaskInfo>> localVarResponse = StartJobWithHttpInfo(id, startJobRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this job.</param>
        /// <param name="startJobRequest"></param>
        /// <returns>ApiResponse of List&lt;TaskInfo&gt;</returns>
        public ElementsSDK.Client.ApiResponse<List<TaskInfo>> StartJobWithHttpInfo(int id, StartJobRequest startJobRequest)
        {
            // verify the required parameter 'startJobRequest' is set
            if (startJobRequest == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'startJobRequest' when calling AutomationApi->StartJob");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = startJobRequest;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<TaskInfo>>("/api/2/jobs/{id}/start", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this job.</param>
        /// <param name="startJobRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TaskInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<TaskInfo>> StartJobAsync(int id, StartJobRequest startJobRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<List<TaskInfo>> localVarResponse = await StartJobWithHttpInfoAsync(id, startJobRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this job.</param>
        /// <param name="startJobRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TaskInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<List<TaskInfo>>> StartJobWithHttpInfoAsync(int id, StartJobRequest startJobRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'startJobRequest' is set
            if (startJobRequest == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'startJobRequest' when calling AutomationApi->StartJob");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = startJobRequest;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<TaskInfo>>("/api/2/jobs/{id}/start", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTaskRequest"></param>
        /// <returns>TaskInfo</returns>
        public TaskInfo StartTask(StartTaskRequest startTaskRequest)
        {
            ElementsSDK.Client.ApiResponse<TaskInfo> localVarResponse = StartTaskWithHttpInfo(startTaskRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTaskRequest"></param>
        /// <returns>ApiResponse of TaskInfo</returns>
        public ElementsSDK.Client.ApiResponse<TaskInfo> StartTaskWithHttpInfo(StartTaskRequest startTaskRequest)
        {
            // verify the required parameter 'startTaskRequest' is set
            if (startTaskRequest == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'startTaskRequest' when calling AutomationApi->StartTask");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = startTaskRequest;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TaskInfo>("/api/2/tasks/start", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTaskRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskInfo</returns>
        public async System.Threading.Tasks.Task<TaskInfo> StartTaskAsync(StartTaskRequest startTaskRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<TaskInfo> localVarResponse = await StartTaskWithHttpInfoAsync(startTaskRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:manage&#x60; 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTaskRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskInfo)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<TaskInfo>> StartTaskWithHttpInfoAsync(StartTaskRequest startTaskRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'startTaskRequest' is set
            if (startTaskRequest == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'startTaskRequest' when calling AutomationApi->StartTask");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = startTaskRequest;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TaskInfo>("/api/2/tasks/start", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this job.</param>
        /// <param name="job"></param>
        /// <returns>Job</returns>
        public Job UpdateJob(int id, Job job)
        {
            ElementsSDK.Client.ApiResponse<Job> localVarResponse = UpdateJobWithHttpInfo(id, job);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this job.</param>
        /// <param name="job"></param>
        /// <returns>ApiResponse of Job</returns>
        public ElementsSDK.Client.ApiResponse<Job> UpdateJobWithHttpInfo(int id, Job job)
        {
            // verify the required parameter 'job' is set
            if (job == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'job' when calling AutomationApi->UpdateJob");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = job;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Job>("/api/2/jobs/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this job.</param>
        /// <param name="job"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Job</returns>
        public async System.Threading.Tasks.Task<Job> UpdateJobAsync(int id, Job job, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<Job> localVarResponse = await UpdateJobWithHttpInfoAsync(id, job, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;None&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this job.</param>
        /// <param name="job"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Job)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Job>> UpdateJobWithHttpInfoAsync(int id, Job job, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'job' is set
            if (job == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'job' when calling AutomationApi->UpdateJob");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = job;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Job>("/api/2/jobs/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this schedule.</param>
        /// <param name="schedule"></param>
        /// <returns>Schedule</returns>
        public Schedule UpdateSchedule(int id, Schedule schedule)
        {
            ElementsSDK.Client.ApiResponse<Schedule> localVarResponse = UpdateScheduleWithHttpInfo(id, schedule);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this schedule.</param>
        /// <param name="schedule"></param>
        /// <returns>ApiResponse of Schedule</returns>
        public ElementsSDK.Client.ApiResponse<Schedule> UpdateScheduleWithHttpInfo(int id, Schedule schedule)
        {
            // verify the required parameter 'schedule' is set
            if (schedule == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'schedule' when calling AutomationApi->UpdateSchedule");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = schedule;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Schedule>("/api/2/schedules/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSchedule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this schedule.</param>
        /// <param name="schedule"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Schedule</returns>
        public async System.Threading.Tasks.Task<Schedule> UpdateScheduleAsync(int id, Schedule schedule, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<Schedule> localVarResponse = await UpdateScheduleWithHttpInfoAsync(id, schedule, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this schedule.</param>
        /// <param name="schedule"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Schedule)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Schedule>> UpdateScheduleWithHttpInfoAsync(int id, Schedule schedule, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'schedule' is set
            if (schedule == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'schedule' when calling AutomationApi->UpdateSchedule");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = schedule;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Schedule>("/api/2/schedules/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSchedule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this subtask.</param>
        /// <param name="subtask"></param>
        /// <returns>Subtask</returns>
        public Subtask UpdateSubtask(int id, Subtask subtask)
        {
            ElementsSDK.Client.ApiResponse<Subtask> localVarResponse = UpdateSubtaskWithHttpInfo(id, subtask);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this subtask.</param>
        /// <param name="subtask"></param>
        /// <returns>ApiResponse of Subtask</returns>
        public ElementsSDK.Client.ApiResponse<Subtask> UpdateSubtaskWithHttpInfo(int id, Subtask subtask)
        {
            // verify the required parameter 'subtask' is set
            if (subtask == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'subtask' when calling AutomationApi->UpdateSubtask");

            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = subtask;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Subtask>("/api/2/subtasks/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSubtask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this subtask.</param>
        /// <param name="subtask"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Subtask</returns>
        public async System.Threading.Tasks.Task<Subtask> UpdateSubtaskAsync(int id, Subtask subtask, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ElementsSDK.Client.ApiResponse<Subtask> localVarResponse = await UpdateSubtaskWithHttpInfoAsync(id, subtask, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  ### Required permissions    * User account permission: &#x60;tasks:view&#x60; (read) / &#x60;tasks:manage&#x60; (write) 
        /// </summary>
        /// <exception cref="ElementsSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this subtask.</param>
        /// <param name="subtask"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Subtask)</returns>
        public async System.Threading.Tasks.Task<ElementsSDK.Client.ApiResponse<Subtask>> UpdateSubtaskWithHttpInfoAsync(int id, Subtask subtask, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subtask' is set
            if (subtask == null)
                throw new ElementsSDK.Client.ApiException(400, "Missing required parameter 'subtask' when calling AutomationApi->UpdateSubtask");


            ElementsSDK.Client.RequestOptions localVarRequestOptions = new ElementsSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ElementsSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ElementsSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", ElementsSDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = subtask;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Subtask>("/api/2/subtasks/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSubtask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
